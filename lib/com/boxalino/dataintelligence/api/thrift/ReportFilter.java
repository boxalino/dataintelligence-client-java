/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.dataintelligence.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * this structure defines a report filter (set of and clauses), all of which must be true
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-14")
public class ReportFilter implements org.apache.thrift.TBase<ReportFilter, ReportFilter._Fields>, java.io.Serializable, Cloneable, Comparable<ReportFilter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReportFilter");

  private static final org.apache.thrift.protocol.TField DIMENSION_CONDITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("dimensionConditions", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField METRIC_CONDITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("metricConditions", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReportFilterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReportFilterTupleSchemeFactory());
  }

  /**
   * the dimension filters
   */
  public Map<ReportDimension,List<ConditionTarget>> dimensionConditions; // required
  /**
   * the metric filters
   */
  public Map<ReportMetric,List<ConditionTarget>> metricConditions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * the dimension filters
     */
    DIMENSION_CONDITIONS((short)1, "dimensionConditions"),
    /**
     * the metric filters
     */
    METRIC_CONDITIONS((short)2, "metricConditions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIMENSION_CONDITIONS
          return DIMENSION_CONDITIONS;
        case 2: // METRIC_CONDITIONS
          return METRIC_CONDITIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIMENSION_CONDITIONS, new org.apache.thrift.meta_data.FieldMetaData("dimensionConditions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportDimension.class), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConditionTarget.class)))));
    tmpMap.put(_Fields.METRIC_CONDITIONS, new org.apache.thrift.meta_data.FieldMetaData("metricConditions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportMetric.class), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConditionTarget.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReportFilter.class, metaDataMap);
  }

  public ReportFilter() {
  }

  public ReportFilter(
    Map<ReportDimension,List<ConditionTarget>> dimensionConditions,
    Map<ReportMetric,List<ConditionTarget>> metricConditions)
  {
    this();
    this.dimensionConditions = dimensionConditions;
    this.metricConditions = metricConditions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReportFilter(ReportFilter other) {
    if (other.isSetDimensionConditions()) {
      Map<ReportDimension,List<ConditionTarget>> __this__dimensionConditions = new HashMap<ReportDimension,List<ConditionTarget>>(other.dimensionConditions.size());
      for (Map.Entry<ReportDimension, List<ConditionTarget>> other_element : other.dimensionConditions.entrySet()) {

        ReportDimension other_element_key = other_element.getKey();
        List<ConditionTarget> other_element_value = other_element.getValue();

        ReportDimension __this__dimensionConditions_copy_key = new ReportDimension(other_element_key);

        List<ConditionTarget> __this__dimensionConditions_copy_value = new ArrayList<ConditionTarget>(other_element_value.size());
        for (ConditionTarget other_element_value_element : other_element_value) {
          __this__dimensionConditions_copy_value.add(new ConditionTarget(other_element_value_element));
        }

        __this__dimensionConditions.put(__this__dimensionConditions_copy_key, __this__dimensionConditions_copy_value);
      }
      this.dimensionConditions = __this__dimensionConditions;
    }
    if (other.isSetMetricConditions()) {
      Map<ReportMetric,List<ConditionTarget>> __this__metricConditions = new HashMap<ReportMetric,List<ConditionTarget>>(other.metricConditions.size());
      for (Map.Entry<ReportMetric, List<ConditionTarget>> other_element : other.metricConditions.entrySet()) {

        ReportMetric other_element_key = other_element.getKey();
        List<ConditionTarget> other_element_value = other_element.getValue();

        ReportMetric __this__metricConditions_copy_key = new ReportMetric(other_element_key);

        List<ConditionTarget> __this__metricConditions_copy_value = new ArrayList<ConditionTarget>(other_element_value.size());
        for (ConditionTarget other_element_value_element : other_element_value) {
          __this__metricConditions_copy_value.add(new ConditionTarget(other_element_value_element));
        }

        __this__metricConditions.put(__this__metricConditions_copy_key, __this__metricConditions_copy_value);
      }
      this.metricConditions = __this__metricConditions;
    }
  }

  public ReportFilter deepCopy() {
    return new ReportFilter(this);
  }

  @Override
  public void clear() {
    this.dimensionConditions = null;
    this.metricConditions = null;
  }

  public int getDimensionConditionsSize() {
    return (this.dimensionConditions == null) ? 0 : this.dimensionConditions.size();
  }

  public void putToDimensionConditions(ReportDimension key, List<ConditionTarget> val) {
    if (this.dimensionConditions == null) {
      this.dimensionConditions = new HashMap<ReportDimension,List<ConditionTarget>>();
    }
    this.dimensionConditions.put(key, val);
  }

  /**
   * the dimension filters
   */
  public Map<ReportDimension,List<ConditionTarget>> getDimensionConditions() {
    return this.dimensionConditions;
  }

  /**
   * the dimension filters
   */
  public ReportFilter setDimensionConditions(Map<ReportDimension,List<ConditionTarget>> dimensionConditions) {
    this.dimensionConditions = dimensionConditions;
    return this;
  }

  public void unsetDimensionConditions() {
    this.dimensionConditions = null;
  }

  /** Returns true if field dimensionConditions is set (has been assigned a value) and false otherwise */
  public boolean isSetDimensionConditions() {
    return this.dimensionConditions != null;
  }

  public void setDimensionConditionsIsSet(boolean value) {
    if (!value) {
      this.dimensionConditions = null;
    }
  }

  public int getMetricConditionsSize() {
    return (this.metricConditions == null) ? 0 : this.metricConditions.size();
  }

  public void putToMetricConditions(ReportMetric key, List<ConditionTarget> val) {
    if (this.metricConditions == null) {
      this.metricConditions = new HashMap<ReportMetric,List<ConditionTarget>>();
    }
    this.metricConditions.put(key, val);
  }

  /**
   * the metric filters
   */
  public Map<ReportMetric,List<ConditionTarget>> getMetricConditions() {
    return this.metricConditions;
  }

  /**
   * the metric filters
   */
  public ReportFilter setMetricConditions(Map<ReportMetric,List<ConditionTarget>> metricConditions) {
    this.metricConditions = metricConditions;
    return this;
  }

  public void unsetMetricConditions() {
    this.metricConditions = null;
  }

  /** Returns true if field metricConditions is set (has been assigned a value) and false otherwise */
  public boolean isSetMetricConditions() {
    return this.metricConditions != null;
  }

  public void setMetricConditionsIsSet(boolean value) {
    if (!value) {
      this.metricConditions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIMENSION_CONDITIONS:
      if (value == null) {
        unsetDimensionConditions();
      } else {
        setDimensionConditions((Map<ReportDimension,List<ConditionTarget>>)value);
      }
      break;

    case METRIC_CONDITIONS:
      if (value == null) {
        unsetMetricConditions();
      } else {
        setMetricConditions((Map<ReportMetric,List<ConditionTarget>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIMENSION_CONDITIONS:
      return getDimensionConditions();

    case METRIC_CONDITIONS:
      return getMetricConditions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIMENSION_CONDITIONS:
      return isSetDimensionConditions();
    case METRIC_CONDITIONS:
      return isSetMetricConditions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReportFilter)
      return this.equals((ReportFilter)that);
    return false;
  }

  public boolean equals(ReportFilter that) {
    if (that == null)
      return false;

    boolean this_present_dimensionConditions = true && this.isSetDimensionConditions();
    boolean that_present_dimensionConditions = true && that.isSetDimensionConditions();
    if (this_present_dimensionConditions || that_present_dimensionConditions) {
      if (!(this_present_dimensionConditions && that_present_dimensionConditions))
        return false;
      if (!this.dimensionConditions.equals(that.dimensionConditions))
        return false;
    }

    boolean this_present_metricConditions = true && this.isSetMetricConditions();
    boolean that_present_metricConditions = true && that.isSetMetricConditions();
    if (this_present_metricConditions || that_present_metricConditions) {
      if (!(this_present_metricConditions && that_present_metricConditions))
        return false;
      if (!this.metricConditions.equals(that.metricConditions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dimensionConditions = true && (isSetDimensionConditions());
    list.add(present_dimensionConditions);
    if (present_dimensionConditions)
      list.add(dimensionConditions);

    boolean present_metricConditions = true && (isSetMetricConditions());
    list.add(present_metricConditions);
    if (present_metricConditions)
      list.add(metricConditions);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReportFilter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDimensionConditions()).compareTo(other.isSetDimensionConditions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDimensionConditions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dimensionConditions, other.dimensionConditions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetricConditions()).compareTo(other.isSetMetricConditions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetricConditions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metricConditions, other.metricConditions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReportFilter(");
    boolean first = true;

    sb.append("dimensionConditions:");
    if (this.dimensionConditions == null) {
      sb.append("null");
    } else {
      sb.append(this.dimensionConditions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metricConditions:");
    if (this.metricConditions == null) {
      sb.append("null");
    } else {
      sb.append(this.metricConditions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (dimensionConditions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dimensionConditions' was not present! Struct: " + toString());
    }
    if (metricConditions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metricConditions' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReportFilterStandardSchemeFactory implements SchemeFactory {
    public ReportFilterStandardScheme getScheme() {
      return new ReportFilterStandardScheme();
    }
  }

  private static class ReportFilterStandardScheme extends StandardScheme<ReportFilter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReportFilter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIMENSION_CONDITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin();
                struct.dimensionConditions = new HashMap<ReportDimension,List<ConditionTarget>>(2*_map120.size);
                ReportDimension _key121;
                List<ConditionTarget> _val122;
                for (int _i123 = 0; _i123 < _map120.size; ++_i123)
                {
                  _key121 = new ReportDimension();
                  _key121.read(iprot);
                  {
                    org.apache.thrift.protocol.TList _list124 = iprot.readListBegin();
                    _val122 = new ArrayList<ConditionTarget>(_list124.size);
                    ConditionTarget _elem125;
                    for (int _i126 = 0; _i126 < _list124.size; ++_i126)
                    {
                      _elem125 = new ConditionTarget();
                      _elem125.read(iprot);
                      _val122.add(_elem125);
                    }
                    iprot.readListEnd();
                  }
                  struct.dimensionConditions.put(_key121, _val122);
                }
                iprot.readMapEnd();
              }
              struct.setDimensionConditionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METRIC_CONDITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map127 = iprot.readMapBegin();
                struct.metricConditions = new HashMap<ReportMetric,List<ConditionTarget>>(2*_map127.size);
                ReportMetric _key128;
                List<ConditionTarget> _val129;
                for (int _i130 = 0; _i130 < _map127.size; ++_i130)
                {
                  _key128 = new ReportMetric();
                  _key128.read(iprot);
                  {
                    org.apache.thrift.protocol.TList _list131 = iprot.readListBegin();
                    _val129 = new ArrayList<ConditionTarget>(_list131.size);
                    ConditionTarget _elem132;
                    for (int _i133 = 0; _i133 < _list131.size; ++_i133)
                    {
                      _elem132 = new ConditionTarget();
                      _elem132.read(iprot);
                      _val129.add(_elem132);
                    }
                    iprot.readListEnd();
                  }
                  struct.metricConditions.put(_key128, _val129);
                }
                iprot.readMapEnd();
              }
              struct.setMetricConditionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReportFilter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dimensionConditions != null) {
        oprot.writeFieldBegin(DIMENSION_CONDITIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.LIST, struct.dimensionConditions.size()));
          for (Map.Entry<ReportDimension, List<ConditionTarget>> _iter134 : struct.dimensionConditions.entrySet())
          {
            _iter134.getKey().write(oprot);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter134.getValue().size()));
              for (ConditionTarget _iter135 : _iter134.getValue())
              {
                _iter135.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.metricConditions != null) {
        oprot.writeFieldBegin(METRIC_CONDITIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.LIST, struct.metricConditions.size()));
          for (Map.Entry<ReportMetric, List<ConditionTarget>> _iter136 : struct.metricConditions.entrySet())
          {
            _iter136.getKey().write(oprot);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter136.getValue().size()));
              for (ConditionTarget _iter137 : _iter136.getValue())
              {
                _iter137.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReportFilterTupleSchemeFactory implements SchemeFactory {
    public ReportFilterTupleScheme getScheme() {
      return new ReportFilterTupleScheme();
    }
  }

  private static class ReportFilterTupleScheme extends TupleScheme<ReportFilter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReportFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.dimensionConditions.size());
        for (Map.Entry<ReportDimension, List<ConditionTarget>> _iter138 : struct.dimensionConditions.entrySet())
        {
          _iter138.getKey().write(oprot);
          {
            oprot.writeI32(_iter138.getValue().size());
            for (ConditionTarget _iter139 : _iter138.getValue())
            {
              _iter139.write(oprot);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.metricConditions.size());
        for (Map.Entry<ReportMetric, List<ConditionTarget>> _iter140 : struct.metricConditions.entrySet())
        {
          _iter140.getKey().write(oprot);
          {
            oprot.writeI32(_iter140.getValue().size());
            for (ConditionTarget _iter141 : _iter140.getValue())
            {
              _iter141.write(oprot);
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReportFilter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map142 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.dimensionConditions = new HashMap<ReportDimension,List<ConditionTarget>>(2*_map142.size);
        ReportDimension _key143;
        List<ConditionTarget> _val144;
        for (int _i145 = 0; _i145 < _map142.size; ++_i145)
        {
          _key143 = new ReportDimension();
          _key143.read(iprot);
          {
            org.apache.thrift.protocol.TList _list146 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _val144 = new ArrayList<ConditionTarget>(_list146.size);
            ConditionTarget _elem147;
            for (int _i148 = 0; _i148 < _list146.size; ++_i148)
            {
              _elem147 = new ConditionTarget();
              _elem147.read(iprot);
              _val144.add(_elem147);
            }
          }
          struct.dimensionConditions.put(_key143, _val144);
        }
      }
      struct.setDimensionConditionsIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map149 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.metricConditions = new HashMap<ReportMetric,List<ConditionTarget>>(2*_map149.size);
        ReportMetric _key150;
        List<ConditionTarget> _val151;
        for (int _i152 = 0; _i152 < _map149.size; ++_i152)
        {
          _key150 = new ReportMetric();
          _key150.read(iprot);
          {
            org.apache.thrift.protocol.TList _list153 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            _val151 = new ArrayList<ConditionTarget>(_list153.size);
            ConditionTarget _elem154;
            for (int _i155 = 0; _i155 < _list153.size; ++_i155)
            {
              _elem154 = new ConditionTarget();
              _elem154.read(iprot);
              _val151.add(_elem154);
            }
          }
          struct.metricConditions.put(_key150, _val151);
        }
      }
      struct.setMetricConditionsIsSet(true);
    }
  }

}

