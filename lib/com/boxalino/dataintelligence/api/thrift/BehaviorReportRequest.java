/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.dataintelligence.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * This structure defines a behavior report request
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-14")
public class BehaviorReportRequest implements org.apache.thrift.TBase<BehaviorReportRequest, BehaviorReportRequest._Fields>, java.io.Serializable, Cloneable, Comparable<BehaviorReportRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BehaviorReportRequest");

  private static final org.apache.thrift.protocol.TField METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("metrics", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField DIMENSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("dimensions", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SORT_BYS_FIELD_DESC = new org.apache.thrift.protocol.TField("sortBys", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("precision", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField MAX_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxResults", org.apache.thrift.protocol.TType.I16, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BehaviorReportRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BehaviorReportRequestTupleSchemeFactory());
  }

  /**
   * the metrics to evaluate report (e.g.: kpis to return)
   */
  public List<ReportMetric> metrics; // required
  /**
   * an optional list of dimensions for the report (for segmentation), while groups are different for each type of reporting, the dimension are normally standard (visitor country, device, ...)
   */
  public List<ReportDimension> dimensions; // optional
  /**
   * the report filter to use
   */
  public ReportFilter filter; // optional
  /**
   * the metrics to use for sorting the results
   */
  public List<ReportMetric> sortBys; // optional
  /**
   * a required date range for the reporting response (precision is only managed per day)
   */
  public TimeRange range; // required
  /**
   * a required date range precision if the results should be aggregated per week or month, overall or return for each day
   * 
   * @see TimeRangePrecision
   */
  public TimeRangePrecision precision; // required
  /**
   * an optional starting index (e.g.: if the maximum number of results was exceeded and a second page needs to be displayed). First index is 0.
   */
  public short startIndex; // optional
  /**
   * an required number of maximum number of results (one result is one source of date rage data in of values for all kpis)
   */
  public short maxResults; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * the metrics to evaluate report (e.g.: kpis to return)
     */
    METRICS((short)1, "metrics"),
    /**
     * an optional list of dimensions for the report (for segmentation), while groups are different for each type of reporting, the dimension are normally standard (visitor country, device, ...)
     */
    DIMENSIONS((short)2, "dimensions"),
    /**
     * the report filter to use
     */
    FILTER((short)3, "filter"),
    /**
     * the metrics to use for sorting the results
     */
    SORT_BYS((short)4, "sortBys"),
    /**
     * a required date range for the reporting response (precision is only managed per day)
     */
    RANGE((short)5, "range"),
    /**
     * a required date range precision if the results should be aggregated per week or month, overall or return for each day
     * 
     * @see TimeRangePrecision
     */
    PRECISION((short)6, "precision"),
    /**
     * an optional starting index (e.g.: if the maximum number of results was exceeded and a second page needs to be displayed). First index is 0.
     */
    START_INDEX((short)7, "startIndex"),
    /**
     * an required number of maximum number of results (one result is one source of date rage data in of values for all kpis)
     */
    MAX_RESULTS((short)8, "maxResults");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // METRICS
          return METRICS;
        case 2: // DIMENSIONS
          return DIMENSIONS;
        case 3: // FILTER
          return FILTER;
        case 4: // SORT_BYS
          return SORT_BYS;
        case 5: // RANGE
          return RANGE;
        case 6: // PRECISION
          return PRECISION;
        case 7: // START_INDEX
          return START_INDEX;
        case 8: // MAX_RESULTS
          return MAX_RESULTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTINDEX_ISSET_ID = 0;
  private static final int __MAXRESULTS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DIMENSIONS,_Fields.FILTER,_Fields.SORT_BYS,_Fields.START_INDEX};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.METRICS, new org.apache.thrift.meta_data.FieldMetaData("metrics", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportMetric.class))));
    tmpMap.put(_Fields.DIMENSIONS, new org.apache.thrift.meta_data.FieldMetaData("dimensions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportDimension.class))));
    tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportFilter.class)));
    tmpMap.put(_Fields.SORT_BYS, new org.apache.thrift.meta_data.FieldMetaData("sortBys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportMetric.class))));
    tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeRange.class)));
    tmpMap.put(_Fields.PRECISION, new org.apache.thrift.meta_data.FieldMetaData("precision", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TimeRangePrecision.class)));
    tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MAX_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("maxResults", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BehaviorReportRequest.class, metaDataMap);
  }

  public BehaviorReportRequest() {
  }

  public BehaviorReportRequest(
    List<ReportMetric> metrics,
    TimeRange range,
    TimeRangePrecision precision,
    short maxResults)
  {
    this();
    this.metrics = metrics;
    this.range = range;
    this.precision = precision;
    this.maxResults = maxResults;
    setMaxResultsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BehaviorReportRequest(BehaviorReportRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMetrics()) {
      List<ReportMetric> __this__metrics = new ArrayList<ReportMetric>(other.metrics.size());
      for (ReportMetric other_element : other.metrics) {
        __this__metrics.add(new ReportMetric(other_element));
      }
      this.metrics = __this__metrics;
    }
    if (other.isSetDimensions()) {
      List<ReportDimension> __this__dimensions = new ArrayList<ReportDimension>(other.dimensions.size());
      for (ReportDimension other_element : other.dimensions) {
        __this__dimensions.add(new ReportDimension(other_element));
      }
      this.dimensions = __this__dimensions;
    }
    if (other.isSetFilter()) {
      this.filter = new ReportFilter(other.filter);
    }
    if (other.isSetSortBys()) {
      List<ReportMetric> __this__sortBys = new ArrayList<ReportMetric>(other.sortBys.size());
      for (ReportMetric other_element : other.sortBys) {
        __this__sortBys.add(new ReportMetric(other_element));
      }
      this.sortBys = __this__sortBys;
    }
    if (other.isSetRange()) {
      this.range = new TimeRange(other.range);
    }
    if (other.isSetPrecision()) {
      this.precision = other.precision;
    }
    this.startIndex = other.startIndex;
    this.maxResults = other.maxResults;
  }

  public BehaviorReportRequest deepCopy() {
    return new BehaviorReportRequest(this);
  }

  @Override
  public void clear() {
    this.metrics = null;
    this.dimensions = null;
    this.filter = null;
    this.sortBys = null;
    this.range = null;
    this.precision = null;
    setStartIndexIsSet(false);
    this.startIndex = 0;
    setMaxResultsIsSet(false);
    this.maxResults = 0;
  }

  public int getMetricsSize() {
    return (this.metrics == null) ? 0 : this.metrics.size();
  }

  public java.util.Iterator<ReportMetric> getMetricsIterator() {
    return (this.metrics == null) ? null : this.metrics.iterator();
  }

  public void addToMetrics(ReportMetric elem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<ReportMetric>();
    }
    this.metrics.add(elem);
  }

  /**
   * the metrics to evaluate report (e.g.: kpis to return)
   */
  public List<ReportMetric> getMetrics() {
    return this.metrics;
  }

  /**
   * the metrics to evaluate report (e.g.: kpis to return)
   */
  public BehaviorReportRequest setMetrics(List<ReportMetric> metrics) {
    this.metrics = metrics;
    return this;
  }

  public void unsetMetrics() {
    this.metrics = null;
  }

  /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
  public boolean isSetMetrics() {
    return this.metrics != null;
  }

  public void setMetricsIsSet(boolean value) {
    if (!value) {
      this.metrics = null;
    }
  }

  public int getDimensionsSize() {
    return (this.dimensions == null) ? 0 : this.dimensions.size();
  }

  public java.util.Iterator<ReportDimension> getDimensionsIterator() {
    return (this.dimensions == null) ? null : this.dimensions.iterator();
  }

  public void addToDimensions(ReportDimension elem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<ReportDimension>();
    }
    this.dimensions.add(elem);
  }

  /**
   * an optional list of dimensions for the report (for segmentation), while groups are different for each type of reporting, the dimension are normally standard (visitor country, device, ...)
   */
  public List<ReportDimension> getDimensions() {
    return this.dimensions;
  }

  /**
   * an optional list of dimensions for the report (for segmentation), while groups are different for each type of reporting, the dimension are normally standard (visitor country, device, ...)
   */
  public BehaviorReportRequest setDimensions(List<ReportDimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public void unsetDimensions() {
    this.dimensions = null;
  }

  /** Returns true if field dimensions is set (has been assigned a value) and false otherwise */
  public boolean isSetDimensions() {
    return this.dimensions != null;
  }

  public void setDimensionsIsSet(boolean value) {
    if (!value) {
      this.dimensions = null;
    }
  }

  /**
   * the report filter to use
   */
  public ReportFilter getFilter() {
    return this.filter;
  }

  /**
   * the report filter to use
   */
  public BehaviorReportRequest setFilter(ReportFilter filter) {
    this.filter = filter;
    return this;
  }

  public void unsetFilter() {
    this.filter = null;
  }

  /** Returns true if field filter is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter() {
    return this.filter != null;
  }

  public void setFilterIsSet(boolean value) {
    if (!value) {
      this.filter = null;
    }
  }

  public int getSortBysSize() {
    return (this.sortBys == null) ? 0 : this.sortBys.size();
  }

  public java.util.Iterator<ReportMetric> getSortBysIterator() {
    return (this.sortBys == null) ? null : this.sortBys.iterator();
  }

  public void addToSortBys(ReportMetric elem) {
    if (this.sortBys == null) {
      this.sortBys = new ArrayList<ReportMetric>();
    }
    this.sortBys.add(elem);
  }

  /**
   * the metrics to use for sorting the results
   */
  public List<ReportMetric> getSortBys() {
    return this.sortBys;
  }

  /**
   * the metrics to use for sorting the results
   */
  public BehaviorReportRequest setSortBys(List<ReportMetric> sortBys) {
    this.sortBys = sortBys;
    return this;
  }

  public void unsetSortBys() {
    this.sortBys = null;
  }

  /** Returns true if field sortBys is set (has been assigned a value) and false otherwise */
  public boolean isSetSortBys() {
    return this.sortBys != null;
  }

  public void setSortBysIsSet(boolean value) {
    if (!value) {
      this.sortBys = null;
    }
  }

  /**
   * a required date range for the reporting response (precision is only managed per day)
   */
  public TimeRange getRange() {
    return this.range;
  }

  /**
   * a required date range for the reporting response (precision is only managed per day)
   */
  public BehaviorReportRequest setRange(TimeRange range) {
    this.range = range;
    return this;
  }

  public void unsetRange() {
    this.range = null;
  }

  /** Returns true if field range is set (has been assigned a value) and false otherwise */
  public boolean isSetRange() {
    return this.range != null;
  }

  public void setRangeIsSet(boolean value) {
    if (!value) {
      this.range = null;
    }
  }

  /**
   * a required date range precision if the results should be aggregated per week or month, overall or return for each day
   * 
   * @see TimeRangePrecision
   */
  public TimeRangePrecision getPrecision() {
    return this.precision;
  }

  /**
   * a required date range precision if the results should be aggregated per week or month, overall or return for each day
   * 
   * @see TimeRangePrecision
   */
  public BehaviorReportRequest setPrecision(TimeRangePrecision precision) {
    this.precision = precision;
    return this;
  }

  public void unsetPrecision() {
    this.precision = null;
  }

  /** Returns true if field precision is set (has been assigned a value) and false otherwise */
  public boolean isSetPrecision() {
    return this.precision != null;
  }

  public void setPrecisionIsSet(boolean value) {
    if (!value) {
      this.precision = null;
    }
  }

  /**
   * an optional starting index (e.g.: if the maximum number of results was exceeded and a second page needs to be displayed). First index is 0.
   */
  public short getStartIndex() {
    return this.startIndex;
  }

  /**
   * an optional starting index (e.g.: if the maximum number of results was exceeded and a second page needs to be displayed). First index is 0.
   */
  public BehaviorReportRequest setStartIndex(short startIndex) {
    this.startIndex = startIndex;
    setStartIndexIsSet(true);
    return this;
  }

  public void unsetStartIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
  }

  /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetStartIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
  }

  public void setStartIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
  }

  /**
   * an required number of maximum number of results (one result is one source of date rage data in of values for all kpis)
   */
  public short getMaxResults() {
    return this.maxResults;
  }

  /**
   * an required number of maximum number of results (one result is one source of date rage data in of values for all kpis)
   */
  public BehaviorReportRequest setMaxResults(short maxResults) {
    this.maxResults = maxResults;
    setMaxResultsIsSet(true);
    return this;
  }

  public void unsetMaxResults() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXRESULTS_ISSET_ID);
  }

  /** Returns true if field maxResults is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxResults() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXRESULTS_ISSET_ID);
  }

  public void setMaxResultsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXRESULTS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case METRICS:
      if (value == null) {
        unsetMetrics();
      } else {
        setMetrics((List<ReportMetric>)value);
      }
      break;

    case DIMENSIONS:
      if (value == null) {
        unsetDimensions();
      } else {
        setDimensions((List<ReportDimension>)value);
      }
      break;

    case FILTER:
      if (value == null) {
        unsetFilter();
      } else {
        setFilter((ReportFilter)value);
      }
      break;

    case SORT_BYS:
      if (value == null) {
        unsetSortBys();
      } else {
        setSortBys((List<ReportMetric>)value);
      }
      break;

    case RANGE:
      if (value == null) {
        unsetRange();
      } else {
        setRange((TimeRange)value);
      }
      break;

    case PRECISION:
      if (value == null) {
        unsetPrecision();
      } else {
        setPrecision((TimeRangePrecision)value);
      }
      break;

    case START_INDEX:
      if (value == null) {
        unsetStartIndex();
      } else {
        setStartIndex((Short)value);
      }
      break;

    case MAX_RESULTS:
      if (value == null) {
        unsetMaxResults();
      } else {
        setMaxResults((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case METRICS:
      return getMetrics();

    case DIMENSIONS:
      return getDimensions();

    case FILTER:
      return getFilter();

    case SORT_BYS:
      return getSortBys();

    case RANGE:
      return getRange();

    case PRECISION:
      return getPrecision();

    case START_INDEX:
      return Short.valueOf(getStartIndex());

    case MAX_RESULTS:
      return Short.valueOf(getMaxResults());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case METRICS:
      return isSetMetrics();
    case DIMENSIONS:
      return isSetDimensions();
    case FILTER:
      return isSetFilter();
    case SORT_BYS:
      return isSetSortBys();
    case RANGE:
      return isSetRange();
    case PRECISION:
      return isSetPrecision();
    case START_INDEX:
      return isSetStartIndex();
    case MAX_RESULTS:
      return isSetMaxResults();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BehaviorReportRequest)
      return this.equals((BehaviorReportRequest)that);
    return false;
  }

  public boolean equals(BehaviorReportRequest that) {
    if (that == null)
      return false;

    boolean this_present_metrics = true && this.isSetMetrics();
    boolean that_present_metrics = true && that.isSetMetrics();
    if (this_present_metrics || that_present_metrics) {
      if (!(this_present_metrics && that_present_metrics))
        return false;
      if (!this.metrics.equals(that.metrics))
        return false;
    }

    boolean this_present_dimensions = true && this.isSetDimensions();
    boolean that_present_dimensions = true && that.isSetDimensions();
    if (this_present_dimensions || that_present_dimensions) {
      if (!(this_present_dimensions && that_present_dimensions))
        return false;
      if (!this.dimensions.equals(that.dimensions))
        return false;
    }

    boolean this_present_filter = true && this.isSetFilter();
    boolean that_present_filter = true && that.isSetFilter();
    if (this_present_filter || that_present_filter) {
      if (!(this_present_filter && that_present_filter))
        return false;
      if (!this.filter.equals(that.filter))
        return false;
    }

    boolean this_present_sortBys = true && this.isSetSortBys();
    boolean that_present_sortBys = true && that.isSetSortBys();
    if (this_present_sortBys || that_present_sortBys) {
      if (!(this_present_sortBys && that_present_sortBys))
        return false;
      if (!this.sortBys.equals(that.sortBys))
        return false;
    }

    boolean this_present_range = true && this.isSetRange();
    boolean that_present_range = true && that.isSetRange();
    if (this_present_range || that_present_range) {
      if (!(this_present_range && that_present_range))
        return false;
      if (!this.range.equals(that.range))
        return false;
    }

    boolean this_present_precision = true && this.isSetPrecision();
    boolean that_present_precision = true && that.isSetPrecision();
    if (this_present_precision || that_present_precision) {
      if (!(this_present_precision && that_present_precision))
        return false;
      if (!this.precision.equals(that.precision))
        return false;
    }

    boolean this_present_startIndex = true && this.isSetStartIndex();
    boolean that_present_startIndex = true && that.isSetStartIndex();
    if (this_present_startIndex || that_present_startIndex) {
      if (!(this_present_startIndex && that_present_startIndex))
        return false;
      if (this.startIndex != that.startIndex)
        return false;
    }

    boolean this_present_maxResults = true;
    boolean that_present_maxResults = true;
    if (this_present_maxResults || that_present_maxResults) {
      if (!(this_present_maxResults && that_present_maxResults))
        return false;
      if (this.maxResults != that.maxResults)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_metrics = true && (isSetMetrics());
    list.add(present_metrics);
    if (present_metrics)
      list.add(metrics);

    boolean present_dimensions = true && (isSetDimensions());
    list.add(present_dimensions);
    if (present_dimensions)
      list.add(dimensions);

    boolean present_filter = true && (isSetFilter());
    list.add(present_filter);
    if (present_filter)
      list.add(filter);

    boolean present_sortBys = true && (isSetSortBys());
    list.add(present_sortBys);
    if (present_sortBys)
      list.add(sortBys);

    boolean present_range = true && (isSetRange());
    list.add(present_range);
    if (present_range)
      list.add(range);

    boolean present_precision = true && (isSetPrecision());
    list.add(present_precision);
    if (present_precision)
      list.add(precision.getValue());

    boolean present_startIndex = true && (isSetStartIndex());
    list.add(present_startIndex);
    if (present_startIndex)
      list.add(startIndex);

    boolean present_maxResults = true;
    list.add(present_maxResults);
    if (present_maxResults)
      list.add(maxResults);

    return list.hashCode();
  }

  @Override
  public int compareTo(BehaviorReportRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMetrics()).compareTo(other.isSetMetrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metrics, other.metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDimensions()).compareTo(other.isSetDimensions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDimensions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dimensions, other.dimensions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilter()).compareTo(other.isSetFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, other.filter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortBys()).compareTo(other.isSetSortBys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortBys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortBys, other.sortBys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRange()).compareTo(other.isSetRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, other.range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrecision()).compareTo(other.isSetPrecision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrecision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.precision, other.precision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(other.isSetStartIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, other.startIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxResults()).compareTo(other.isSetMaxResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxResults, other.maxResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BehaviorReportRequest(");
    boolean first = true;

    sb.append("metrics:");
    if (this.metrics == null) {
      sb.append("null");
    } else {
      sb.append(this.metrics);
    }
    first = false;
    if (isSetDimensions()) {
      if (!first) sb.append(", ");
      sb.append("dimensions:");
      if (this.dimensions == null) {
        sb.append("null");
      } else {
        sb.append(this.dimensions);
      }
      first = false;
    }
    if (isSetFilter()) {
      if (!first) sb.append(", ");
      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
    }
    if (isSetSortBys()) {
      if (!first) sb.append(", ");
      sb.append("sortBys:");
      if (this.sortBys == null) {
        sb.append("null");
      } else {
        sb.append(this.sortBys);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("range:");
    if (this.range == null) {
      sb.append("null");
    } else {
      sb.append(this.range);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("precision:");
    if (this.precision == null) {
      sb.append("null");
    } else {
      sb.append(this.precision);
    }
    first = false;
    if (isSetStartIndex()) {
      if (!first) sb.append(", ");
      sb.append("startIndex:");
      sb.append(this.startIndex);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("maxResults:");
    sb.append(this.maxResults);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (metrics == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metrics' was not present! Struct: " + toString());
    }
    if (range == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'range' was not present! Struct: " + toString());
    }
    if (precision == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'precision' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'maxResults' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (filter != null) {
      filter.validate();
    }
    if (range != null) {
      range.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BehaviorReportRequestStandardSchemeFactory implements SchemeFactory {
    public BehaviorReportRequestStandardScheme getScheme() {
      return new BehaviorReportRequestStandardScheme();
    }
  }

  private static class BehaviorReportRequestStandardScheme extends StandardScheme<BehaviorReportRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BehaviorReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list262 = iprot.readListBegin();
                struct.metrics = new ArrayList<ReportMetric>(_list262.size);
                ReportMetric _elem263;
                for (int _i264 = 0; _i264 < _list262.size; ++_i264)
                {
                  _elem263 = new ReportMetric();
                  _elem263.read(iprot);
                  struct.metrics.add(_elem263);
                }
                iprot.readListEnd();
              }
              struct.setMetricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIMENSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list265 = iprot.readListBegin();
                struct.dimensions = new ArrayList<ReportDimension>(_list265.size);
                ReportDimension _elem266;
                for (int _i267 = 0; _i267 < _list265.size; ++_i267)
                {
                  _elem266 = new ReportDimension();
                  _elem266.read(iprot);
                  struct.dimensions.add(_elem266);
                }
                iprot.readListEnd();
              }
              struct.setDimensionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.filter = new ReportFilter();
              struct.filter.read(iprot);
              struct.setFilterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SORT_BYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list268 = iprot.readListBegin();
                struct.sortBys = new ArrayList<ReportMetric>(_list268.size);
                ReportMetric _elem269;
                for (int _i270 = 0; _i270 < _list268.size; ++_i270)
                {
                  _elem269 = new ReportMetric();
                  _elem269.read(iprot);
                  struct.sortBys.add(_elem269);
                }
                iprot.readListEnd();
              }
              struct.setSortBysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.range = new TimeRange();
              struct.range.read(iprot);
              struct.setRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.precision = com.boxalino.dataintelligence.api.thrift.TimeRangePrecision.findByValue(iprot.readI32());
              struct.setPrecisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // START_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.startIndex = iprot.readI16();
              struct.setStartIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAX_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.maxResults = iprot.readI16();
              struct.setMaxResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMaxResults()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxResults' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BehaviorReportRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.metrics != null) {
        oprot.writeFieldBegin(METRICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.metrics.size()));
          for (ReportMetric _iter271 : struct.metrics)
          {
            _iter271.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dimensions != null) {
        if (struct.isSetDimensions()) {
          oprot.writeFieldBegin(DIMENSIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dimensions.size()));
            for (ReportDimension _iter272 : struct.dimensions)
            {
              _iter272.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.filter != null) {
        if (struct.isSetFilter()) {
          oprot.writeFieldBegin(FILTER_FIELD_DESC);
          struct.filter.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sortBys != null) {
        if (struct.isSetSortBys()) {
          oprot.writeFieldBegin(SORT_BYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sortBys.size()));
            for (ReportMetric _iter273 : struct.sortBys)
            {
              _iter273.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.range != null) {
        oprot.writeFieldBegin(RANGE_FIELD_DESC);
        struct.range.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.precision != null) {
        oprot.writeFieldBegin(PRECISION_FIELD_DESC);
        oprot.writeI32(struct.precision.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetStartIndex()) {
        oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
        oprot.writeI16(struct.startIndex);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_RESULTS_FIELD_DESC);
      oprot.writeI16(struct.maxResults);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BehaviorReportRequestTupleSchemeFactory implements SchemeFactory {
    public BehaviorReportRequestTupleScheme getScheme() {
      return new BehaviorReportRequestTupleScheme();
    }
  }

  private static class BehaviorReportRequestTupleScheme extends TupleScheme<BehaviorReportRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BehaviorReportRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.metrics.size());
        for (ReportMetric _iter274 : struct.metrics)
        {
          _iter274.write(oprot);
        }
      }
      struct.range.write(oprot);
      oprot.writeI32(struct.precision.getValue());
      oprot.writeI16(struct.maxResults);
      BitSet optionals = new BitSet();
      if (struct.isSetDimensions()) {
        optionals.set(0);
      }
      if (struct.isSetFilter()) {
        optionals.set(1);
      }
      if (struct.isSetSortBys()) {
        optionals.set(2);
      }
      if (struct.isSetStartIndex()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetDimensions()) {
        {
          oprot.writeI32(struct.dimensions.size());
          for (ReportDimension _iter275 : struct.dimensions)
          {
            _iter275.write(oprot);
          }
        }
      }
      if (struct.isSetFilter()) {
        struct.filter.write(oprot);
      }
      if (struct.isSetSortBys()) {
        {
          oprot.writeI32(struct.sortBys.size());
          for (ReportMetric _iter276 : struct.sortBys)
          {
            _iter276.write(oprot);
          }
        }
      }
      if (struct.isSetStartIndex()) {
        oprot.writeI16(struct.startIndex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BehaviorReportRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list277 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.metrics = new ArrayList<ReportMetric>(_list277.size);
        ReportMetric _elem278;
        for (int _i279 = 0; _i279 < _list277.size; ++_i279)
        {
          _elem278 = new ReportMetric();
          _elem278.read(iprot);
          struct.metrics.add(_elem278);
        }
      }
      struct.setMetricsIsSet(true);
      struct.range = new TimeRange();
      struct.range.read(iprot);
      struct.setRangeIsSet(true);
      struct.precision = com.boxalino.dataintelligence.api.thrift.TimeRangePrecision.findByValue(iprot.readI32());
      struct.setPrecisionIsSet(true);
      struct.maxResults = iprot.readI16();
      struct.setMaxResultsIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list280 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.dimensions = new ArrayList<ReportDimension>(_list280.size);
          ReportDimension _elem281;
          for (int _i282 = 0; _i282 < _list280.size; ++_i282)
          {
            _elem281 = new ReportDimension();
            _elem281.read(iprot);
            struct.dimensions.add(_elem281);
          }
        }
        struct.setDimensionsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.filter = new ReportFilter();
        struct.filter.read(iprot);
        struct.setFilterIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list283 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sortBys = new ArrayList<ReportMetric>(_list283.size);
          ReportMetric _elem284;
          for (int _i285 = 0; _i285 < _list283.size; ++_i285)
          {
            _elem284 = new ReportMetric();
            _elem284.read(iprot);
            struct.sortBys.add(_elem284);
          }
        }
        struct.setSortBysIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startIndex = iprot.readI16();
        struct.setStartIndexIsSet(true);
      }
    }
  }

}

