/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.dataintelligence.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * This structure defines a map key (signature) of a transaction report result (indication about what this result is about)
 * The TransactionReport object contains a map with the results. For each key (i.e.: result group) the system returns a list of report metrics (kpis) and value for each date range requested.
 * These keys are, in the case of a TransactionReport defined by a map of dimension values for each requested Dimension
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-26")
public class TransactionReportResult implements org.apache.thrift.TBase<TransactionReportResult, TransactionReportResult._Fields>, java.io.Serializable, Cloneable, Comparable<TransactionReportResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransactionReportResult");

  private static final org.apache.thrift.protocol.TField DIMENSION_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("dimensionValues", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransactionReportResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransactionReportResultTupleSchemeFactory());
  }

  /**
   * an required map of dimension values
   */
  public List<ReportDimensionValue> dimensionValues; // required
  /**
   * the report result values
   */
  public ReportResultValues values; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * an required map of dimension values
     */
    DIMENSION_VALUES((short)1, "dimensionValues"),
    /**
     * the report result values
     */
    VALUES((short)2, "values");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIMENSION_VALUES
          return DIMENSION_VALUES;
        case 2: // VALUES
          return VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIMENSION_VALUES, new org.apache.thrift.meta_data.FieldMetaData("dimensionValues", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportDimensionValue.class))));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportResultValues.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransactionReportResult.class, metaDataMap);
  }

  public TransactionReportResult() {
  }

  public TransactionReportResult(
    List<ReportDimensionValue> dimensionValues,
    ReportResultValues values)
  {
    this();
    this.dimensionValues = dimensionValues;
    this.values = values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransactionReportResult(TransactionReportResult other) {
    if (other.isSetDimensionValues()) {
      List<ReportDimensionValue> __this__dimensionValues = new ArrayList<ReportDimensionValue>(other.dimensionValues.size());
      for (ReportDimensionValue other_element : other.dimensionValues) {
        __this__dimensionValues.add(new ReportDimensionValue(other_element));
      }
      this.dimensionValues = __this__dimensionValues;
    }
    if (other.isSetValues()) {
      this.values = new ReportResultValues(other.values);
    }
  }

  public TransactionReportResult deepCopy() {
    return new TransactionReportResult(this);
  }

  @Override
  public void clear() {
    this.dimensionValues = null;
    this.values = null;
  }

  public int getDimensionValuesSize() {
    return (this.dimensionValues == null) ? 0 : this.dimensionValues.size();
  }

  public java.util.Iterator<ReportDimensionValue> getDimensionValuesIterator() {
    return (this.dimensionValues == null) ? null : this.dimensionValues.iterator();
  }

  public void addToDimensionValues(ReportDimensionValue elem) {
    if (this.dimensionValues == null) {
      this.dimensionValues = new ArrayList<ReportDimensionValue>();
    }
    this.dimensionValues.add(elem);
  }

  /**
   * an required map of dimension values
   */
  public List<ReportDimensionValue> getDimensionValues() {
    return this.dimensionValues;
  }

  /**
   * an required map of dimension values
   */
  public TransactionReportResult setDimensionValues(List<ReportDimensionValue> dimensionValues) {
    this.dimensionValues = dimensionValues;
    return this;
  }

  public void unsetDimensionValues() {
    this.dimensionValues = null;
  }

  /** Returns true if field dimensionValues is set (has been assigned a value) and false otherwise */
  public boolean isSetDimensionValues() {
    return this.dimensionValues != null;
  }

  public void setDimensionValuesIsSet(boolean value) {
    if (!value) {
      this.dimensionValues = null;
    }
  }

  /**
   * the report result values
   */
  public ReportResultValues getValues() {
    return this.values;
  }

  /**
   * the report result values
   */
  public TransactionReportResult setValues(ReportResultValues values) {
    this.values = values;
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been assigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIMENSION_VALUES:
      if (value == null) {
        unsetDimensionValues();
      } else {
        setDimensionValues((List<ReportDimensionValue>)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        setValues((ReportResultValues)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIMENSION_VALUES:
      return getDimensionValues();

    case VALUES:
      return getValues();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIMENSION_VALUES:
      return isSetDimensionValues();
    case VALUES:
      return isSetValues();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransactionReportResult)
      return this.equals((TransactionReportResult)that);
    return false;
  }

  public boolean equals(TransactionReportResult that) {
    if (that == null)
      return false;

    boolean this_present_dimensionValues = true && this.isSetDimensionValues();
    boolean that_present_dimensionValues = true && that.isSetDimensionValues();
    if (this_present_dimensionValues || that_present_dimensionValues) {
      if (!(this_present_dimensionValues && that_present_dimensionValues))
        return false;
      if (!this.dimensionValues.equals(that.dimensionValues))
        return false;
    }

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dimensionValues = true && (isSetDimensionValues());
    list.add(present_dimensionValues);
    if (present_dimensionValues)
      list.add(dimensionValues);

    boolean present_values = true && (isSetValues());
    list.add(present_values);
    if (present_values)
      list.add(values);

    return list.hashCode();
  }

  @Override
  public int compareTo(TransactionReportResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDimensionValues()).compareTo(other.isSetDimensionValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDimensionValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dimensionValues, other.dimensionValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValues()).compareTo(other.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransactionReportResult(");
    boolean first = true;

    sb.append("dimensionValues:");
    if (this.dimensionValues == null) {
      sb.append("null");
    } else {
      sb.append(this.dimensionValues);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("values:");
    if (this.values == null) {
      sb.append("null");
    } else {
      sb.append(this.values);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (dimensionValues == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dimensionValues' was not present! Struct: " + toString());
    }
    if (values == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'values' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (values != null) {
      values.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransactionReportResultStandardSchemeFactory implements SchemeFactory {
    public TransactionReportResultStandardScheme getScheme() {
      return new TransactionReportResultStandardScheme();
    }
  }

  private static class TransactionReportResultStandardScheme extends StandardScheme<TransactionReportResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransactionReportResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIMENSION_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                struct.dimensionValues = new ArrayList<ReportDimensionValue>(_list232.size);
                ReportDimensionValue _elem233;
                for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                {
                  _elem233 = new ReportDimensionValue();
                  _elem233.read(iprot);
                  struct.dimensionValues.add(_elem233);
                }
                iprot.readListEnd();
              }
              struct.setDimensionValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.values = new ReportResultValues();
              struct.values.read(iprot);
              struct.setValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransactionReportResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dimensionValues != null) {
        oprot.writeFieldBegin(DIMENSION_VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.dimensionValues.size()));
          for (ReportDimensionValue _iter235 : struct.dimensionValues)
          {
            _iter235.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.values != null) {
        oprot.writeFieldBegin(VALUES_FIELD_DESC);
        struct.values.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransactionReportResultTupleSchemeFactory implements SchemeFactory {
    public TransactionReportResultTupleScheme getScheme() {
      return new TransactionReportResultTupleScheme();
    }
  }

  private static class TransactionReportResultTupleScheme extends TupleScheme<TransactionReportResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransactionReportResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.dimensionValues.size());
        for (ReportDimensionValue _iter236 : struct.dimensionValues)
        {
          _iter236.write(oprot);
        }
      }
      struct.values.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransactionReportResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.dimensionValues = new ArrayList<ReportDimensionValue>(_list237.size);
        ReportDimensionValue _elem238;
        for (int _i239 = 0; _i239 < _list237.size; ++_i239)
        {
          _elem238 = new ReportDimensionValue();
          _elem238.read(iprot);
          struct.dimensionValues.add(_elem238);
        }
      }
      struct.setDimensionValuesIsSet(true);
      struct.values = new ReportResultValues();
      struct.values.read(iprot);
      struct.setValuesIsSet(true);
    }
  }

}

