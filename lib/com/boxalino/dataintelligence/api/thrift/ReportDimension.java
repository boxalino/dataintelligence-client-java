/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.dataintelligence.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * This structure defines a report dimension (segmentation) which can be standard or custom with an identifier (e.g.: for url parameters)
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-16")
public class ReportDimension implements org.apache.thrift.TBase<ReportDimension, ReportDimension._Fields>, java.io.Serializable, Cloneable, Comparable<ReportDimension> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReportDimension");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("identifier", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARAM1_FIELD_DESC = new org.apache.thrift.protocol.TField("param1", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARAM2_FIELD_DESC = new org.apache.thrift.protocol.TField("param2", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PARAM3_FIELD_DESC = new org.apache.thrift.protocol.TField("param3", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReportDimensionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReportDimensionTupleSchemeFactory());
  }

  /**
   * the type of metric
   * 
   * @see ReportDimensionType
   */
  public ReportDimensionType type; // required
  /**
   * optional, for the ReportDimensionType requiring it (e.g.: goal) the identifier the metric
   */
  public String identifier; // optional
  /**
   * optional, an additional parameter
   * Use cases:
   * - for hierarchical product properties for the type PURCHASED_PRODUCT_PROPERTY (e.g.: "categories") provide the level of depth to consider: "0" : first level, "1" : second level, ...
   * in the response, this parameter will be replaced with the category id (label will provide the bread crumb as value : "cat1 >> cat2 >> cat3", but the id of this cat3 will be provided in the param1)
   */
  public String param1; // optional
  /**
   * optional, an additional parameter (planned, but not used until now)
   */
  public String param2; // optional
  /**
   * optional, an additional parameter (planned, but not used until now)
   */
  public String param3; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * the type of metric
     * 
     * @see ReportDimensionType
     */
    TYPE((short)1, "type"),
    /**
     * optional, for the ReportDimensionType requiring it (e.g.: goal) the identifier the metric
     */
    IDENTIFIER((short)2, "identifier"),
    /**
     * optional, an additional parameter
     * Use cases:
     * - for hierarchical product properties for the type PURCHASED_PRODUCT_PROPERTY (e.g.: "categories") provide the level of depth to consider: "0" : first level, "1" : second level, ...
     * in the response, this parameter will be replaced with the category id (label will provide the bread crumb as value : "cat1 >> cat2 >> cat3", but the id of this cat3 will be provided in the param1)
     */
    PARAM1((short)3, "param1"),
    /**
     * optional, an additional parameter (planned, but not used until now)
     */
    PARAM2((short)4, "param2"),
    /**
     * optional, an additional parameter (planned, but not used until now)
     */
    PARAM3((short)5, "param3");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // IDENTIFIER
          return IDENTIFIER;
        case 3: // PARAM1
          return PARAM1;
        case 4: // PARAM2
          return PARAM2;
        case 5: // PARAM3
          return PARAM3;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.IDENTIFIER,_Fields.PARAM1,_Fields.PARAM2,_Fields.PARAM3};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReportDimensionType.class)));
    tmpMap.put(_Fields.IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("identifier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAM1, new org.apache.thrift.meta_data.FieldMetaData("param1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAM2, new org.apache.thrift.meta_data.FieldMetaData("param2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAM3, new org.apache.thrift.meta_data.FieldMetaData("param3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReportDimension.class, metaDataMap);
  }

  public ReportDimension() {
  }

  public ReportDimension(
    ReportDimensionType type)
  {
    this();
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReportDimension(ReportDimension other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetIdentifier()) {
      this.identifier = other.identifier;
    }
    if (other.isSetParam1()) {
      this.param1 = other.param1;
    }
    if (other.isSetParam2()) {
      this.param2 = other.param2;
    }
    if (other.isSetParam3()) {
      this.param3 = other.param3;
    }
  }

  public ReportDimension deepCopy() {
    return new ReportDimension(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.identifier = null;
    this.param1 = null;
    this.param2 = null;
    this.param3 = null;
  }

  /**
   * the type of metric
   * 
   * @see ReportDimensionType
   */
  public ReportDimensionType getType() {
    return this.type;
  }

  /**
   * the type of metric
   * 
   * @see ReportDimensionType
   */
  public ReportDimension setType(ReportDimensionType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * optional, for the ReportDimensionType requiring it (e.g.: goal) the identifier the metric
   */
  public String getIdentifier() {
    return this.identifier;
  }

  /**
   * optional, for the ReportDimensionType requiring it (e.g.: goal) the identifier the metric
   */
  public ReportDimension setIdentifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  public void unsetIdentifier() {
    this.identifier = null;
  }

  /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifier() {
    return this.identifier != null;
  }

  public void setIdentifierIsSet(boolean value) {
    if (!value) {
      this.identifier = null;
    }
  }

  /**
   * optional, an additional parameter
   * Use cases:
   * - for hierarchical product properties for the type PURCHASED_PRODUCT_PROPERTY (e.g.: "categories") provide the level of depth to consider: "0" : first level, "1" : second level, ...
   * in the response, this parameter will be replaced with the category id (label will provide the bread crumb as value : "cat1 >> cat2 >> cat3", but the id of this cat3 will be provided in the param1)
   */
  public String getParam1() {
    return this.param1;
  }

  /**
   * optional, an additional parameter
   * Use cases:
   * - for hierarchical product properties for the type PURCHASED_PRODUCT_PROPERTY (e.g.: "categories") provide the level of depth to consider: "0" : first level, "1" : second level, ...
   * in the response, this parameter will be replaced with the category id (label will provide the bread crumb as value : "cat1 >> cat2 >> cat3", but the id of this cat3 will be provided in the param1)
   */
  public ReportDimension setParam1(String param1) {
    this.param1 = param1;
    return this;
  }

  public void unsetParam1() {
    this.param1 = null;
  }

  /** Returns true if field param1 is set (has been assigned a value) and false otherwise */
  public boolean isSetParam1() {
    return this.param1 != null;
  }

  public void setParam1IsSet(boolean value) {
    if (!value) {
      this.param1 = null;
    }
  }

  /**
   * optional, an additional parameter (planned, but not used until now)
   */
  public String getParam2() {
    return this.param2;
  }

  /**
   * optional, an additional parameter (planned, but not used until now)
   */
  public ReportDimension setParam2(String param2) {
    this.param2 = param2;
    return this;
  }

  public void unsetParam2() {
    this.param2 = null;
  }

  /** Returns true if field param2 is set (has been assigned a value) and false otherwise */
  public boolean isSetParam2() {
    return this.param2 != null;
  }

  public void setParam2IsSet(boolean value) {
    if (!value) {
      this.param2 = null;
    }
  }

  /**
   * optional, an additional parameter (planned, but not used until now)
   */
  public String getParam3() {
    return this.param3;
  }

  /**
   * optional, an additional parameter (planned, but not used until now)
   */
  public ReportDimension setParam3(String param3) {
    this.param3 = param3;
    return this;
  }

  public void unsetParam3() {
    this.param3 = null;
  }

  /** Returns true if field param3 is set (has been assigned a value) and false otherwise */
  public boolean isSetParam3() {
    return this.param3 != null;
  }

  public void setParam3IsSet(boolean value) {
    if (!value) {
      this.param3 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((ReportDimensionType)value);
      }
      break;

    case IDENTIFIER:
      if (value == null) {
        unsetIdentifier();
      } else {
        setIdentifier((String)value);
      }
      break;

    case PARAM1:
      if (value == null) {
        unsetParam1();
      } else {
        setParam1((String)value);
      }
      break;

    case PARAM2:
      if (value == null) {
        unsetParam2();
      } else {
        setParam2((String)value);
      }
      break;

    case PARAM3:
      if (value == null) {
        unsetParam3();
      } else {
        setParam3((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case IDENTIFIER:
      return getIdentifier();

    case PARAM1:
      return getParam1();

    case PARAM2:
      return getParam2();

    case PARAM3:
      return getParam3();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case IDENTIFIER:
      return isSetIdentifier();
    case PARAM1:
      return isSetParam1();
    case PARAM2:
      return isSetParam2();
    case PARAM3:
      return isSetParam3();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReportDimension)
      return this.equals((ReportDimension)that);
    return false;
  }

  public boolean equals(ReportDimension that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_identifier = true && this.isSetIdentifier();
    boolean that_present_identifier = true && that.isSetIdentifier();
    if (this_present_identifier || that_present_identifier) {
      if (!(this_present_identifier && that_present_identifier))
        return false;
      if (!this.identifier.equals(that.identifier))
        return false;
    }

    boolean this_present_param1 = true && this.isSetParam1();
    boolean that_present_param1 = true && that.isSetParam1();
    if (this_present_param1 || that_present_param1) {
      if (!(this_present_param1 && that_present_param1))
        return false;
      if (!this.param1.equals(that.param1))
        return false;
    }

    boolean this_present_param2 = true && this.isSetParam2();
    boolean that_present_param2 = true && that.isSetParam2();
    if (this_present_param2 || that_present_param2) {
      if (!(this_present_param2 && that_present_param2))
        return false;
      if (!this.param2.equals(that.param2))
        return false;
    }

    boolean this_present_param3 = true && this.isSetParam3();
    boolean that_present_param3 = true && that.isSetParam3();
    if (this_present_param3 || that_present_param3) {
      if (!(this_present_param3 && that_present_param3))
        return false;
      if (!this.param3.equals(that.param3))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_identifier = true && (isSetIdentifier());
    list.add(present_identifier);
    if (present_identifier)
      list.add(identifier);

    boolean present_param1 = true && (isSetParam1());
    list.add(present_param1);
    if (present_param1)
      list.add(param1);

    boolean present_param2 = true && (isSetParam2());
    list.add(present_param2);
    if (present_param2)
      list.add(param2);

    boolean present_param3 = true && (isSetParam3());
    list.add(present_param3);
    if (present_param3)
      list.add(param3);

    return list.hashCode();
  }

  @Override
  public int compareTo(ReportDimension other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentifier()).compareTo(other.isSetIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identifier, other.identifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam1()).compareTo(other.isSetParam1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param1, other.param1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam2()).compareTo(other.isSetParam2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param2, other.param2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam3()).compareTo(other.isSetParam3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param3, other.param3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReportDimension(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetIdentifier()) {
      if (!first) sb.append(", ");
      sb.append("identifier:");
      if (this.identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.identifier);
      }
      first = false;
    }
    if (isSetParam1()) {
      if (!first) sb.append(", ");
      sb.append("param1:");
      if (this.param1 == null) {
        sb.append("null");
      } else {
        sb.append(this.param1);
      }
      first = false;
    }
    if (isSetParam2()) {
      if (!first) sb.append(", ");
      sb.append("param2:");
      if (this.param2 == null) {
        sb.append("null");
      } else {
        sb.append(this.param2);
      }
      first = false;
    }
    if (isSetParam3()) {
      if (!first) sb.append(", ");
      sb.append("param3:");
      if (this.param3 == null) {
        sb.append("null");
      } else {
        sb.append(this.param3);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReportDimensionStandardSchemeFactory implements SchemeFactory {
    public ReportDimensionStandardScheme getScheme() {
      return new ReportDimensionStandardScheme();
    }
  }

  private static class ReportDimensionStandardScheme extends StandardScheme<ReportDimension> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReportDimension struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = com.boxalino.dataintelligence.api.thrift.ReportDimensionType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identifier = iprot.readString();
              struct.setIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAM1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.param1 = iprot.readString();
              struct.setParam1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAM2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.param2 = iprot.readString();
              struct.setParam2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARAM3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.param3 = iprot.readString();
              struct.setParam3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReportDimension struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.identifier != null) {
        if (struct.isSetIdentifier()) {
          oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
          oprot.writeString(struct.identifier);
          oprot.writeFieldEnd();
        }
      }
      if (struct.param1 != null) {
        if (struct.isSetParam1()) {
          oprot.writeFieldBegin(PARAM1_FIELD_DESC);
          oprot.writeString(struct.param1);
          oprot.writeFieldEnd();
        }
      }
      if (struct.param2 != null) {
        if (struct.isSetParam2()) {
          oprot.writeFieldBegin(PARAM2_FIELD_DESC);
          oprot.writeString(struct.param2);
          oprot.writeFieldEnd();
        }
      }
      if (struct.param3 != null) {
        if (struct.isSetParam3()) {
          oprot.writeFieldBegin(PARAM3_FIELD_DESC);
          oprot.writeString(struct.param3);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReportDimensionTupleSchemeFactory implements SchemeFactory {
    public ReportDimensionTupleScheme getScheme() {
      return new ReportDimensionTupleScheme();
    }
  }

  private static class ReportDimensionTupleScheme extends TupleScheme<ReportDimension> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReportDimension struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetIdentifier()) {
        optionals.set(0);
      }
      if (struct.isSetParam1()) {
        optionals.set(1);
      }
      if (struct.isSetParam2()) {
        optionals.set(2);
      }
      if (struct.isSetParam3()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetIdentifier()) {
        oprot.writeString(struct.identifier);
      }
      if (struct.isSetParam1()) {
        oprot.writeString(struct.param1);
      }
      if (struct.isSetParam2()) {
        oprot.writeString(struct.param2);
      }
      if (struct.isSetParam3()) {
        oprot.writeString(struct.param3);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReportDimension struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = com.boxalino.dataintelligence.api.thrift.ReportDimensionType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.identifier = iprot.readString();
        struct.setIdentifierIsSet(true);
      }
      if (incoming.get(1)) {
        struct.param1 = iprot.readString();
        struct.setParam1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.param2 = iprot.readString();
        struct.setParam2IsSet(true);
      }
      if (incoming.get(3)) {
        struct.param3 = iprot.readString();
        struct.setParam3IsSet(true);
      }
    }
  }

}

