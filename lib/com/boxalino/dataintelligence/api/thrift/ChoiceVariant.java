/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.dataintelligence.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * This structure defines a data Choice variant
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-11-24")
public class ChoiceVariant implements org.apache.thrift.TBase<ChoiceVariant, ChoiceVariant._Fields>, java.io.Serializable, Cloneable, Comparable<ChoiceVariant> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChoiceVariant");

  private static final org.apache.thrift.protocol.TField CHOICE_VARIANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceVariantId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SIMPLE_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("simpleParameters", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField LOCALIZED_PAREMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("localizedParemeters", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChoiceVariantStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChoiceVariantTupleSchemeFactory());
  }

  /**
   * a unique id which should not contain any punctuation, only non-accentuated alphabetic and numeric characters and should not be longer than 50 characters
   */
  public String choiceVariantId; // required
  /**
   * the choice id of the choice which this variant is associated to
   */
  public String choiceId; // required
  /**
   * a list of tags this variant is connected to
   */
  public List<String> tags; // required
  /**
   * a list of non-localized parameters this variant is connected to (for example, to overwrite the campaign properties, keys should have the same name as the campaign parameter name)
   */
  public Map<String,List<String>> simpleParameters; // required
  /**
   * a list of localized parameters this variant is connected to (for example, to overwrite the campaign properties, keys should have the same name as the campaign parameter name)
   */
  public Map<String,List<Map<Language,String>>> localizedParemeters; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * a unique id which should not contain any punctuation, only non-accentuated alphabetic and numeric characters and should not be longer than 50 characters
     */
    CHOICE_VARIANT_ID((short)1, "choiceVariantId"),
    /**
     * the choice id of the choice which this variant is associated to
     */
    CHOICE_ID((short)2, "choiceId"),
    /**
     * a list of tags this variant is connected to
     */
    TAGS((short)3, "tags"),
    /**
     * a list of non-localized parameters this variant is connected to (for example, to overwrite the campaign properties, keys should have the same name as the campaign parameter name)
     */
    SIMPLE_PARAMETERS((short)4, "simpleParameters"),
    /**
     * a list of localized parameters this variant is connected to (for example, to overwrite the campaign properties, keys should have the same name as the campaign parameter name)
     */
    LOCALIZED_PAREMETERS((short)5, "localizedParemeters");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHOICE_VARIANT_ID
          return CHOICE_VARIANT_ID;
        case 2: // CHOICE_ID
          return CHOICE_ID;
        case 3: // TAGS
          return TAGS;
        case 4: // SIMPLE_PARAMETERS
          return SIMPLE_PARAMETERS;
        case 5: // LOCALIZED_PAREMETERS
          return LOCALIZED_PAREMETERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHOICE_VARIANT_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceVariantId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SIMPLE_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("simpleParameters", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.LOCALIZED_PAREMETERS, new org.apache.thrift.meta_data.FieldMetaData("localizedParemeters", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Language.class), 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChoiceVariant.class, metaDataMap);
  }

  public ChoiceVariant() {
  }

  public ChoiceVariant(
    String choiceVariantId,
    String choiceId,
    List<String> tags,
    Map<String,List<String>> simpleParameters,
    Map<String,List<Map<Language,String>>> localizedParemeters)
  {
    this();
    this.choiceVariantId = choiceVariantId;
    this.choiceId = choiceId;
    this.tags = tags;
    this.simpleParameters = simpleParameters;
    this.localizedParemeters = localizedParemeters;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChoiceVariant(ChoiceVariant other) {
    if (other.isSetChoiceVariantId()) {
      this.choiceVariantId = other.choiceVariantId;
    }
    if (other.isSetChoiceId()) {
      this.choiceId = other.choiceId;
    }
    if (other.isSetTags()) {
      List<String> __this__tags = new ArrayList<String>(other.tags);
      this.tags = __this__tags;
    }
    if (other.isSetSimpleParameters()) {
      Map<String,List<String>> __this__simpleParameters = new HashMap<String,List<String>>(other.simpleParameters.size());
      for (Map.Entry<String, List<String>> other_element : other.simpleParameters.entrySet()) {

        String other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        String __this__simpleParameters_copy_key = other_element_key;

        List<String> __this__simpleParameters_copy_value = new ArrayList<String>(other_element_value);

        __this__simpleParameters.put(__this__simpleParameters_copy_key, __this__simpleParameters_copy_value);
      }
      this.simpleParameters = __this__simpleParameters;
    }
    if (other.isSetLocalizedParemeters()) {
      Map<String,List<Map<Language,String>>> __this__localizedParemeters = new HashMap<String,List<Map<Language,String>>>(other.localizedParemeters.size());
      for (Map.Entry<String, List<Map<Language,String>>> other_element : other.localizedParemeters.entrySet()) {

        String other_element_key = other_element.getKey();
        List<Map<Language,String>> other_element_value = other_element.getValue();

        String __this__localizedParemeters_copy_key = other_element_key;

        List<Map<Language,String>> __this__localizedParemeters_copy_value = new ArrayList<Map<Language,String>>(other_element_value.size());
        for (Map<Language,String> other_element_value_element : other_element_value) {
          Map<Language,String> __this__localizedParemeters_copy_value_copy = new HashMap<Language,String>(other_element_value_element.size());
          for (Map.Entry<Language, String> other_element_value_element_element : other_element_value_element.entrySet()) {

            Language other_element_value_element_element_key = other_element_value_element_element.getKey();
            String other_element_value_element_element_value = other_element_value_element_element.getValue();

            Language __this__localizedParemeters_copy_value_copy_copy_key = other_element_value_element_element_key;

            String __this__localizedParemeters_copy_value_copy_copy_value = other_element_value_element_element_value;

            __this__localizedParemeters_copy_value_copy.put(__this__localizedParemeters_copy_value_copy_copy_key, __this__localizedParemeters_copy_value_copy_copy_value);
          }
          __this__localizedParemeters_copy_value.add(__this__localizedParemeters_copy_value_copy);
        }

        __this__localizedParemeters.put(__this__localizedParemeters_copy_key, __this__localizedParemeters_copy_value);
      }
      this.localizedParemeters = __this__localizedParemeters;
    }
  }

  public ChoiceVariant deepCopy() {
    return new ChoiceVariant(this);
  }

  @Override
  public void clear() {
    this.choiceVariantId = null;
    this.choiceId = null;
    this.tags = null;
    this.simpleParameters = null;
    this.localizedParemeters = null;
  }

  /**
   * a unique id which should not contain any punctuation, only non-accentuated alphabetic and numeric characters and should not be longer than 50 characters
   */
  public String getChoiceVariantId() {
    return this.choiceVariantId;
  }

  /**
   * a unique id which should not contain any punctuation, only non-accentuated alphabetic and numeric characters and should not be longer than 50 characters
   */
  public ChoiceVariant setChoiceVariantId(String choiceVariantId) {
    this.choiceVariantId = choiceVariantId;
    return this;
  }

  public void unsetChoiceVariantId() {
    this.choiceVariantId = null;
  }

  /** Returns true if field choiceVariantId is set (has been assigned a value) and false otherwise */
  public boolean isSetChoiceVariantId() {
    return this.choiceVariantId != null;
  }

  public void setChoiceVariantIdIsSet(boolean value) {
    if (!value) {
      this.choiceVariantId = null;
    }
  }

  /**
   * the choice id of the choice which this variant is associated to
   */
  public String getChoiceId() {
    return this.choiceId;
  }

  /**
   * the choice id of the choice which this variant is associated to
   */
  public ChoiceVariant setChoiceId(String choiceId) {
    this.choiceId = choiceId;
    return this;
  }

  public void unsetChoiceId() {
    this.choiceId = null;
  }

  /** Returns true if field choiceId is set (has been assigned a value) and false otherwise */
  public boolean isSetChoiceId() {
    return this.choiceId != null;
  }

  public void setChoiceIdIsSet(boolean value) {
    if (!value) {
      this.choiceId = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<String> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(String elem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(elem);
  }

  /**
   * a list of tags this variant is connected to
   */
  public List<String> getTags() {
    return this.tags;
  }

  /**
   * a list of tags this variant is connected to
   */
  public ChoiceVariant setTags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public int getSimpleParametersSize() {
    return (this.simpleParameters == null) ? 0 : this.simpleParameters.size();
  }

  public void putToSimpleParameters(String key, List<String> val) {
    if (this.simpleParameters == null) {
      this.simpleParameters = new HashMap<String,List<String>>();
    }
    this.simpleParameters.put(key, val);
  }

  /**
   * a list of non-localized parameters this variant is connected to (for example, to overwrite the campaign properties, keys should have the same name as the campaign parameter name)
   */
  public Map<String,List<String>> getSimpleParameters() {
    return this.simpleParameters;
  }

  /**
   * a list of non-localized parameters this variant is connected to (for example, to overwrite the campaign properties, keys should have the same name as the campaign parameter name)
   */
  public ChoiceVariant setSimpleParameters(Map<String,List<String>> simpleParameters) {
    this.simpleParameters = simpleParameters;
    return this;
  }

  public void unsetSimpleParameters() {
    this.simpleParameters = null;
  }

  /** Returns true if field simpleParameters is set (has been assigned a value) and false otherwise */
  public boolean isSetSimpleParameters() {
    return this.simpleParameters != null;
  }

  public void setSimpleParametersIsSet(boolean value) {
    if (!value) {
      this.simpleParameters = null;
    }
  }

  public int getLocalizedParemetersSize() {
    return (this.localizedParemeters == null) ? 0 : this.localizedParemeters.size();
  }

  public void putToLocalizedParemeters(String key, List<Map<Language,String>> val) {
    if (this.localizedParemeters == null) {
      this.localizedParemeters = new HashMap<String,List<Map<Language,String>>>();
    }
    this.localizedParemeters.put(key, val);
  }

  /**
   * a list of localized parameters this variant is connected to (for example, to overwrite the campaign properties, keys should have the same name as the campaign parameter name)
   */
  public Map<String,List<Map<Language,String>>> getLocalizedParemeters() {
    return this.localizedParemeters;
  }

  /**
   * a list of localized parameters this variant is connected to (for example, to overwrite the campaign properties, keys should have the same name as the campaign parameter name)
   */
  public ChoiceVariant setLocalizedParemeters(Map<String,List<Map<Language,String>>> localizedParemeters) {
    this.localizedParemeters = localizedParemeters;
    return this;
  }

  public void unsetLocalizedParemeters() {
    this.localizedParemeters = null;
  }

  /** Returns true if field localizedParemeters is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalizedParemeters() {
    return this.localizedParemeters != null;
  }

  public void setLocalizedParemetersIsSet(boolean value) {
    if (!value) {
      this.localizedParemeters = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHOICE_VARIANT_ID:
      if (value == null) {
        unsetChoiceVariantId();
      } else {
        setChoiceVariantId((String)value);
      }
      break;

    case CHOICE_ID:
      if (value == null) {
        unsetChoiceId();
      } else {
        setChoiceId((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((List<String>)value);
      }
      break;

    case SIMPLE_PARAMETERS:
      if (value == null) {
        unsetSimpleParameters();
      } else {
        setSimpleParameters((Map<String,List<String>>)value);
      }
      break;

    case LOCALIZED_PAREMETERS:
      if (value == null) {
        unsetLocalizedParemeters();
      } else {
        setLocalizedParemeters((Map<String,List<Map<Language,String>>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHOICE_VARIANT_ID:
      return getChoiceVariantId();

    case CHOICE_ID:
      return getChoiceId();

    case TAGS:
      return getTags();

    case SIMPLE_PARAMETERS:
      return getSimpleParameters();

    case LOCALIZED_PAREMETERS:
      return getLocalizedParemeters();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHOICE_VARIANT_ID:
      return isSetChoiceVariantId();
    case CHOICE_ID:
      return isSetChoiceId();
    case TAGS:
      return isSetTags();
    case SIMPLE_PARAMETERS:
      return isSetSimpleParameters();
    case LOCALIZED_PAREMETERS:
      return isSetLocalizedParemeters();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChoiceVariant)
      return this.equals((ChoiceVariant)that);
    return false;
  }

  public boolean equals(ChoiceVariant that) {
    if (that == null)
      return false;

    boolean this_present_choiceVariantId = true && this.isSetChoiceVariantId();
    boolean that_present_choiceVariantId = true && that.isSetChoiceVariantId();
    if (this_present_choiceVariantId || that_present_choiceVariantId) {
      if (!(this_present_choiceVariantId && that_present_choiceVariantId))
        return false;
      if (!this.choiceVariantId.equals(that.choiceVariantId))
        return false;
    }

    boolean this_present_choiceId = true && this.isSetChoiceId();
    boolean that_present_choiceId = true && that.isSetChoiceId();
    if (this_present_choiceId || that_present_choiceId) {
      if (!(this_present_choiceId && that_present_choiceId))
        return false;
      if (!this.choiceId.equals(that.choiceId))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_simpleParameters = true && this.isSetSimpleParameters();
    boolean that_present_simpleParameters = true && that.isSetSimpleParameters();
    if (this_present_simpleParameters || that_present_simpleParameters) {
      if (!(this_present_simpleParameters && that_present_simpleParameters))
        return false;
      if (!this.simpleParameters.equals(that.simpleParameters))
        return false;
    }

    boolean this_present_localizedParemeters = true && this.isSetLocalizedParemeters();
    boolean that_present_localizedParemeters = true && that.isSetLocalizedParemeters();
    if (this_present_localizedParemeters || that_present_localizedParemeters) {
      if (!(this_present_localizedParemeters && that_present_localizedParemeters))
        return false;
      if (!this.localizedParemeters.equals(that.localizedParemeters))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_choiceVariantId = true && (isSetChoiceVariantId());
    list.add(present_choiceVariantId);
    if (present_choiceVariantId)
      list.add(choiceVariantId);

    boolean present_choiceId = true && (isSetChoiceId());
    list.add(present_choiceId);
    if (present_choiceId)
      list.add(choiceId);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    boolean present_simpleParameters = true && (isSetSimpleParameters());
    list.add(present_simpleParameters);
    if (present_simpleParameters)
      list.add(simpleParameters);

    boolean present_localizedParemeters = true && (isSetLocalizedParemeters());
    list.add(present_localizedParemeters);
    if (present_localizedParemeters)
      list.add(localizedParemeters);

    return list.hashCode();
  }

  @Override
  public int compareTo(ChoiceVariant other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChoiceVariantId()).compareTo(other.isSetChoiceVariantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoiceVariantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceVariantId, other.choiceVariantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChoiceId()).compareTo(other.isSetChoiceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoiceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceId, other.choiceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSimpleParameters()).compareTo(other.isSetSimpleParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimpleParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simpleParameters, other.simpleParameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalizedParemeters()).compareTo(other.isSetLocalizedParemeters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalizedParemeters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localizedParemeters, other.localizedParemeters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChoiceVariant(");
    boolean first = true;

    sb.append("choiceVariantId:");
    if (this.choiceVariantId == null) {
      sb.append("null");
    } else {
      sb.append(this.choiceVariantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("choiceId:");
    if (this.choiceId == null) {
      sb.append("null");
    } else {
      sb.append(this.choiceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("simpleParameters:");
    if (this.simpleParameters == null) {
      sb.append("null");
    } else {
      sb.append(this.simpleParameters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("localizedParemeters:");
    if (this.localizedParemeters == null) {
      sb.append("null");
    } else {
      sb.append(this.localizedParemeters);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (choiceVariantId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'choiceVariantId' was not present! Struct: " + toString());
    }
    if (choiceId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'choiceId' was not present! Struct: " + toString());
    }
    if (tags == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tags' was not present! Struct: " + toString());
    }
    if (simpleParameters == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'simpleParameters' was not present! Struct: " + toString());
    }
    if (localizedParemeters == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'localizedParemeters' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChoiceVariantStandardSchemeFactory implements SchemeFactory {
    public ChoiceVariantStandardScheme getScheme() {
      return new ChoiceVariantStandardScheme();
    }
  }

  private static class ChoiceVariantStandardScheme extends StandardScheme<ChoiceVariant> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChoiceVariant struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHOICE_VARIANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.choiceVariantId = iprot.readString();
              struct.setChoiceVariantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHOICE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.choiceId = iprot.readString();
              struct.setChoiceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                struct.tags = new ArrayList<String>(_list56.size);
                String _elem57;
                for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                {
                  _elem57 = iprot.readString();
                  struct.tags.add(_elem57);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIMPLE_PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map59 = iprot.readMapBegin();
                struct.simpleParameters = new HashMap<String,List<String>>(2*_map59.size);
                String _key60;
                List<String> _val61;
                for (int _i62 = 0; _i62 < _map59.size; ++_i62)
                {
                  _key60 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list63 = iprot.readListBegin();
                    _val61 = new ArrayList<String>(_list63.size);
                    String _elem64;
                    for (int _i65 = 0; _i65 < _list63.size; ++_i65)
                    {
                      _elem64 = iprot.readString();
                      _val61.add(_elem64);
                    }
                    iprot.readListEnd();
                  }
                  struct.simpleParameters.put(_key60, _val61);
                }
                iprot.readMapEnd();
              }
              struct.setSimpleParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCALIZED_PAREMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map66 = iprot.readMapBegin();
                struct.localizedParemeters = new HashMap<String,List<Map<Language,String>>>(2*_map66.size);
                String _key67;
                List<Map<Language,String>> _val68;
                for (int _i69 = 0; _i69 < _map66.size; ++_i69)
                {
                  _key67 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                    _val68 = new ArrayList<Map<Language,String>>(_list70.size);
                    Map<Language,String> _elem71;
                    for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                    {
                      {
                        org.apache.thrift.protocol.TMap _map73 = iprot.readMapBegin();
                        _elem71 = new HashMap<Language,String>(2*_map73.size);
                        Language _key74;
                        String _val75;
                        for (int _i76 = 0; _i76 < _map73.size; ++_i76)
                        {
                          _key74 = com.boxalino.dataintelligence.api.thrift.Language.findByValue(iprot.readI32());
                          _val75 = iprot.readString();
                          _elem71.put(_key74, _val75);
                        }
                        iprot.readMapEnd();
                      }
                      _val68.add(_elem71);
                    }
                    iprot.readListEnd();
                  }
                  struct.localizedParemeters.put(_key67, _val68);
                }
                iprot.readMapEnd();
              }
              struct.setLocalizedParemetersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChoiceVariant struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.choiceVariantId != null) {
        oprot.writeFieldBegin(CHOICE_VARIANT_ID_FIELD_DESC);
        oprot.writeString(struct.choiceVariantId);
        oprot.writeFieldEnd();
      }
      if (struct.choiceId != null) {
        oprot.writeFieldBegin(CHOICE_ID_FIELD_DESC);
        oprot.writeString(struct.choiceId);
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
          for (String _iter77 : struct.tags)
          {
            oprot.writeString(_iter77);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.simpleParameters != null) {
        oprot.writeFieldBegin(SIMPLE_PARAMETERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.simpleParameters.size()));
          for (Map.Entry<String, List<String>> _iter78 : struct.simpleParameters.entrySet())
          {
            oprot.writeString(_iter78.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter78.getValue().size()));
              for (String _iter79 : _iter78.getValue())
              {
                oprot.writeString(_iter79);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.localizedParemeters != null) {
        oprot.writeFieldBegin(LOCALIZED_PAREMETERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.localizedParemeters.size()));
          for (Map.Entry<String, List<Map<Language,String>>> _iter80 : struct.localizedParemeters.entrySet())
          {
            oprot.writeString(_iter80.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, _iter80.getValue().size()));
              for (Map<Language,String> _iter81 : _iter80.getValue())
              {
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, _iter81.size()));
                  for (Map.Entry<Language, String> _iter82 : _iter81.entrySet())
                  {
                    oprot.writeI32(_iter82.getKey().getValue());
                    oprot.writeString(_iter82.getValue());
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChoiceVariantTupleSchemeFactory implements SchemeFactory {
    public ChoiceVariantTupleScheme getScheme() {
      return new ChoiceVariantTupleScheme();
    }
  }

  private static class ChoiceVariantTupleScheme extends TupleScheme<ChoiceVariant> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChoiceVariant struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.choiceVariantId);
      oprot.writeString(struct.choiceId);
      {
        oprot.writeI32(struct.tags.size());
        for (String _iter83 : struct.tags)
        {
          oprot.writeString(_iter83);
        }
      }
      {
        oprot.writeI32(struct.simpleParameters.size());
        for (Map.Entry<String, List<String>> _iter84 : struct.simpleParameters.entrySet())
        {
          oprot.writeString(_iter84.getKey());
          {
            oprot.writeI32(_iter84.getValue().size());
            for (String _iter85 : _iter84.getValue())
            {
              oprot.writeString(_iter85);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.localizedParemeters.size());
        for (Map.Entry<String, List<Map<Language,String>>> _iter86 : struct.localizedParemeters.entrySet())
        {
          oprot.writeString(_iter86.getKey());
          {
            oprot.writeI32(_iter86.getValue().size());
            for (Map<Language,String> _iter87 : _iter86.getValue())
            {
              {
                oprot.writeI32(_iter87.size());
                for (Map.Entry<Language, String> _iter88 : _iter87.entrySet())
                {
                  oprot.writeI32(_iter88.getKey().getValue());
                  oprot.writeString(_iter88.getValue());
                }
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChoiceVariant struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.choiceVariantId = iprot.readString();
      struct.setChoiceVariantIdIsSet(true);
      struct.choiceId = iprot.readString();
      struct.setChoiceIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.tags = new ArrayList<String>(_list89.size);
        String _elem90;
        for (int _i91 = 0; _i91 < _list89.size; ++_i91)
        {
          _elem90 = iprot.readString();
          struct.tags.add(_elem90);
        }
      }
      struct.setTagsIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map92 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.simpleParameters = new HashMap<String,List<String>>(2*_map92.size);
        String _key93;
        List<String> _val94;
        for (int _i95 = 0; _i95 < _map92.size; ++_i95)
        {
          _key93 = iprot.readString();
          {
            org.apache.thrift.protocol.TList _list96 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            _val94 = new ArrayList<String>(_list96.size);
            String _elem97;
            for (int _i98 = 0; _i98 < _list96.size; ++_i98)
            {
              _elem97 = iprot.readString();
              _val94.add(_elem97);
            }
          }
          struct.simpleParameters.put(_key93, _val94);
        }
      }
      struct.setSimpleParametersIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map99 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.localizedParemeters = new HashMap<String,List<Map<Language,String>>>(2*_map99.size);
        String _key100;
        List<Map<Language,String>> _val101;
        for (int _i102 = 0; _i102 < _map99.size; ++_i102)
        {
          _key100 = iprot.readString();
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            _val101 = new ArrayList<Map<Language,String>>(_list103.size);
            Map<Language,String> _elem104;
            for (int _i105 = 0; _i105 < _list103.size; ++_i105)
            {
              {
                org.apache.thrift.protocol.TMap _map106 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem104 = new HashMap<Language,String>(2*_map106.size);
                Language _key107;
                String _val108;
                for (int _i109 = 0; _i109 < _map106.size; ++_i109)
                {
                  _key107 = com.boxalino.dataintelligence.api.thrift.Language.findByValue(iprot.readI32());
                  _val108 = iprot.readString();
                  _elem104.put(_key107, _val108);
                }
              }
              _val101.add(_elem104);
            }
          }
          struct.localizedParemeters.put(_key100, _val101);
        }
      }
      struct.setLocalizedParemetersIsSet(true);
    }
  }

}

