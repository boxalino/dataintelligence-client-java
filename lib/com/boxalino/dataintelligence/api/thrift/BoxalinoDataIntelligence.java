/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.dataintelligence.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-13")
public class BoxalinoDataIntelligence {

  public interface Iface {

    /**
     * this service function returns a new authentication token
     * 
     * <dl>
     * <dt>@param authentication</dt>
     * <dd>a fully complete AuthenticationRequest with the content of your credentials</dd>
     * <dt>@return</dt>
     * <dd>an Authentication object with your new authentication token (valid for 1 hour)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_CREDENTIALS:if the provided account / username / password information don't match the records of Boxalino system.</dd>
     * <dd>BLOCKED_USER:if the provided user has been blocked.</dd>
     * <dd>BLOCKED_ACCOUNT:if the provided account has been blocked.</dd>
     * </dl>
     * 
     * @param authentication
     */
    public Authentication GetAuthentication(AuthenticationRequest authentication) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function changes the current password
     * 
     * <dl>
     * <dt>@param authentication</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param newPassword</dt>
     * <dd>the new password to replace the existing one (careful, no forgot the new password, if you lose your password, contact <ahref="mailto:support@boxalino.com">support@boxalino.com</a></dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_NEW_PASSWORD:if the provided new password is not properly formatted (should be at least 8 characters long and not contain any punctuation).</dd>
     * </dl>
     * 
     * @param authentication
     * @param newPassword
     */
    public void UpdatePassword(Authentication authentication, String newPassword) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function returns the configuration version object matching the provided versionType. In general, you should always ask for the CURRENT_DEVELOPMENT_VERSION, unless you want to access directly (at your own risks) the production configuration.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN: if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dt>@returns ConfigurationVersion</dt>
     * <dd>The configuration object to use in your calls to other service functions which access your configuration parameters</dd>
     * </dl>
     * 
     * @param authentication
     * @param versionType
     */
    public ConfigurationVersion GetConfigurationVersion(Authentication authentication, ConfigurationVersionType versionType) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function udpates your data source configuration.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param dataSourcesConfigurationXML</dt>
     * <dd>the data source XML must follow the strict XML format and content as defined in the Boxalino documentation. This XML defines the way the system must extract data from the various files (typically a list of CSV files compressed in a zip file) to synchronize your product, customers and transactions data (tracker data are direclty provided to Boxalino Javascript tracker and are there not part of the data to be synchronized here. Please make sure that the product id is defined in a coherent way between he product files, the transaction files and the tracker (product View, add to basket and purchase event) (so the mapping can be done); same comment for the customer id: between the customer files, the transaction files and the tracker (set user event). If you don't have the full documentation of the data source XML, please contact <a href="mailto:support@boxalino.com">support@boxalino.com</a></dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>INVALID_DATASOURCE:if the provided new data source XML string doesn't match the required format (see documentation of the data source XML format)</dd>
     * <dt>@Nota Bene</dt>
     * <dd>If you remove fields definition from your data source, they will not be automatically deleted. You need to explicitely delte them through the delete component service function to remove them.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configurationVersion
     * @param dataSourcesConfigurationXML
     */
    public void SetDataSourcesConfiguration(Authentication authentication, ConfigurationVersion configurationVersion, String dataSourcesConfigurationXML) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function returns the map of all the defined field (key = fieldId, value = Field object).
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dt>@returns map<string, Field></dt>
     * <dd>A map containing all the defined fields of your account in this configuration version, with the fieldId as key and the Field object as value (key is provided for accessibility only, as the field id is also present in the Field object</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     */
    public Map<String,Field> GetFields(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function creates a new field
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param fieldId</dt>
     * <dd>the field id to be created (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>ALREADY_EXISTING_CONTENT_ID:if the provided field id already exists.</dd>
     * <dd>INVALID_CONTENT_ID:if the provided field id format is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param fieldId
     */
    public void CreateField(Authentication authentication, ConfigurationVersion configuration, String fieldId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function updates a field
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param field</dt>
     * <dd>a Field object to be updated (the content of the object will be updated on the content id provided)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided field id doesn't already exists.</dd>
     * <dd>INVALID_CONTENT:if the provided field content is not valid.</dd>
     * <dd>The </dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param field
     */
    public void UpdateField(Authentication authentication, ConfigurationVersion configuration, Field field) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function deletes a field
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param fieldId</dt>
     * <dd>the field id to be deleted</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided field id doesn't already exists.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param fieldId
     */
    public void DeleteField(Authentication authentication, ConfigurationVersion configuration, String fieldId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function returns the map of all the defined process tasks (key = processTaskId, value = ProcessTask object).
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dt>@returns map<string, ProcessTask></dt>
     * <dd>A map containing all the defined process tasks of your account in this configuration version, with the processTaskId as key and the ProcessTask object as value (key is provided for accessibility only, as the processTaskId is also present in the ProcessTask object</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     */
    public Map<String,ProcessTask> GetProcessTasks(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function creates a new process task
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param processTaskId</dt>
     * <dd>the process task id to be created (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>ALREADY_EXISTING_CONTENT_ID:if the provided process task id already exists.</dd>
     * <dd>INVALID_CONTENT_ID:if the provided process task id format is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param processTaskId
     */
    public void CreateProcessTask(Authentication authentication, ConfigurationVersion configuration, String processTaskId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function updates a process task
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param processTask</dt>
     * <dd>a ProcessTask object to be updated (the content of the object will be updated on the content id provided)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided process task id doesn't already exists.</dd>
     * <dd>INVALID_CONTENT:if the provided process task content is not valid.</dd>
     * <dd>The </dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param processTask
     */
    public void UpdateProcessTask(Authentication authentication, ConfigurationVersion configuration, ProcessTask processTask) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function deletes a process task
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param processTaskId</dt>
     * <dd>the process task id to be deleted</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided process task id doesn't already exists.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param processTaskId
     */
    public void DeleteProcessTask(Authentication authentication, ConfigurationVersion configuration, String processTaskId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function executes a process task
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param processTaskId</dt>
     * <dd>the process task id to be executed</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided process task id doesn't already exists.</dd>
     * <dt>@return process id</dt>
     * <dd>the processs task execution id of this process task execution (to be used to get an updated status through GetProcessStatus)</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param parameters
     */
    public String RunProcessTask(Authentication authentication, ConfigurationVersion configuration, ProcessTaskExecutionParameters parameters) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function returns the map of all the defined email campaigns (key = emailCampaignId, value = EmailCampaign object).
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dt>@returns map<string, EmailCampaign></dt>
     * <dd>A map containing all the defined email campaigns of your account in this configuration version, with the emailCampaignId as key and the EmailCampaign object as value (key is provided for accessibility only, as the emailCampaignId is also present in the EmailCampaign object</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     */
    public Map<String,EmailCampaign> GetEmailCampaigns(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function creates a new email campaign. a campaign is something permanent , so you shouldn't create one for each sending of a newsletter (but instead update the cmpid parameter of a permanent campaign e.g.: 'newsletter')
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param emailCampaignId</dt>
     * <dd>the email campaign id to be created (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>ALREADY_EXISTING_CONTENT_ID:if the provided email campaign id already exists.</dd>
     * <dd>INVALID_CONTENT_ID:if the provided email campaign id format is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param emailCampaignId
     */
    public void CreateEmailCampaign(Authentication authentication, ConfigurationVersion configuration, String emailCampaignId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function updates a email campaign
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param emailCampaign</dt>
     * <dd>a EmailCampaign object to be updated (the content of the object will be updated on the content id provided)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided email campaign id doesn't already exists.</dd>
     * <dd>INVALID_CONTENT:if the provided email campaign content is not valid.</dd>
     * <dd>The </dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param emailCampaign
     */
    public void UpdateEmailCampaign(Authentication authentication, ConfigurationVersion configuration, EmailCampaign emailCampaign) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function deletes a email campaign
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param emailCampaignId</dt>
     * <dd>the email campaign id to be deleted</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided email campaign id doesn't already exists.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param emailCampaignId
     */
    public void DeleteEmailCampaign(Authentication authentication, ConfigurationVersion configuration, String emailCampaignId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function returns the map of all the defined choices (key = choiceId, value = Choice object).
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param choiceSourceId</dt>
     * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dt>@returns map<string, Choice></dt>
     * <dd>A map containing all the defined choices of your account in this configuration version, with the choiceId as key and the Choice object as value (key is provided for accessibility only, as the choiceId is also present in the Choice object</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param choiceSourceId
     */
    public Map<String,Choice> GetChoices(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function creates a new choice
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@param choiceId</dt>
     * <dd>the choice id to be created (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>ALREADY_EXISTING_CONTENT_ID:if the provided choice id already exists.</dd>
     * <dd>INVALID_CONTENT_ID:if the provided choice id format is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param choiceSourceId
     * @param choiceId
     */
    public void CreateChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function updates a choice
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@param choice</dt>
     * <dd>a Choice object to be updated (the content of the object will be updated on the content id provided)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided choice id doesn't already exists.</dd>
     * <dd>INVALID_CONTENT:if the provided choice content is not valid.</dd>
     * <dd>The </dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param choiceSourceId
     * @param choice
     */
    public void UpdateChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, Choice choice) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function deletes a choice
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@param choiceId</dt>
     * <dd>the choice id to be deleted</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided choice id doesn't already exists.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param choiceSourceId
     * @param choiceId
     */
    public void DeleteChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function returns the map of all the defined choices (key = choiceId, value = Choice object).
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@param choiceId</dt>
     * <dd>the choice id on which to get the choice variants from</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided choice id doesn't already exists.</dd>
     * <dt>@returns map<string, Choice></dt>
     * <dd>A map containing all the defined choice variants of your account in this configuration version and for this specific choice, with the choiceVariantId as key and the ChoiceVariant object as value (key is provided for accessibility only, as the choiceVariantId is also present in the ChoiceVariant object</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param choiceSourceId
     * @param choiceId
     */
    public Map<String,ChoiceVariant> GetChoiceVariants(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function creates a new choice
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@param choiceId</dt>
     * <dd>the choice id on which to create a new choice variant (must exists)</dd>
     * <dt>@param choiceVariantId</dt>
     * <dd>the choice variant id to be created (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided choice id doesn't already exists.</dd>
     * <dd>ALREADY_EXISTING_CONTENT_ID:if the provided choice variant id already exists.</dd>
     * <dd>INVALID_CONTENT_ID:if the provided choice variant id format is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param choiceSourceId
     * @param choiceId
     * @param choiceVariantId
     */
    public void CreateChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, String choiceVariantId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function updates a choice
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@param choiceVariant</dt>
     * <dd>a ChoiceVariant object to be updated (the content of the object will be updated on the content id provided)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided choice variant id doesn't already exists.</dd>
     * <dd>INVALID_CONTENT:if the provided choice variant content is not valid.</dd>
     * <dd>The </dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param choiceSourceId
     * @param choiceVariant
     */
    public void UpdateChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, ChoiceVariant choiceVariant) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function deletes a choice
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dd>the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@param choiceId</dt>
     * <dd>the choice id on which to delete the choice variant id</dd>
     * <dt>@param choiceId</dt>
     * <dd>the choice variant id to be deleted</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided choice or choice variant id doesn't already exists.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param choiceSourceId
     * @param choiceId
     * @param choiceVariantId
     */
    public void DeleteChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, String choiceVariantId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function retrieves a process status
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param processTaskExecutionId</dt>
     * <dd>the process task execution status id to retrieve the status of</dd>
     * <dt>@return process task execution status</dt>
     * <dd>the current status of this process task execution id</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param processTaskExecutionId
     */
    public ProcessTaskExecutionStatus GetProcessStatus(Authentication authentication, ConfigurationVersion configuration, String processTaskExecutionId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service retrieves the list of configuration changes between two versions (typically between dev and prod versions)
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersionSource</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion) to be considered as the source (typically the version returned by GetConfigurationVersion with the ConfigurationVersionType CURRENT_DEVELOPMENT_VERSION)</dd>
     * <dt>@param configurationVersionDestination</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion) to be considered as the destination (typically the  version returned by GetConfigurationVersion with the ConfigurationVersionType CURRENT_PRODUCTION_VERSION)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if one of provided configuration versions is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configurationVersionSource
     * @param configurationVersionDestination
     */
    public List<ConfigurationDifference> GetConfigurationDifferences(Authentication authentication, ConfigurationVersion configurationVersionSource, ConfigurationVersion configurationVersionDestination) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service retrieves publishes the provided configuration version. The result is that this configuration will become the CURRENT_PRODUCTION_VERSION version and will be used automatically by all running processes. Also, as a consequence, a copy of the provided configuration version will be done and will become the new CURRENT_DEVELOPMENT_VERSION.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     */
    public void PublishConfiguration(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service copies the provided configuration version. The result is that this new configuration will become the CURRENT_DEVELOPMENT_VERSION.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     */
    public void CloneConfiguration(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * This service is responsible for reference csv file creation. It allows to configure csv schema which will be imported as fields in DI.
     * File should be uploaded as an attachement to the POST HTTP request sent to the following URL:
     *      http://di1.bx-cloud.com/frontend/dbmind/_/en/dbmind/api/reference/csv/file/upload?iframeAccount={account}&fileHash={ReferenceCSVFileDescriptor.fileHash}
     * File hash is set by the API internally and cannot be changed.
     * 
     * <dl>
     * <dt>@param authentication</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configuration</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param fileDescriptor</dt>
     * <dd>a ReferenceCSVFileDescriptor object describing the file that we want to create</dd>
     * <dt>@return</dt>
     * <dd>updated copy of ReferenceCSVFileDescriptor object describing the created file, with the file hash set</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>DUPLICATED_FILE_ID: if the given file identifier already exists</dd>
     * <dd>EMPTY_COLUMNS_LIST: if the given columns list is empty</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param fileDescriptor
     */
    public ReferenceCSVFileDescriptor CreateReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * This service is responsible for updating reference csv file.
     * 
     * <dl>
     * <dt>@param authentication</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configuration</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param fileDescriptor</dt>
     * <dd>an updated ReferenceCSVFileDescriptor object</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN: if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>EMPTY_COLUMNS_LIST: if the given columns list is empty</dd>
     * <dd>NON_EXISTING_FILE: if the file does not exist</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param fileDescriptor
     */
    public void UpdateReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * This service is responsible for reference csv file removal.
     * 
     * <dl>
     * <dt>@param authentication</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configuration</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param fileDescriptor</dt>
     * <dd>the ReferenceCSVFileDescriptor object to be removed</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN: if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_FILE: if the file does not exist</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param fileDescriptor
     */
    public void DeleteReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * This service is responsible for getting all registered csv files.
     * 
     * <dl>
     * <dt>@param authentication</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configuration</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@return</dt>
     * <dd>list of all reference csv files assigned to the current account</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN: if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     */
    public List<ReferenceCSVFileDescriptor> GetAllReferenceCSVFiles(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function creates additional fields
     * 
     * <dl>
     * <dt>@param authentication</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configuration</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param fieldsConfigurationXML</dt>
     * <dd>the fields configuration XML must follow the strict XML format and content as defined in the Boxalino documentation. This XML described fields which have to be created by parsing existing reference csv file.</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>INVALID_DATASOURCE_XML:if the provided new data source XML string doesn't match the required format (see documentation of the data source XML format)</dd>
     * </dl>
     * 
     * @param authentication
     * @param configurationVersion
     * @param fieldsConfigurationXML
     */
    public void CreateFieldsFromReferenceCSVFile(Authentication authentication, ConfigurationVersion configurationVersion, String fieldsConfigurationXML) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function returns the map of all the defined schedulings (key = schedulingId, value = Scheduling object).
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dt>@returns map<string, Scheduling></dt>
     * <dd>A map containing all the defined schedulings of your account in this configuration version, with the schedulingId as key and the Scheduling object as value (key is provided for accessibility only, as the schedulingId is also present in the Scheduling object</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     */
    public Map<String,Scheduling> GetSchedulings(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function creates a new scheduling. A scheduling is a collection of process tasks to be executed one after the other by the system.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param schedulingId</dt>
     * <dd>the scheduling id to be created (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>ALREADY_EXISTING_CONTENT_ID:if the provided  scheduling id already exists.</dd>
     * <dd>INVALID_CONTENT_ID:if the provided scheduling id format is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param schedulingId
     */
    public void CreateScheduling(Authentication authentication, ConfigurationVersion configuration, String schedulingId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function updates a scheduling. A scheduling is a collection of process tasks to be executed one after the other by the system.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param scheduling</dt>
     * <dd>a Scheduling object to be updated (the content of the object will be updated on the content id provided)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided Scheduling id doesn't already exists.</dd>
     * <dd>INVALID_CONTENT:if the provided Scheduling content is not valid.</dd>
     * <dd>The </dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param scheduling
     */
    public void UpdateScheduling(Authentication authentication, ConfigurationVersion configuration, Scheduling scheduling) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function deletes a scheduling. A scheduling is a collection of process tasks to be executed one after the other by the system.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param schedulingId</dt>
     * <dd>the schedulingId to be deleted</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided schedulingId id doesn't already exists.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param schedulingId
     */
    public void DeleteScheduling(Authentication authentication, ConfigurationVersion configuration, String schedulingId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function executes a scheduling. A scheduling is a collection of process tasks to be executed one after the other by the system.
     * 
     * <dl>
     * <dt>@param authentication</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configuration</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param parameters</dt>
     * <dd>parameters describing the scheduling which we want to execute</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided scheduling id doesn't already exists.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param parameters
     */
    public void RunScheduling(Authentication authentication, ConfigurationVersion configuration, SchedulingExecutionParameters parameters) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function returns the map of all the defined recommendation blocks (key = recommendationBlockId, value = RecommendationBlock object).
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dt>@returns map<string, RecommendationBlock></dt>
     * <dd>A map containing all the defined RecommendationBlocks of your account in this configuration version, with the RecommendationBlock id as key and the RecommendationBlock object as value (key is provided for accessibility only, as the RecommendationBlock id is also present in the RecommendationBlock object</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     */
    public Map<String,RecommendationBlock> GetRecommendationBlocks(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function creates a new RecommendationBlock. A RecommendationBlock is a visual block of recommendation for one page of your web-site (product detail page, basket page, etc.) you can have several recommendation blocks on the same page.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param recommendationBlockId</dt>
     * <dd>the recommendation block id to be created (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>ALREADY_EXISTING_CONTENT_ID:if the provided  recommendationBlock id already exists.</dd>
     * <dd>INVALID_CONTENT_ID:if the provided recommendationBlock id format is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param recommendationBlockId
     */
    public void CreateRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, String recommendationBlockId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function updates a RecommendationBlock. A RecommendationBlock is a visual block of recommendation for one page of your web-site (product detail page, basket page, etc.) you can have several recommendation blocks on the same page.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param recommendationBlock</dt>
     * <dd>a recommendationBlock object to be updated (the content of the object will be updated on the content id provided)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided RecommendationBlock id doesn't already exists.</dd>
     * <dd>INVALID_CONTENT:if the provided RecommendationBlock content is not valid.</dd>
     * <dd>The </dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param recommendationBlock
     */
    public void UpdateRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, RecommendationBlock recommendationBlock) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function deletes a RecommendationBlock. A RecommendationBlock is a visual block of recommendation for one page of your web-site (product detail page, basket page, etc.) you can have several recommendation blocks on the same page.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param recommendationBlockId</dt>
     * <dd>the recommendationBlockId to be deleted</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided recommendationBlockId id doesn't already exists.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param recommendationBlockId
     */
    public void DeleteRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, String recommendationBlockId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function gets all data sources defined for the account
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     */
    public Map<String,DataSource> GetDataSources(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function creates a new data source
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>ALREADY_EXISTING_CONTENT_ID: if the provided dataSourceId already exists.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param dataSourceId
     */
    public void CreateDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function updates a DataSource
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param dataSource</dt>
     * <dd>a DataSource object to be updated (the content of the object will be updated on the content id provided)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided DataSource id doesn't already exists.</dd>
     * <dd>The </dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param dataSource
     */
    public void UpdateDataSource(Authentication authentication, ConfigurationVersion configuration, DataSource dataSource) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function removes provided data source
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param dataSourceId</dt>
     * <dd>the identifier of the data source to be deleted</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided dataSourceId id doesn't already exists.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param dataSourceId
     */
    public void DeleteDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function gets all data exports defined for the account
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     */
    public Map<String,DataExport> GetDataExports(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function creates new data export
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param dataExportId</dt>
     * <dd>the identifier of the data export to be deleted</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>ALREADY_EXISTING_CONTENT_ID: if the provided dataExportId already exists.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param dataExportId
     */
    public void CreateDataExport(Authentication authentication, ConfigurationVersion configuration, String dataExportId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function updates a DataExport
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param dataExport</dt>
     * <dd>a DataExport object to be updated (the content of the object will be updated on the content id provided)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided DataExport id doesn't already exists.</dd>
     * <dd>The </dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param dataExport
     */
    public void UpdateDataExport(Authentication authentication, ConfigurationVersion configuration, DataExport dataExport) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function removes provided data export
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param dataExportId</dt>
     * <dd>the identifier of the data export to be deleted</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided dataSourceId id doesn't already exists.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param dataExportId
     */
    public void DeleteDataExport(Authentication authentication, ConfigurationVersion configuration, String dataExportId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function gets all data source defined for the account, but only these ones which use reference CSV files to retrieve the data
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     */
    public Map<String,ReferenceCSVDataSource> GetReferenceCSVFileDataSources(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function creates new reference csv data source
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param dataExportId</dt>
     * <dd>the identifier of the data export to be deleted</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>ALREADY_EXISTING_CONTENT_ID: if the provided dataSourceId already exists.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param dataSourceId
     */
    public void CreateReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function updates a reference CSV data source
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param dataSource</dt>
     * <dd>a ReferenceCSVDataSource object to be updated (the content of the object will be updated on the content id provided)</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided ReferenceCSVDataSource id doesn't already exists.</dd>
     * <dd>The </dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param dataSource
     */
    public void UpdateReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVDataSource dataSource) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * this service function removes provided reference CSV data source
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param dataSourceId</dt>
     * <dd>the identifier of the data source to be deleted</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>NON_EXISTING_CONTENT_ID:if the provided dataSourceId id doesn't already exists.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param dataSourceId
     */
    public void DeleteReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * This service function gets an identifier of last imported transaction. It can be useful for differential data synchronization.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@returns string</dt>
     * <dd>an identifier of the last transaction</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     */
    public String GetLastTransactionID(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * DEPRECITATED: USE GetChoiceReport service instead with ReportMetric: PAGE_VIEWS
     * This service function retrieves number of visits for each time range with selected precision.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param range</dt>
     * <dd>a time range of generated reports</dd>
     * <dt>@param precision</dt>
     * <dd>a level of granularity</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>INVALID_RANGE: if the given time range is incorrect</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param range
     * @param precision
     */
    public List<TimeRangeValue> GetPageViews(Authentication authentication, ConfigurationVersion configuration, TimeRange range, TimeRangePrecision precision) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * This service function provides an choice statistical report.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param request</dt>
     * <dd>The statistical report request indicating the parameters of the requested report: dimension, metrics, etc.</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>INVALID_REPORT_REQUEST: if the provided report request is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param request
     */
    public ChoiceReport GetChoiceReport(Authentication authentication, ConfigurationVersion configuration, ChoiceReportRequest request) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * This service function provides an transaction statistical report.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param request</dt>
     * <dd>The statistical report request indicating the parameters of the requested report: dimension, metrics, etc.</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>INVALID_REPORT_REQUEST: if the provided report request is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param request
     */
    public TransactionReport GetTransactionReport(Authentication authentication, ConfigurationVersion configuration, TransactionReportRequest request) throws DataIntelligenceServiceException, org.apache.thrift.TException;

    /**
     * This service function provides an behavior statistical report.
     * 
     * <dl>
     * <dt>@param authenticationToken</dt>
     * <dd>the authentication object as returned by the GetAuthentication service function in the AuthenticationResponse struct</dd>
     * <dt>@param configurationVersion</dt>
     * <dd>a ConfigurationVersion object indicating the configuration version number (as returned by function GetConfigurationVersion)</dd>
     * <dt>@param request</dt>
     * <dd>The statistical report request indicating the parameters of the requested report: dimension, metrics, etc.</dd>
     * <dt>@throws DataIntelligenceServiceException</dt>
     * <dd>INVALID_AUTHENTICATION_TOKEN:if the provided authentication token is not valid or has expired (1 hour validity).</dd>
     * <dd>INVALID_CONFIGURATION_VERSION: if the provided configuration version is not valid.</dd>
     * <dd>INVALID_REPORT_REQUEST: if the provided report request is not valid.</dd>
     * </dl>
     * 
     * @param authentication
     * @param configuration
     * @param request
     */
    public BehaviorReport GetBehaviorReport(Authentication authentication, ConfigurationVersion configuration, BehaviorReportRequest request) throws DataIntelligenceServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void GetAuthentication(AuthenticationRequest authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdatePassword(Authentication authentication, String newPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetConfigurationVersion(Authentication authentication, ConfigurationVersionType versionType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void SetDataSourcesConfiguration(Authentication authentication, ConfigurationVersion configurationVersion, String dataSourcesConfigurationXML, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetFields(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateField(Authentication authentication, ConfigurationVersion configuration, String fieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateField(Authentication authentication, ConfigurationVersion configuration, Field field, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DeleteField(Authentication authentication, ConfigurationVersion configuration, String fieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetProcessTasks(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateProcessTask(Authentication authentication, ConfigurationVersion configuration, String processTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateProcessTask(Authentication authentication, ConfigurationVersion configuration, ProcessTask processTask, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DeleteProcessTask(Authentication authentication, ConfigurationVersion configuration, String processTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void RunProcessTask(Authentication authentication, ConfigurationVersion configuration, ProcessTaskExecutionParameters parameters, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetEmailCampaigns(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateEmailCampaign(Authentication authentication, ConfigurationVersion configuration, String emailCampaignId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateEmailCampaign(Authentication authentication, ConfigurationVersion configuration, EmailCampaign emailCampaign, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DeleteEmailCampaign(Authentication authentication, ConfigurationVersion configuration, String emailCampaignId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetChoices(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, Choice choice, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DeleteChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetChoiceVariants(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, String choiceVariantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, ChoiceVariant choiceVariant, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DeleteChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, String choiceVariantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetProcessStatus(Authentication authentication, ConfigurationVersion configuration, String processTaskExecutionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetConfigurationDifferences(Authentication authentication, ConfigurationVersion configurationVersionSource, ConfigurationVersion configurationVersionDestination, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void PublishConfiguration(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CloneConfiguration(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DeleteReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetAllReferenceCSVFiles(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateFieldsFromReferenceCSVFile(Authentication authentication, ConfigurationVersion configurationVersion, String fieldsConfigurationXML, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetSchedulings(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateScheduling(Authentication authentication, ConfigurationVersion configuration, String schedulingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateScheduling(Authentication authentication, ConfigurationVersion configuration, Scheduling scheduling, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DeleteScheduling(Authentication authentication, ConfigurationVersion configuration, String schedulingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void RunScheduling(Authentication authentication, ConfigurationVersion configuration, SchedulingExecutionParameters parameters, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetRecommendationBlocks(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, String recommendationBlockId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, RecommendationBlock recommendationBlock, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DeleteRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, String recommendationBlockId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetDataSources(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateDataSource(Authentication authentication, ConfigurationVersion configuration, DataSource dataSource, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DeleteDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetDataExports(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateDataExport(Authentication authentication, ConfigurationVersion configuration, String dataExportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateDataExport(Authentication authentication, ConfigurationVersion configuration, DataExport dataExport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DeleteDataExport(Authentication authentication, ConfigurationVersion configuration, String dataExportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetReferenceCSVFileDataSources(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVDataSource dataSource, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DeleteReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetLastTransactionID(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetPageViews(Authentication authentication, ConfigurationVersion configuration, TimeRange range, TimeRangePrecision precision, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetChoiceReport(Authentication authentication, ConfigurationVersion configuration, ChoiceReportRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetTransactionReport(Authentication authentication, ConfigurationVersion configuration, TransactionReportRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetBehaviorReport(Authentication authentication, ConfigurationVersion configuration, BehaviorReportRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Authentication GetAuthentication(AuthenticationRequest authentication) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetAuthentication(authentication);
      return recv_GetAuthentication();
    }

    public void send_GetAuthentication(AuthenticationRequest authentication) throws org.apache.thrift.TException
    {
      GetAuthentication_args args = new GetAuthentication_args();
      args.setAuthentication(authentication);
      sendBase("GetAuthentication", args);
    }

    public Authentication recv_GetAuthentication() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetAuthentication_result result = new GetAuthentication_result();
      receiveBase(result, "GetAuthentication");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAuthentication failed: unknown result");
    }

    public void UpdatePassword(Authentication authentication, String newPassword) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_UpdatePassword(authentication, newPassword);
      recv_UpdatePassword();
    }

    public void send_UpdatePassword(Authentication authentication, String newPassword) throws org.apache.thrift.TException
    {
      UpdatePassword_args args = new UpdatePassword_args();
      args.setAuthentication(authentication);
      args.setNewPassword(newPassword);
      sendBase("UpdatePassword", args);
    }

    public void recv_UpdatePassword() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      UpdatePassword_result result = new UpdatePassword_result();
      receiveBase(result, "UpdatePassword");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public ConfigurationVersion GetConfigurationVersion(Authentication authentication, ConfigurationVersionType versionType) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetConfigurationVersion(authentication, versionType);
      return recv_GetConfigurationVersion();
    }

    public void send_GetConfigurationVersion(Authentication authentication, ConfigurationVersionType versionType) throws org.apache.thrift.TException
    {
      GetConfigurationVersion_args args = new GetConfigurationVersion_args();
      args.setAuthentication(authentication);
      args.setVersionType(versionType);
      sendBase("GetConfigurationVersion", args);
    }

    public ConfigurationVersion recv_GetConfigurationVersion() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetConfigurationVersion_result result = new GetConfigurationVersion_result();
      receiveBase(result, "GetConfigurationVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetConfigurationVersion failed: unknown result");
    }

    public void SetDataSourcesConfiguration(Authentication authentication, ConfigurationVersion configurationVersion, String dataSourcesConfigurationXML) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_SetDataSourcesConfiguration(authentication, configurationVersion, dataSourcesConfigurationXML);
      recv_SetDataSourcesConfiguration();
    }

    public void send_SetDataSourcesConfiguration(Authentication authentication, ConfigurationVersion configurationVersion, String dataSourcesConfigurationXML) throws org.apache.thrift.TException
    {
      SetDataSourcesConfiguration_args args = new SetDataSourcesConfiguration_args();
      args.setAuthentication(authentication);
      args.setConfigurationVersion(configurationVersion);
      args.setDataSourcesConfigurationXML(dataSourcesConfigurationXML);
      sendBase("SetDataSourcesConfiguration", args);
    }

    public void recv_SetDataSourcesConfiguration() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      SetDataSourcesConfiguration_result result = new SetDataSourcesConfiguration_result();
      receiveBase(result, "SetDataSourcesConfiguration");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Map<String,Field> GetFields(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetFields(authentication, configuration);
      return recv_GetFields();
    }

    public void send_GetFields(Authentication authentication, ConfigurationVersion configuration) throws org.apache.thrift.TException
    {
      GetFields_args args = new GetFields_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      sendBase("GetFields", args);
    }

    public Map<String,Field> recv_GetFields() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetFields_result result = new GetFields_result();
      receiveBase(result, "GetFields");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetFields failed: unknown result");
    }

    public void CreateField(Authentication authentication, ConfigurationVersion configuration, String fieldId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_CreateField(authentication, configuration, fieldId);
      recv_CreateField();
    }

    public void send_CreateField(Authentication authentication, ConfigurationVersion configuration, String fieldId) throws org.apache.thrift.TException
    {
      CreateField_args args = new CreateField_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setFieldId(fieldId);
      sendBase("CreateField", args);
    }

    public void recv_CreateField() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      CreateField_result result = new CreateField_result();
      receiveBase(result, "CreateField");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void UpdateField(Authentication authentication, ConfigurationVersion configuration, Field field) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_UpdateField(authentication, configuration, field);
      recv_UpdateField();
    }

    public void send_UpdateField(Authentication authentication, ConfigurationVersion configuration, Field field) throws org.apache.thrift.TException
    {
      UpdateField_args args = new UpdateField_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setField(field);
      sendBase("UpdateField", args);
    }

    public void recv_UpdateField() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      UpdateField_result result = new UpdateField_result();
      receiveBase(result, "UpdateField");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void DeleteField(Authentication authentication, ConfigurationVersion configuration, String fieldId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_DeleteField(authentication, configuration, fieldId);
      recv_DeleteField();
    }

    public void send_DeleteField(Authentication authentication, ConfigurationVersion configuration, String fieldId) throws org.apache.thrift.TException
    {
      DeleteField_args args = new DeleteField_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setFieldId(fieldId);
      sendBase("DeleteField", args);
    }

    public void recv_DeleteField() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      DeleteField_result result = new DeleteField_result();
      receiveBase(result, "DeleteField");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Map<String,ProcessTask> GetProcessTasks(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetProcessTasks(authentication, configuration);
      return recv_GetProcessTasks();
    }

    public void send_GetProcessTasks(Authentication authentication, ConfigurationVersion configuration) throws org.apache.thrift.TException
    {
      GetProcessTasks_args args = new GetProcessTasks_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      sendBase("GetProcessTasks", args);
    }

    public Map<String,ProcessTask> recv_GetProcessTasks() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetProcessTasks_result result = new GetProcessTasks_result();
      receiveBase(result, "GetProcessTasks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetProcessTasks failed: unknown result");
    }

    public void CreateProcessTask(Authentication authentication, ConfigurationVersion configuration, String processTaskId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_CreateProcessTask(authentication, configuration, processTaskId);
      recv_CreateProcessTask();
    }

    public void send_CreateProcessTask(Authentication authentication, ConfigurationVersion configuration, String processTaskId) throws org.apache.thrift.TException
    {
      CreateProcessTask_args args = new CreateProcessTask_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setProcessTaskId(processTaskId);
      sendBase("CreateProcessTask", args);
    }

    public void recv_CreateProcessTask() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      CreateProcessTask_result result = new CreateProcessTask_result();
      receiveBase(result, "CreateProcessTask");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void UpdateProcessTask(Authentication authentication, ConfigurationVersion configuration, ProcessTask processTask) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_UpdateProcessTask(authentication, configuration, processTask);
      recv_UpdateProcessTask();
    }

    public void send_UpdateProcessTask(Authentication authentication, ConfigurationVersion configuration, ProcessTask processTask) throws org.apache.thrift.TException
    {
      UpdateProcessTask_args args = new UpdateProcessTask_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setProcessTask(processTask);
      sendBase("UpdateProcessTask", args);
    }

    public void recv_UpdateProcessTask() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      UpdateProcessTask_result result = new UpdateProcessTask_result();
      receiveBase(result, "UpdateProcessTask");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void DeleteProcessTask(Authentication authentication, ConfigurationVersion configuration, String processTaskId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_DeleteProcessTask(authentication, configuration, processTaskId);
      recv_DeleteProcessTask();
    }

    public void send_DeleteProcessTask(Authentication authentication, ConfigurationVersion configuration, String processTaskId) throws org.apache.thrift.TException
    {
      DeleteProcessTask_args args = new DeleteProcessTask_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setProcessTaskId(processTaskId);
      sendBase("DeleteProcessTask", args);
    }

    public void recv_DeleteProcessTask() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      DeleteProcessTask_result result = new DeleteProcessTask_result();
      receiveBase(result, "DeleteProcessTask");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public String RunProcessTask(Authentication authentication, ConfigurationVersion configuration, ProcessTaskExecutionParameters parameters) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_RunProcessTask(authentication, configuration, parameters);
      return recv_RunProcessTask();
    }

    public void send_RunProcessTask(Authentication authentication, ConfigurationVersion configuration, ProcessTaskExecutionParameters parameters) throws org.apache.thrift.TException
    {
      RunProcessTask_args args = new RunProcessTask_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setParameters(parameters);
      sendBase("RunProcessTask", args);
    }

    public String recv_RunProcessTask() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      RunProcessTask_result result = new RunProcessTask_result();
      receiveBase(result, "RunProcessTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RunProcessTask failed: unknown result");
    }

    public Map<String,EmailCampaign> GetEmailCampaigns(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetEmailCampaigns(authentication, configuration);
      return recv_GetEmailCampaigns();
    }

    public void send_GetEmailCampaigns(Authentication authentication, ConfigurationVersion configuration) throws org.apache.thrift.TException
    {
      GetEmailCampaigns_args args = new GetEmailCampaigns_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      sendBase("GetEmailCampaigns", args);
    }

    public Map<String,EmailCampaign> recv_GetEmailCampaigns() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetEmailCampaigns_result result = new GetEmailCampaigns_result();
      receiveBase(result, "GetEmailCampaigns");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetEmailCampaigns failed: unknown result");
    }

    public void CreateEmailCampaign(Authentication authentication, ConfigurationVersion configuration, String emailCampaignId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_CreateEmailCampaign(authentication, configuration, emailCampaignId);
      recv_CreateEmailCampaign();
    }

    public void send_CreateEmailCampaign(Authentication authentication, ConfigurationVersion configuration, String emailCampaignId) throws org.apache.thrift.TException
    {
      CreateEmailCampaign_args args = new CreateEmailCampaign_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setEmailCampaignId(emailCampaignId);
      sendBase("CreateEmailCampaign", args);
    }

    public void recv_CreateEmailCampaign() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      CreateEmailCampaign_result result = new CreateEmailCampaign_result();
      receiveBase(result, "CreateEmailCampaign");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void UpdateEmailCampaign(Authentication authentication, ConfigurationVersion configuration, EmailCampaign emailCampaign) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_UpdateEmailCampaign(authentication, configuration, emailCampaign);
      recv_UpdateEmailCampaign();
    }

    public void send_UpdateEmailCampaign(Authentication authentication, ConfigurationVersion configuration, EmailCampaign emailCampaign) throws org.apache.thrift.TException
    {
      UpdateEmailCampaign_args args = new UpdateEmailCampaign_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setEmailCampaign(emailCampaign);
      sendBase("UpdateEmailCampaign", args);
    }

    public void recv_UpdateEmailCampaign() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      UpdateEmailCampaign_result result = new UpdateEmailCampaign_result();
      receiveBase(result, "UpdateEmailCampaign");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void DeleteEmailCampaign(Authentication authentication, ConfigurationVersion configuration, String emailCampaignId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_DeleteEmailCampaign(authentication, configuration, emailCampaignId);
      recv_DeleteEmailCampaign();
    }

    public void send_DeleteEmailCampaign(Authentication authentication, ConfigurationVersion configuration, String emailCampaignId) throws org.apache.thrift.TException
    {
      DeleteEmailCampaign_args args = new DeleteEmailCampaign_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setEmailCampaignId(emailCampaignId);
      sendBase("DeleteEmailCampaign", args);
    }

    public void recv_DeleteEmailCampaign() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      DeleteEmailCampaign_result result = new DeleteEmailCampaign_result();
      receiveBase(result, "DeleteEmailCampaign");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Map<String,Choice> GetChoices(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetChoices(authentication, configuration, choiceSourceId);
      return recv_GetChoices();
    }

    public void send_GetChoices(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId) throws org.apache.thrift.TException
    {
      GetChoices_args args = new GetChoices_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setChoiceSourceId(choiceSourceId);
      sendBase("GetChoices", args);
    }

    public Map<String,Choice> recv_GetChoices() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetChoices_result result = new GetChoices_result();
      receiveBase(result, "GetChoices");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetChoices failed: unknown result");
    }

    public void CreateChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_CreateChoice(authentication, configuration, choiceSourceId, choiceId);
      recv_CreateChoice();
    }

    public void send_CreateChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId) throws org.apache.thrift.TException
    {
      CreateChoice_args args = new CreateChoice_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setChoiceSourceId(choiceSourceId);
      args.setChoiceId(choiceId);
      sendBase("CreateChoice", args);
    }

    public void recv_CreateChoice() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      CreateChoice_result result = new CreateChoice_result();
      receiveBase(result, "CreateChoice");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void UpdateChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, Choice choice) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_UpdateChoice(authentication, configuration, choiceSourceId, choice);
      recv_UpdateChoice();
    }

    public void send_UpdateChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, Choice choice) throws org.apache.thrift.TException
    {
      UpdateChoice_args args = new UpdateChoice_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setChoiceSourceId(choiceSourceId);
      args.setChoice(choice);
      sendBase("UpdateChoice", args);
    }

    public void recv_UpdateChoice() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      UpdateChoice_result result = new UpdateChoice_result();
      receiveBase(result, "UpdateChoice");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void DeleteChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_DeleteChoice(authentication, configuration, choiceSourceId, choiceId);
      recv_DeleteChoice();
    }

    public void send_DeleteChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId) throws org.apache.thrift.TException
    {
      DeleteChoice_args args = new DeleteChoice_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setChoiceSourceId(choiceSourceId);
      args.setChoiceId(choiceId);
      sendBase("DeleteChoice", args);
    }

    public void recv_DeleteChoice() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      DeleteChoice_result result = new DeleteChoice_result();
      receiveBase(result, "DeleteChoice");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Map<String,ChoiceVariant> GetChoiceVariants(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetChoiceVariants(authentication, configuration, choiceSourceId, choiceId);
      return recv_GetChoiceVariants();
    }

    public void send_GetChoiceVariants(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId) throws org.apache.thrift.TException
    {
      GetChoiceVariants_args args = new GetChoiceVariants_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setChoiceSourceId(choiceSourceId);
      args.setChoiceId(choiceId);
      sendBase("GetChoiceVariants", args);
    }

    public Map<String,ChoiceVariant> recv_GetChoiceVariants() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetChoiceVariants_result result = new GetChoiceVariants_result();
      receiveBase(result, "GetChoiceVariants");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetChoiceVariants failed: unknown result");
    }

    public void CreateChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, String choiceVariantId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_CreateChoiceVariant(authentication, configuration, choiceSourceId, choiceId, choiceVariantId);
      recv_CreateChoiceVariant();
    }

    public void send_CreateChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, String choiceVariantId) throws org.apache.thrift.TException
    {
      CreateChoiceVariant_args args = new CreateChoiceVariant_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setChoiceSourceId(choiceSourceId);
      args.setChoiceId(choiceId);
      args.setChoiceVariantId(choiceVariantId);
      sendBase("CreateChoiceVariant", args);
    }

    public void recv_CreateChoiceVariant() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      CreateChoiceVariant_result result = new CreateChoiceVariant_result();
      receiveBase(result, "CreateChoiceVariant");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void UpdateChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, ChoiceVariant choiceVariant) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_UpdateChoiceVariant(authentication, configuration, choiceSourceId, choiceVariant);
      recv_UpdateChoiceVariant();
    }

    public void send_UpdateChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, ChoiceVariant choiceVariant) throws org.apache.thrift.TException
    {
      UpdateChoiceVariant_args args = new UpdateChoiceVariant_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setChoiceSourceId(choiceSourceId);
      args.setChoiceVariant(choiceVariant);
      sendBase("UpdateChoiceVariant", args);
    }

    public void recv_UpdateChoiceVariant() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      UpdateChoiceVariant_result result = new UpdateChoiceVariant_result();
      receiveBase(result, "UpdateChoiceVariant");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void DeleteChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, String choiceVariantId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_DeleteChoiceVariant(authentication, configuration, choiceSourceId, choiceId, choiceVariantId);
      recv_DeleteChoiceVariant();
    }

    public void send_DeleteChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, String choiceVariantId) throws org.apache.thrift.TException
    {
      DeleteChoiceVariant_args args = new DeleteChoiceVariant_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setChoiceSourceId(choiceSourceId);
      args.setChoiceId(choiceId);
      args.setChoiceVariantId(choiceVariantId);
      sendBase("DeleteChoiceVariant", args);
    }

    public void recv_DeleteChoiceVariant() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      DeleteChoiceVariant_result result = new DeleteChoiceVariant_result();
      receiveBase(result, "DeleteChoiceVariant");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public ProcessTaskExecutionStatus GetProcessStatus(Authentication authentication, ConfigurationVersion configuration, String processTaskExecutionId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetProcessStatus(authentication, configuration, processTaskExecutionId);
      return recv_GetProcessStatus();
    }

    public void send_GetProcessStatus(Authentication authentication, ConfigurationVersion configuration, String processTaskExecutionId) throws org.apache.thrift.TException
    {
      GetProcessStatus_args args = new GetProcessStatus_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setProcessTaskExecutionId(processTaskExecutionId);
      sendBase("GetProcessStatus", args);
    }

    public ProcessTaskExecutionStatus recv_GetProcessStatus() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetProcessStatus_result result = new GetProcessStatus_result();
      receiveBase(result, "GetProcessStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetProcessStatus failed: unknown result");
    }

    public List<ConfigurationDifference> GetConfigurationDifferences(Authentication authentication, ConfigurationVersion configurationVersionSource, ConfigurationVersion configurationVersionDestination) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetConfigurationDifferences(authentication, configurationVersionSource, configurationVersionDestination);
      return recv_GetConfigurationDifferences();
    }

    public void send_GetConfigurationDifferences(Authentication authentication, ConfigurationVersion configurationVersionSource, ConfigurationVersion configurationVersionDestination) throws org.apache.thrift.TException
    {
      GetConfigurationDifferences_args args = new GetConfigurationDifferences_args();
      args.setAuthentication(authentication);
      args.setConfigurationVersionSource(configurationVersionSource);
      args.setConfigurationVersionDestination(configurationVersionDestination);
      sendBase("GetConfigurationDifferences", args);
    }

    public List<ConfigurationDifference> recv_GetConfigurationDifferences() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetConfigurationDifferences_result result = new GetConfigurationDifferences_result();
      receiveBase(result, "GetConfigurationDifferences");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetConfigurationDifferences failed: unknown result");
    }

    public void PublishConfiguration(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_PublishConfiguration(authentication, configuration);
      recv_PublishConfiguration();
    }

    public void send_PublishConfiguration(Authentication authentication, ConfigurationVersion configuration) throws org.apache.thrift.TException
    {
      PublishConfiguration_args args = new PublishConfiguration_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      sendBase("PublishConfiguration", args);
    }

    public void recv_PublishConfiguration() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      PublishConfiguration_result result = new PublishConfiguration_result();
      receiveBase(result, "PublishConfiguration");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void CloneConfiguration(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_CloneConfiguration(authentication, configuration);
      recv_CloneConfiguration();
    }

    public void send_CloneConfiguration(Authentication authentication, ConfigurationVersion configuration) throws org.apache.thrift.TException
    {
      CloneConfiguration_args args = new CloneConfiguration_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      sendBase("CloneConfiguration", args);
    }

    public void recv_CloneConfiguration() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      CloneConfiguration_result result = new CloneConfiguration_result();
      receiveBase(result, "CloneConfiguration");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public ReferenceCSVFileDescriptor CreateReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_CreateReferenceCSVFile(authentication, configuration, fileDescriptor);
      return recv_CreateReferenceCSVFile();
    }

    public void send_CreateReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor) throws org.apache.thrift.TException
    {
      CreateReferenceCSVFile_args args = new CreateReferenceCSVFile_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setFileDescriptor(fileDescriptor);
      sendBase("CreateReferenceCSVFile", args);
    }

    public ReferenceCSVFileDescriptor recv_CreateReferenceCSVFile() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      CreateReferenceCSVFile_result result = new CreateReferenceCSVFile_result();
      receiveBase(result, "CreateReferenceCSVFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CreateReferenceCSVFile failed: unknown result");
    }

    public void UpdateReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_UpdateReferenceCSVFile(authentication, configuration, fileDescriptor);
      recv_UpdateReferenceCSVFile();
    }

    public void send_UpdateReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor) throws org.apache.thrift.TException
    {
      UpdateReferenceCSVFile_args args = new UpdateReferenceCSVFile_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setFileDescriptor(fileDescriptor);
      sendBase("UpdateReferenceCSVFile", args);
    }

    public void recv_UpdateReferenceCSVFile() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      UpdateReferenceCSVFile_result result = new UpdateReferenceCSVFile_result();
      receiveBase(result, "UpdateReferenceCSVFile");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void DeleteReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_DeleteReferenceCSVFile(authentication, configuration, fileDescriptor);
      recv_DeleteReferenceCSVFile();
    }

    public void send_DeleteReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor) throws org.apache.thrift.TException
    {
      DeleteReferenceCSVFile_args args = new DeleteReferenceCSVFile_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setFileDescriptor(fileDescriptor);
      sendBase("DeleteReferenceCSVFile", args);
    }

    public void recv_DeleteReferenceCSVFile() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      DeleteReferenceCSVFile_result result = new DeleteReferenceCSVFile_result();
      receiveBase(result, "DeleteReferenceCSVFile");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public List<ReferenceCSVFileDescriptor> GetAllReferenceCSVFiles(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetAllReferenceCSVFiles(authentication, configuration);
      return recv_GetAllReferenceCSVFiles();
    }

    public void send_GetAllReferenceCSVFiles(Authentication authentication, ConfigurationVersion configuration) throws org.apache.thrift.TException
    {
      GetAllReferenceCSVFiles_args args = new GetAllReferenceCSVFiles_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      sendBase("GetAllReferenceCSVFiles", args);
    }

    public List<ReferenceCSVFileDescriptor> recv_GetAllReferenceCSVFiles() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetAllReferenceCSVFiles_result result = new GetAllReferenceCSVFiles_result();
      receiveBase(result, "GetAllReferenceCSVFiles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAllReferenceCSVFiles failed: unknown result");
    }

    public void CreateFieldsFromReferenceCSVFile(Authentication authentication, ConfigurationVersion configurationVersion, String fieldsConfigurationXML) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_CreateFieldsFromReferenceCSVFile(authentication, configurationVersion, fieldsConfigurationXML);
      recv_CreateFieldsFromReferenceCSVFile();
    }

    public void send_CreateFieldsFromReferenceCSVFile(Authentication authentication, ConfigurationVersion configurationVersion, String fieldsConfigurationXML) throws org.apache.thrift.TException
    {
      CreateFieldsFromReferenceCSVFile_args args = new CreateFieldsFromReferenceCSVFile_args();
      args.setAuthentication(authentication);
      args.setConfigurationVersion(configurationVersion);
      args.setFieldsConfigurationXML(fieldsConfigurationXML);
      sendBase("CreateFieldsFromReferenceCSVFile", args);
    }

    public void recv_CreateFieldsFromReferenceCSVFile() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      CreateFieldsFromReferenceCSVFile_result result = new CreateFieldsFromReferenceCSVFile_result();
      receiveBase(result, "CreateFieldsFromReferenceCSVFile");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Map<String,Scheduling> GetSchedulings(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetSchedulings(authentication, configuration);
      return recv_GetSchedulings();
    }

    public void send_GetSchedulings(Authentication authentication, ConfigurationVersion configuration) throws org.apache.thrift.TException
    {
      GetSchedulings_args args = new GetSchedulings_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      sendBase("GetSchedulings", args);
    }

    public Map<String,Scheduling> recv_GetSchedulings() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetSchedulings_result result = new GetSchedulings_result();
      receiveBase(result, "GetSchedulings");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetSchedulings failed: unknown result");
    }

    public void CreateScheduling(Authentication authentication, ConfigurationVersion configuration, String schedulingId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_CreateScheduling(authentication, configuration, schedulingId);
      recv_CreateScheduling();
    }

    public void send_CreateScheduling(Authentication authentication, ConfigurationVersion configuration, String schedulingId) throws org.apache.thrift.TException
    {
      CreateScheduling_args args = new CreateScheduling_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setSchedulingId(schedulingId);
      sendBase("CreateScheduling", args);
    }

    public void recv_CreateScheduling() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      CreateScheduling_result result = new CreateScheduling_result();
      receiveBase(result, "CreateScheduling");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void UpdateScheduling(Authentication authentication, ConfigurationVersion configuration, Scheduling scheduling) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_UpdateScheduling(authentication, configuration, scheduling);
      recv_UpdateScheduling();
    }

    public void send_UpdateScheduling(Authentication authentication, ConfigurationVersion configuration, Scheduling scheduling) throws org.apache.thrift.TException
    {
      UpdateScheduling_args args = new UpdateScheduling_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setScheduling(scheduling);
      sendBase("UpdateScheduling", args);
    }

    public void recv_UpdateScheduling() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      UpdateScheduling_result result = new UpdateScheduling_result();
      receiveBase(result, "UpdateScheduling");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void DeleteScheduling(Authentication authentication, ConfigurationVersion configuration, String schedulingId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_DeleteScheduling(authentication, configuration, schedulingId);
      recv_DeleteScheduling();
    }

    public void send_DeleteScheduling(Authentication authentication, ConfigurationVersion configuration, String schedulingId) throws org.apache.thrift.TException
    {
      DeleteScheduling_args args = new DeleteScheduling_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setSchedulingId(schedulingId);
      sendBase("DeleteScheduling", args);
    }

    public void recv_DeleteScheduling() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      DeleteScheduling_result result = new DeleteScheduling_result();
      receiveBase(result, "DeleteScheduling");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void RunScheduling(Authentication authentication, ConfigurationVersion configuration, SchedulingExecutionParameters parameters) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_RunScheduling(authentication, configuration, parameters);
      recv_RunScheduling();
    }

    public void send_RunScheduling(Authentication authentication, ConfigurationVersion configuration, SchedulingExecutionParameters parameters) throws org.apache.thrift.TException
    {
      RunScheduling_args args = new RunScheduling_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setParameters(parameters);
      sendBase("RunScheduling", args);
    }

    public void recv_RunScheduling() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      RunScheduling_result result = new RunScheduling_result();
      receiveBase(result, "RunScheduling");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Map<String,RecommendationBlock> GetRecommendationBlocks(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetRecommendationBlocks(authentication, configuration);
      return recv_GetRecommendationBlocks();
    }

    public void send_GetRecommendationBlocks(Authentication authentication, ConfigurationVersion configuration) throws org.apache.thrift.TException
    {
      GetRecommendationBlocks_args args = new GetRecommendationBlocks_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      sendBase("GetRecommendationBlocks", args);
    }

    public Map<String,RecommendationBlock> recv_GetRecommendationBlocks() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetRecommendationBlocks_result result = new GetRecommendationBlocks_result();
      receiveBase(result, "GetRecommendationBlocks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetRecommendationBlocks failed: unknown result");
    }

    public void CreateRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, String recommendationBlockId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_CreateRecommendationBlock(authentication, configuration, recommendationBlockId);
      recv_CreateRecommendationBlock();
    }

    public void send_CreateRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, String recommendationBlockId) throws org.apache.thrift.TException
    {
      CreateRecommendationBlock_args args = new CreateRecommendationBlock_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setRecommendationBlockId(recommendationBlockId);
      sendBase("CreateRecommendationBlock", args);
    }

    public void recv_CreateRecommendationBlock() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      CreateRecommendationBlock_result result = new CreateRecommendationBlock_result();
      receiveBase(result, "CreateRecommendationBlock");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void UpdateRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, RecommendationBlock recommendationBlock) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_UpdateRecommendationBlock(authentication, configuration, recommendationBlock);
      recv_UpdateRecommendationBlock();
    }

    public void send_UpdateRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, RecommendationBlock recommendationBlock) throws org.apache.thrift.TException
    {
      UpdateRecommendationBlock_args args = new UpdateRecommendationBlock_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setRecommendationBlock(recommendationBlock);
      sendBase("UpdateRecommendationBlock", args);
    }

    public void recv_UpdateRecommendationBlock() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      UpdateRecommendationBlock_result result = new UpdateRecommendationBlock_result();
      receiveBase(result, "UpdateRecommendationBlock");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void DeleteRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, String recommendationBlockId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_DeleteRecommendationBlock(authentication, configuration, recommendationBlockId);
      recv_DeleteRecommendationBlock();
    }

    public void send_DeleteRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, String recommendationBlockId) throws org.apache.thrift.TException
    {
      DeleteRecommendationBlock_args args = new DeleteRecommendationBlock_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setRecommendationBlockId(recommendationBlockId);
      sendBase("DeleteRecommendationBlock", args);
    }

    public void recv_DeleteRecommendationBlock() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      DeleteRecommendationBlock_result result = new DeleteRecommendationBlock_result();
      receiveBase(result, "DeleteRecommendationBlock");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Map<String,DataSource> GetDataSources(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetDataSources(authentication, configuration);
      return recv_GetDataSources();
    }

    public void send_GetDataSources(Authentication authentication, ConfigurationVersion configuration) throws org.apache.thrift.TException
    {
      GetDataSources_args args = new GetDataSources_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      sendBase("GetDataSources", args);
    }

    public Map<String,DataSource> recv_GetDataSources() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetDataSources_result result = new GetDataSources_result();
      receiveBase(result, "GetDataSources");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetDataSources failed: unknown result");
    }

    public void CreateDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_CreateDataSource(authentication, configuration, dataSourceId);
      recv_CreateDataSource();
    }

    public void send_CreateDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId) throws org.apache.thrift.TException
    {
      CreateDataSource_args args = new CreateDataSource_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setDataSourceId(dataSourceId);
      sendBase("CreateDataSource", args);
    }

    public void recv_CreateDataSource() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      CreateDataSource_result result = new CreateDataSource_result();
      receiveBase(result, "CreateDataSource");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void UpdateDataSource(Authentication authentication, ConfigurationVersion configuration, DataSource dataSource) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_UpdateDataSource(authentication, configuration, dataSource);
      recv_UpdateDataSource();
    }

    public void send_UpdateDataSource(Authentication authentication, ConfigurationVersion configuration, DataSource dataSource) throws org.apache.thrift.TException
    {
      UpdateDataSource_args args = new UpdateDataSource_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setDataSource(dataSource);
      sendBase("UpdateDataSource", args);
    }

    public void recv_UpdateDataSource() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      UpdateDataSource_result result = new UpdateDataSource_result();
      receiveBase(result, "UpdateDataSource");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void DeleteDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_DeleteDataSource(authentication, configuration, dataSourceId);
      recv_DeleteDataSource();
    }

    public void send_DeleteDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId) throws org.apache.thrift.TException
    {
      DeleteDataSource_args args = new DeleteDataSource_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setDataSourceId(dataSourceId);
      sendBase("DeleteDataSource", args);
    }

    public void recv_DeleteDataSource() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      DeleteDataSource_result result = new DeleteDataSource_result();
      receiveBase(result, "DeleteDataSource");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Map<String,DataExport> GetDataExports(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetDataExports(authentication, configuration);
      return recv_GetDataExports();
    }

    public void send_GetDataExports(Authentication authentication, ConfigurationVersion configuration) throws org.apache.thrift.TException
    {
      GetDataExports_args args = new GetDataExports_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      sendBase("GetDataExports", args);
    }

    public Map<String,DataExport> recv_GetDataExports() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetDataExports_result result = new GetDataExports_result();
      receiveBase(result, "GetDataExports");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetDataExports failed: unknown result");
    }

    public void CreateDataExport(Authentication authentication, ConfigurationVersion configuration, String dataExportId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_CreateDataExport(authentication, configuration, dataExportId);
      recv_CreateDataExport();
    }

    public void send_CreateDataExport(Authentication authentication, ConfigurationVersion configuration, String dataExportId) throws org.apache.thrift.TException
    {
      CreateDataExport_args args = new CreateDataExport_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setDataExportId(dataExportId);
      sendBase("CreateDataExport", args);
    }

    public void recv_CreateDataExport() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      CreateDataExport_result result = new CreateDataExport_result();
      receiveBase(result, "CreateDataExport");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void UpdateDataExport(Authentication authentication, ConfigurationVersion configuration, DataExport dataExport) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_UpdateDataExport(authentication, configuration, dataExport);
      recv_UpdateDataExport();
    }

    public void send_UpdateDataExport(Authentication authentication, ConfigurationVersion configuration, DataExport dataExport) throws org.apache.thrift.TException
    {
      UpdateDataExport_args args = new UpdateDataExport_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setDataExport(dataExport);
      sendBase("UpdateDataExport", args);
    }

    public void recv_UpdateDataExport() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      UpdateDataExport_result result = new UpdateDataExport_result();
      receiveBase(result, "UpdateDataExport");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void DeleteDataExport(Authentication authentication, ConfigurationVersion configuration, String dataExportId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_DeleteDataExport(authentication, configuration, dataExportId);
      recv_DeleteDataExport();
    }

    public void send_DeleteDataExport(Authentication authentication, ConfigurationVersion configuration, String dataExportId) throws org.apache.thrift.TException
    {
      DeleteDataExport_args args = new DeleteDataExport_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setDataExportId(dataExportId);
      sendBase("DeleteDataExport", args);
    }

    public void recv_DeleteDataExport() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      DeleteDataExport_result result = new DeleteDataExport_result();
      receiveBase(result, "DeleteDataExport");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Map<String,ReferenceCSVDataSource> GetReferenceCSVFileDataSources(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetReferenceCSVFileDataSources(authentication, configuration);
      return recv_GetReferenceCSVFileDataSources();
    }

    public void send_GetReferenceCSVFileDataSources(Authentication authentication, ConfigurationVersion configuration) throws org.apache.thrift.TException
    {
      GetReferenceCSVFileDataSources_args args = new GetReferenceCSVFileDataSources_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      sendBase("GetReferenceCSVFileDataSources", args);
    }

    public Map<String,ReferenceCSVDataSource> recv_GetReferenceCSVFileDataSources() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetReferenceCSVFileDataSources_result result = new GetReferenceCSVFileDataSources_result();
      receiveBase(result, "GetReferenceCSVFileDataSources");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetReferenceCSVFileDataSources failed: unknown result");
    }

    public void CreateReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_CreateReferenceCSVDataSource(authentication, configuration, dataSourceId);
      recv_CreateReferenceCSVDataSource();
    }

    public void send_CreateReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId) throws org.apache.thrift.TException
    {
      CreateReferenceCSVDataSource_args args = new CreateReferenceCSVDataSource_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setDataSourceId(dataSourceId);
      sendBase("CreateReferenceCSVDataSource", args);
    }

    public void recv_CreateReferenceCSVDataSource() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      CreateReferenceCSVDataSource_result result = new CreateReferenceCSVDataSource_result();
      receiveBase(result, "CreateReferenceCSVDataSource");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void UpdateReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVDataSource dataSource) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_UpdateReferenceCSVDataSource(authentication, configuration, dataSource);
      recv_UpdateReferenceCSVDataSource();
    }

    public void send_UpdateReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVDataSource dataSource) throws org.apache.thrift.TException
    {
      UpdateReferenceCSVDataSource_args args = new UpdateReferenceCSVDataSource_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setDataSource(dataSource);
      sendBase("UpdateReferenceCSVDataSource", args);
    }

    public void recv_UpdateReferenceCSVDataSource() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      UpdateReferenceCSVDataSource_result result = new UpdateReferenceCSVDataSource_result();
      receiveBase(result, "UpdateReferenceCSVDataSource");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void DeleteReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_DeleteReferenceCSVDataSource(authentication, configuration, dataSourceId);
      recv_DeleteReferenceCSVDataSource();
    }

    public void send_DeleteReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId) throws org.apache.thrift.TException
    {
      DeleteReferenceCSVDataSource_args args = new DeleteReferenceCSVDataSource_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setDataSourceId(dataSourceId);
      sendBase("DeleteReferenceCSVDataSource", args);
    }

    public void recv_DeleteReferenceCSVDataSource() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      DeleteReferenceCSVDataSource_result result = new DeleteReferenceCSVDataSource_result();
      receiveBase(result, "DeleteReferenceCSVDataSource");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public String GetLastTransactionID(Authentication authentication, ConfigurationVersion configuration) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetLastTransactionID(authentication, configuration);
      return recv_GetLastTransactionID();
    }

    public void send_GetLastTransactionID(Authentication authentication, ConfigurationVersion configuration) throws org.apache.thrift.TException
    {
      GetLastTransactionID_args args = new GetLastTransactionID_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      sendBase("GetLastTransactionID", args);
    }

    public String recv_GetLastTransactionID() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetLastTransactionID_result result = new GetLastTransactionID_result();
      receiveBase(result, "GetLastTransactionID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetLastTransactionID failed: unknown result");
    }

    public List<TimeRangeValue> GetPageViews(Authentication authentication, ConfigurationVersion configuration, TimeRange range, TimeRangePrecision precision) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetPageViews(authentication, configuration, range, precision);
      return recv_GetPageViews();
    }

    public void send_GetPageViews(Authentication authentication, ConfigurationVersion configuration, TimeRange range, TimeRangePrecision precision) throws org.apache.thrift.TException
    {
      GetPageViews_args args = new GetPageViews_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setRange(range);
      args.setPrecision(precision);
      sendBase("GetPageViews", args);
    }

    public List<TimeRangeValue> recv_GetPageViews() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetPageViews_result result = new GetPageViews_result();
      receiveBase(result, "GetPageViews");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetPageViews failed: unknown result");
    }

    public ChoiceReport GetChoiceReport(Authentication authentication, ConfigurationVersion configuration, ChoiceReportRequest request) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetChoiceReport(authentication, configuration, request);
      return recv_GetChoiceReport();
    }

    public void send_GetChoiceReport(Authentication authentication, ConfigurationVersion configuration, ChoiceReportRequest request) throws org.apache.thrift.TException
    {
      GetChoiceReport_args args = new GetChoiceReport_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setRequest(request);
      sendBase("GetChoiceReport", args);
    }

    public ChoiceReport recv_GetChoiceReport() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetChoiceReport_result result = new GetChoiceReport_result();
      receiveBase(result, "GetChoiceReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetChoiceReport failed: unknown result");
    }

    public TransactionReport GetTransactionReport(Authentication authentication, ConfigurationVersion configuration, TransactionReportRequest request) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetTransactionReport(authentication, configuration, request);
      return recv_GetTransactionReport();
    }

    public void send_GetTransactionReport(Authentication authentication, ConfigurationVersion configuration, TransactionReportRequest request) throws org.apache.thrift.TException
    {
      GetTransactionReport_args args = new GetTransactionReport_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setRequest(request);
      sendBase("GetTransactionReport", args);
    }

    public TransactionReport recv_GetTransactionReport() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetTransactionReport_result result = new GetTransactionReport_result();
      receiveBase(result, "GetTransactionReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetTransactionReport failed: unknown result");
    }

    public BehaviorReport GetBehaviorReport(Authentication authentication, ConfigurationVersion configuration, BehaviorReportRequest request) throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      send_GetBehaviorReport(authentication, configuration, request);
      return recv_GetBehaviorReport();
    }

    public void send_GetBehaviorReport(Authentication authentication, ConfigurationVersion configuration, BehaviorReportRequest request) throws org.apache.thrift.TException
    {
      GetBehaviorReport_args args = new GetBehaviorReport_args();
      args.setAuthentication(authentication);
      args.setConfiguration(configuration);
      args.setRequest(request);
      sendBase("GetBehaviorReport", args);
    }

    public BehaviorReport recv_GetBehaviorReport() throws DataIntelligenceServiceException, org.apache.thrift.TException
    {
      GetBehaviorReport_result result = new GetBehaviorReport_result();
      receiveBase(result, "GetBehaviorReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetBehaviorReport failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void GetAuthentication(AuthenticationRequest authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAuthentication_call method_call = new GetAuthentication_call(authentication, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAuthentication_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AuthenticationRequest authentication;
      public GetAuthentication_call(AuthenticationRequest authentication, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAuthentication", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAuthentication_args args = new GetAuthentication_args();
        args.setAuthentication(authentication);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Authentication getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAuthentication();
      }
    }

    public void UpdatePassword(Authentication authentication, String newPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdatePassword_call method_call = new UpdatePassword_call(authentication, newPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdatePassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private String newPassword;
      public UpdatePassword_call(Authentication authentication, String newPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.newPassword = newPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdatePassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdatePassword_args args = new UpdatePassword_args();
        args.setAuthentication(authentication);
        args.setNewPassword(newPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdatePassword();
      }
    }

    public void GetConfigurationVersion(Authentication authentication, ConfigurationVersionType versionType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetConfigurationVersion_call method_call = new GetConfigurationVersion_call(authentication, versionType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetConfigurationVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersionType versionType;
      public GetConfigurationVersion_call(Authentication authentication, ConfigurationVersionType versionType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.versionType = versionType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetConfigurationVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetConfigurationVersion_args args = new GetConfigurationVersion_args();
        args.setAuthentication(authentication);
        args.setVersionType(versionType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ConfigurationVersion getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetConfigurationVersion();
      }
    }

    public void SetDataSourcesConfiguration(Authentication authentication, ConfigurationVersion configurationVersion, String dataSourcesConfigurationXML, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SetDataSourcesConfiguration_call method_call = new SetDataSourcesConfiguration_call(authentication, configurationVersion, dataSourcesConfigurationXML, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SetDataSourcesConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configurationVersion;
      private String dataSourcesConfigurationXML;
      public SetDataSourcesConfiguration_call(Authentication authentication, ConfigurationVersion configurationVersion, String dataSourcesConfigurationXML, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configurationVersion = configurationVersion;
        this.dataSourcesConfigurationXML = dataSourcesConfigurationXML;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SetDataSourcesConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        SetDataSourcesConfiguration_args args = new SetDataSourcesConfiguration_args();
        args.setAuthentication(authentication);
        args.setConfigurationVersion(configurationVersion);
        args.setDataSourcesConfigurationXML(dataSourcesConfigurationXML);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_SetDataSourcesConfiguration();
      }
    }

    public void GetFields(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetFields_call method_call = new GetFields_call(authentication, configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetFields_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      public GetFields_call(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetFields", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetFields_args args = new GetFields_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Field> getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetFields();
      }
    }

    public void CreateField(Authentication authentication, ConfigurationVersion configuration, String fieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateField_call method_call = new CreateField_call(authentication, configuration, fieldId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateField_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String fieldId;
      public CreateField_call(Authentication authentication, ConfigurationVersion configuration, String fieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.fieldId = fieldId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateField", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateField_args args = new CreateField_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setFieldId(fieldId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateField();
      }
    }

    public void UpdateField(Authentication authentication, ConfigurationVersion configuration, Field field, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateField_call method_call = new UpdateField_call(authentication, configuration, field, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateField_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private Field field;
      public UpdateField_call(Authentication authentication, ConfigurationVersion configuration, Field field, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.field = field;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateField", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateField_args args = new UpdateField_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setField(field);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateField();
      }
    }

    public void DeleteField(Authentication authentication, ConfigurationVersion configuration, String fieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteField_call method_call = new DeleteField_call(authentication, configuration, fieldId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteField_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String fieldId;
      public DeleteField_call(Authentication authentication, ConfigurationVersion configuration, String fieldId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.fieldId = fieldId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteField", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteField_args args = new DeleteField_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setFieldId(fieldId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteField();
      }
    }

    public void GetProcessTasks(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetProcessTasks_call method_call = new GetProcessTasks_call(authentication, configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetProcessTasks_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      public GetProcessTasks_call(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetProcessTasks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetProcessTasks_args args = new GetProcessTasks_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,ProcessTask> getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetProcessTasks();
      }
    }

    public void CreateProcessTask(Authentication authentication, ConfigurationVersion configuration, String processTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateProcessTask_call method_call = new CreateProcessTask_call(authentication, configuration, processTaskId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateProcessTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String processTaskId;
      public CreateProcessTask_call(Authentication authentication, ConfigurationVersion configuration, String processTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.processTaskId = processTaskId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateProcessTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateProcessTask_args args = new CreateProcessTask_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setProcessTaskId(processTaskId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateProcessTask();
      }
    }

    public void UpdateProcessTask(Authentication authentication, ConfigurationVersion configuration, ProcessTask processTask, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateProcessTask_call method_call = new UpdateProcessTask_call(authentication, configuration, processTask, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateProcessTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private ProcessTask processTask;
      public UpdateProcessTask_call(Authentication authentication, ConfigurationVersion configuration, ProcessTask processTask, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.processTask = processTask;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateProcessTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateProcessTask_args args = new UpdateProcessTask_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setProcessTask(processTask);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateProcessTask();
      }
    }

    public void DeleteProcessTask(Authentication authentication, ConfigurationVersion configuration, String processTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteProcessTask_call method_call = new DeleteProcessTask_call(authentication, configuration, processTaskId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteProcessTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String processTaskId;
      public DeleteProcessTask_call(Authentication authentication, ConfigurationVersion configuration, String processTaskId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.processTaskId = processTaskId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteProcessTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteProcessTask_args args = new DeleteProcessTask_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setProcessTaskId(processTaskId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteProcessTask();
      }
    }

    public void RunProcessTask(Authentication authentication, ConfigurationVersion configuration, ProcessTaskExecutionParameters parameters, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RunProcessTask_call method_call = new RunProcessTask_call(authentication, configuration, parameters, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RunProcessTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private ProcessTaskExecutionParameters parameters;
      public RunProcessTask_call(Authentication authentication, ConfigurationVersion configuration, ProcessTaskExecutionParameters parameters, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.parameters = parameters;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RunProcessTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RunProcessTask_args args = new RunProcessTask_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setParameters(parameters);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RunProcessTask();
      }
    }

    public void GetEmailCampaigns(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetEmailCampaigns_call method_call = new GetEmailCampaigns_call(authentication, configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetEmailCampaigns_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      public GetEmailCampaigns_call(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetEmailCampaigns", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetEmailCampaigns_args args = new GetEmailCampaigns_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,EmailCampaign> getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetEmailCampaigns();
      }
    }

    public void CreateEmailCampaign(Authentication authentication, ConfigurationVersion configuration, String emailCampaignId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateEmailCampaign_call method_call = new CreateEmailCampaign_call(authentication, configuration, emailCampaignId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateEmailCampaign_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String emailCampaignId;
      public CreateEmailCampaign_call(Authentication authentication, ConfigurationVersion configuration, String emailCampaignId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.emailCampaignId = emailCampaignId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateEmailCampaign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateEmailCampaign_args args = new CreateEmailCampaign_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setEmailCampaignId(emailCampaignId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateEmailCampaign();
      }
    }

    public void UpdateEmailCampaign(Authentication authentication, ConfigurationVersion configuration, EmailCampaign emailCampaign, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateEmailCampaign_call method_call = new UpdateEmailCampaign_call(authentication, configuration, emailCampaign, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateEmailCampaign_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private EmailCampaign emailCampaign;
      public UpdateEmailCampaign_call(Authentication authentication, ConfigurationVersion configuration, EmailCampaign emailCampaign, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.emailCampaign = emailCampaign;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateEmailCampaign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateEmailCampaign_args args = new UpdateEmailCampaign_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setEmailCampaign(emailCampaign);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateEmailCampaign();
      }
    }

    public void DeleteEmailCampaign(Authentication authentication, ConfigurationVersion configuration, String emailCampaignId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteEmailCampaign_call method_call = new DeleteEmailCampaign_call(authentication, configuration, emailCampaignId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteEmailCampaign_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String emailCampaignId;
      public DeleteEmailCampaign_call(Authentication authentication, ConfigurationVersion configuration, String emailCampaignId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.emailCampaignId = emailCampaignId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteEmailCampaign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteEmailCampaign_args args = new DeleteEmailCampaign_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setEmailCampaignId(emailCampaignId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteEmailCampaign();
      }
    }

    public void GetChoices(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetChoices_call method_call = new GetChoices_call(authentication, configuration, choiceSourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetChoices_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String choiceSourceId;
      public GetChoices_call(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.choiceSourceId = choiceSourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetChoices", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetChoices_args args = new GetChoices_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setChoiceSourceId(choiceSourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Choice> getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetChoices();
      }
    }

    public void CreateChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateChoice_call method_call = new CreateChoice_call(authentication, configuration, choiceSourceId, choiceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateChoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String choiceSourceId;
      private String choiceId;
      public CreateChoice_call(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.choiceSourceId = choiceSourceId;
        this.choiceId = choiceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateChoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateChoice_args args = new CreateChoice_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setChoiceSourceId(choiceSourceId);
        args.setChoiceId(choiceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateChoice();
      }
    }

    public void UpdateChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, Choice choice, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateChoice_call method_call = new UpdateChoice_call(authentication, configuration, choiceSourceId, choice, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateChoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String choiceSourceId;
      private Choice choice;
      public UpdateChoice_call(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, Choice choice, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.choiceSourceId = choiceSourceId;
        this.choice = choice;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateChoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateChoice_args args = new UpdateChoice_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setChoiceSourceId(choiceSourceId);
        args.setChoice(choice);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateChoice();
      }
    }

    public void DeleteChoice(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteChoice_call method_call = new DeleteChoice_call(authentication, configuration, choiceSourceId, choiceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteChoice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String choiceSourceId;
      private String choiceId;
      public DeleteChoice_call(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.choiceSourceId = choiceSourceId;
        this.choiceId = choiceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteChoice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteChoice_args args = new DeleteChoice_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setChoiceSourceId(choiceSourceId);
        args.setChoiceId(choiceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteChoice();
      }
    }

    public void GetChoiceVariants(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetChoiceVariants_call method_call = new GetChoiceVariants_call(authentication, configuration, choiceSourceId, choiceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetChoiceVariants_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String choiceSourceId;
      private String choiceId;
      public GetChoiceVariants_call(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.choiceSourceId = choiceSourceId;
        this.choiceId = choiceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetChoiceVariants", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetChoiceVariants_args args = new GetChoiceVariants_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setChoiceSourceId(choiceSourceId);
        args.setChoiceId(choiceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,ChoiceVariant> getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetChoiceVariants();
      }
    }

    public void CreateChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, String choiceVariantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateChoiceVariant_call method_call = new CreateChoiceVariant_call(authentication, configuration, choiceSourceId, choiceId, choiceVariantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateChoiceVariant_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String choiceSourceId;
      private String choiceId;
      private String choiceVariantId;
      public CreateChoiceVariant_call(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, String choiceVariantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.choiceSourceId = choiceSourceId;
        this.choiceId = choiceId;
        this.choiceVariantId = choiceVariantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateChoiceVariant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateChoiceVariant_args args = new CreateChoiceVariant_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setChoiceSourceId(choiceSourceId);
        args.setChoiceId(choiceId);
        args.setChoiceVariantId(choiceVariantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateChoiceVariant();
      }
    }

    public void UpdateChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, ChoiceVariant choiceVariant, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateChoiceVariant_call method_call = new UpdateChoiceVariant_call(authentication, configuration, choiceSourceId, choiceVariant, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateChoiceVariant_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String choiceSourceId;
      private ChoiceVariant choiceVariant;
      public UpdateChoiceVariant_call(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, ChoiceVariant choiceVariant, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.choiceSourceId = choiceSourceId;
        this.choiceVariant = choiceVariant;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateChoiceVariant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateChoiceVariant_args args = new UpdateChoiceVariant_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setChoiceSourceId(choiceSourceId);
        args.setChoiceVariant(choiceVariant);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateChoiceVariant();
      }
    }

    public void DeleteChoiceVariant(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, String choiceVariantId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteChoiceVariant_call method_call = new DeleteChoiceVariant_call(authentication, configuration, choiceSourceId, choiceId, choiceVariantId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteChoiceVariant_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String choiceSourceId;
      private String choiceId;
      private String choiceVariantId;
      public DeleteChoiceVariant_call(Authentication authentication, ConfigurationVersion configuration, String choiceSourceId, String choiceId, String choiceVariantId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.choiceSourceId = choiceSourceId;
        this.choiceId = choiceId;
        this.choiceVariantId = choiceVariantId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteChoiceVariant", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteChoiceVariant_args args = new DeleteChoiceVariant_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setChoiceSourceId(choiceSourceId);
        args.setChoiceId(choiceId);
        args.setChoiceVariantId(choiceVariantId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteChoiceVariant();
      }
    }

    public void GetProcessStatus(Authentication authentication, ConfigurationVersion configuration, String processTaskExecutionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetProcessStatus_call method_call = new GetProcessStatus_call(authentication, configuration, processTaskExecutionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetProcessStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String processTaskExecutionId;
      public GetProcessStatus_call(Authentication authentication, ConfigurationVersion configuration, String processTaskExecutionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.processTaskExecutionId = processTaskExecutionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetProcessStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetProcessStatus_args args = new GetProcessStatus_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setProcessTaskExecutionId(processTaskExecutionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProcessTaskExecutionStatus getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetProcessStatus();
      }
    }

    public void GetConfigurationDifferences(Authentication authentication, ConfigurationVersion configurationVersionSource, ConfigurationVersion configurationVersionDestination, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetConfigurationDifferences_call method_call = new GetConfigurationDifferences_call(authentication, configurationVersionSource, configurationVersionDestination, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetConfigurationDifferences_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configurationVersionSource;
      private ConfigurationVersion configurationVersionDestination;
      public GetConfigurationDifferences_call(Authentication authentication, ConfigurationVersion configurationVersionSource, ConfigurationVersion configurationVersionDestination, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configurationVersionSource = configurationVersionSource;
        this.configurationVersionDestination = configurationVersionDestination;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetConfigurationDifferences", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetConfigurationDifferences_args args = new GetConfigurationDifferences_args();
        args.setAuthentication(authentication);
        args.setConfigurationVersionSource(configurationVersionSource);
        args.setConfigurationVersionDestination(configurationVersionDestination);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ConfigurationDifference> getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetConfigurationDifferences();
      }
    }

    public void PublishConfiguration(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      PublishConfiguration_call method_call = new PublishConfiguration_call(authentication, configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class PublishConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      public PublishConfiguration_call(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("PublishConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        PublishConfiguration_args args = new PublishConfiguration_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_PublishConfiguration();
      }
    }

    public void CloneConfiguration(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CloneConfiguration_call method_call = new CloneConfiguration_call(authentication, configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CloneConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      public CloneConfiguration_call(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CloneConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CloneConfiguration_args args = new CloneConfiguration_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CloneConfiguration();
      }
    }

    public void CreateReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateReferenceCSVFile_call method_call = new CreateReferenceCSVFile_call(authentication, configuration, fileDescriptor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateReferenceCSVFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private ReferenceCSVFileDescriptor fileDescriptor;
      public CreateReferenceCSVFile_call(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.fileDescriptor = fileDescriptor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateReferenceCSVFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateReferenceCSVFile_args args = new CreateReferenceCSVFile_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setFileDescriptor(fileDescriptor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReferenceCSVFileDescriptor getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CreateReferenceCSVFile();
      }
    }

    public void UpdateReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateReferenceCSVFile_call method_call = new UpdateReferenceCSVFile_call(authentication, configuration, fileDescriptor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateReferenceCSVFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private ReferenceCSVFileDescriptor fileDescriptor;
      public UpdateReferenceCSVFile_call(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.fileDescriptor = fileDescriptor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateReferenceCSVFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateReferenceCSVFile_args args = new UpdateReferenceCSVFile_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setFileDescriptor(fileDescriptor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateReferenceCSVFile();
      }
    }

    public void DeleteReferenceCSVFile(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteReferenceCSVFile_call method_call = new DeleteReferenceCSVFile_call(authentication, configuration, fileDescriptor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteReferenceCSVFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private ReferenceCSVFileDescriptor fileDescriptor;
      public DeleteReferenceCSVFile_call(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVFileDescriptor fileDescriptor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.fileDescriptor = fileDescriptor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteReferenceCSVFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteReferenceCSVFile_args args = new DeleteReferenceCSVFile_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setFileDescriptor(fileDescriptor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteReferenceCSVFile();
      }
    }

    public void GetAllReferenceCSVFiles(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAllReferenceCSVFiles_call method_call = new GetAllReferenceCSVFiles_call(authentication, configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAllReferenceCSVFiles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      public GetAllReferenceCSVFiles_call(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAllReferenceCSVFiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAllReferenceCSVFiles_args args = new GetAllReferenceCSVFiles_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ReferenceCSVFileDescriptor> getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAllReferenceCSVFiles();
      }
    }

    public void CreateFieldsFromReferenceCSVFile(Authentication authentication, ConfigurationVersion configurationVersion, String fieldsConfigurationXML, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateFieldsFromReferenceCSVFile_call method_call = new CreateFieldsFromReferenceCSVFile_call(authentication, configurationVersion, fieldsConfigurationXML, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateFieldsFromReferenceCSVFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configurationVersion;
      private String fieldsConfigurationXML;
      public CreateFieldsFromReferenceCSVFile_call(Authentication authentication, ConfigurationVersion configurationVersion, String fieldsConfigurationXML, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configurationVersion = configurationVersion;
        this.fieldsConfigurationXML = fieldsConfigurationXML;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateFieldsFromReferenceCSVFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateFieldsFromReferenceCSVFile_args args = new CreateFieldsFromReferenceCSVFile_args();
        args.setAuthentication(authentication);
        args.setConfigurationVersion(configurationVersion);
        args.setFieldsConfigurationXML(fieldsConfigurationXML);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateFieldsFromReferenceCSVFile();
      }
    }

    public void GetSchedulings(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetSchedulings_call method_call = new GetSchedulings_call(authentication, configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetSchedulings_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      public GetSchedulings_call(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSchedulings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetSchedulings_args args = new GetSchedulings_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Scheduling> getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetSchedulings();
      }
    }

    public void CreateScheduling(Authentication authentication, ConfigurationVersion configuration, String schedulingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateScheduling_call method_call = new CreateScheduling_call(authentication, configuration, schedulingId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateScheduling_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String schedulingId;
      public CreateScheduling_call(Authentication authentication, ConfigurationVersion configuration, String schedulingId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.schedulingId = schedulingId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateScheduling", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateScheduling_args args = new CreateScheduling_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setSchedulingId(schedulingId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateScheduling();
      }
    }

    public void UpdateScheduling(Authentication authentication, ConfigurationVersion configuration, Scheduling scheduling, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateScheduling_call method_call = new UpdateScheduling_call(authentication, configuration, scheduling, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateScheduling_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private Scheduling scheduling;
      public UpdateScheduling_call(Authentication authentication, ConfigurationVersion configuration, Scheduling scheduling, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.scheduling = scheduling;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateScheduling", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateScheduling_args args = new UpdateScheduling_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setScheduling(scheduling);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateScheduling();
      }
    }

    public void DeleteScheduling(Authentication authentication, ConfigurationVersion configuration, String schedulingId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteScheduling_call method_call = new DeleteScheduling_call(authentication, configuration, schedulingId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteScheduling_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String schedulingId;
      public DeleteScheduling_call(Authentication authentication, ConfigurationVersion configuration, String schedulingId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.schedulingId = schedulingId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteScheduling", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteScheduling_args args = new DeleteScheduling_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setSchedulingId(schedulingId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteScheduling();
      }
    }

    public void RunScheduling(Authentication authentication, ConfigurationVersion configuration, SchedulingExecutionParameters parameters, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RunScheduling_call method_call = new RunScheduling_call(authentication, configuration, parameters, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RunScheduling_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private SchedulingExecutionParameters parameters;
      public RunScheduling_call(Authentication authentication, ConfigurationVersion configuration, SchedulingExecutionParameters parameters, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.parameters = parameters;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RunScheduling", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RunScheduling_args args = new RunScheduling_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setParameters(parameters);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_RunScheduling();
      }
    }

    public void GetRecommendationBlocks(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetRecommendationBlocks_call method_call = new GetRecommendationBlocks_call(authentication, configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetRecommendationBlocks_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      public GetRecommendationBlocks_call(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetRecommendationBlocks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetRecommendationBlocks_args args = new GetRecommendationBlocks_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,RecommendationBlock> getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetRecommendationBlocks();
      }
    }

    public void CreateRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, String recommendationBlockId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateRecommendationBlock_call method_call = new CreateRecommendationBlock_call(authentication, configuration, recommendationBlockId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateRecommendationBlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String recommendationBlockId;
      public CreateRecommendationBlock_call(Authentication authentication, ConfigurationVersion configuration, String recommendationBlockId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.recommendationBlockId = recommendationBlockId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateRecommendationBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateRecommendationBlock_args args = new CreateRecommendationBlock_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setRecommendationBlockId(recommendationBlockId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateRecommendationBlock();
      }
    }

    public void UpdateRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, RecommendationBlock recommendationBlock, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateRecommendationBlock_call method_call = new UpdateRecommendationBlock_call(authentication, configuration, recommendationBlock, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateRecommendationBlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private RecommendationBlock recommendationBlock;
      public UpdateRecommendationBlock_call(Authentication authentication, ConfigurationVersion configuration, RecommendationBlock recommendationBlock, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.recommendationBlock = recommendationBlock;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateRecommendationBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateRecommendationBlock_args args = new UpdateRecommendationBlock_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setRecommendationBlock(recommendationBlock);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateRecommendationBlock();
      }
    }

    public void DeleteRecommendationBlock(Authentication authentication, ConfigurationVersion configuration, String recommendationBlockId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteRecommendationBlock_call method_call = new DeleteRecommendationBlock_call(authentication, configuration, recommendationBlockId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteRecommendationBlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String recommendationBlockId;
      public DeleteRecommendationBlock_call(Authentication authentication, ConfigurationVersion configuration, String recommendationBlockId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.recommendationBlockId = recommendationBlockId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteRecommendationBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteRecommendationBlock_args args = new DeleteRecommendationBlock_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setRecommendationBlockId(recommendationBlockId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteRecommendationBlock();
      }
    }

    public void GetDataSources(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetDataSources_call method_call = new GetDataSources_call(authentication, configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetDataSources_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      public GetDataSources_call(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetDataSources", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetDataSources_args args = new GetDataSources_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,DataSource> getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetDataSources();
      }
    }

    public void CreateDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateDataSource_call method_call = new CreateDataSource_call(authentication, configuration, dataSourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateDataSource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String dataSourceId;
      public CreateDataSource_call(Authentication authentication, ConfigurationVersion configuration, String dataSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.dataSourceId = dataSourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateDataSource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateDataSource_args args = new CreateDataSource_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setDataSourceId(dataSourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateDataSource();
      }
    }

    public void UpdateDataSource(Authentication authentication, ConfigurationVersion configuration, DataSource dataSource, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateDataSource_call method_call = new UpdateDataSource_call(authentication, configuration, dataSource, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateDataSource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private DataSource dataSource;
      public UpdateDataSource_call(Authentication authentication, ConfigurationVersion configuration, DataSource dataSource, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.dataSource = dataSource;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateDataSource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateDataSource_args args = new UpdateDataSource_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setDataSource(dataSource);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateDataSource();
      }
    }

    public void DeleteDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteDataSource_call method_call = new DeleteDataSource_call(authentication, configuration, dataSourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteDataSource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String dataSourceId;
      public DeleteDataSource_call(Authentication authentication, ConfigurationVersion configuration, String dataSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.dataSourceId = dataSourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteDataSource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteDataSource_args args = new DeleteDataSource_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setDataSourceId(dataSourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteDataSource();
      }
    }

    public void GetDataExports(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetDataExports_call method_call = new GetDataExports_call(authentication, configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetDataExports_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      public GetDataExports_call(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetDataExports", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetDataExports_args args = new GetDataExports_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,DataExport> getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetDataExports();
      }
    }

    public void CreateDataExport(Authentication authentication, ConfigurationVersion configuration, String dataExportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateDataExport_call method_call = new CreateDataExport_call(authentication, configuration, dataExportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateDataExport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String dataExportId;
      public CreateDataExport_call(Authentication authentication, ConfigurationVersion configuration, String dataExportId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.dataExportId = dataExportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateDataExport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateDataExport_args args = new CreateDataExport_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setDataExportId(dataExportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateDataExport();
      }
    }

    public void UpdateDataExport(Authentication authentication, ConfigurationVersion configuration, DataExport dataExport, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateDataExport_call method_call = new UpdateDataExport_call(authentication, configuration, dataExport, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateDataExport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private DataExport dataExport;
      public UpdateDataExport_call(Authentication authentication, ConfigurationVersion configuration, DataExport dataExport, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.dataExport = dataExport;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateDataExport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateDataExport_args args = new UpdateDataExport_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setDataExport(dataExport);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateDataExport();
      }
    }

    public void DeleteDataExport(Authentication authentication, ConfigurationVersion configuration, String dataExportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteDataExport_call method_call = new DeleteDataExport_call(authentication, configuration, dataExportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteDataExport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String dataExportId;
      public DeleteDataExport_call(Authentication authentication, ConfigurationVersion configuration, String dataExportId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.dataExportId = dataExportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteDataExport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteDataExport_args args = new DeleteDataExport_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setDataExportId(dataExportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteDataExport();
      }
    }

    public void GetReferenceCSVFileDataSources(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetReferenceCSVFileDataSources_call method_call = new GetReferenceCSVFileDataSources_call(authentication, configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetReferenceCSVFileDataSources_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      public GetReferenceCSVFileDataSources_call(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetReferenceCSVFileDataSources", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetReferenceCSVFileDataSources_args args = new GetReferenceCSVFileDataSources_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,ReferenceCSVDataSource> getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetReferenceCSVFileDataSources();
      }
    }

    public void CreateReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateReferenceCSVDataSource_call method_call = new CreateReferenceCSVDataSource_call(authentication, configuration, dataSourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateReferenceCSVDataSource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String dataSourceId;
      public CreateReferenceCSVDataSource_call(Authentication authentication, ConfigurationVersion configuration, String dataSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.dataSourceId = dataSourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateReferenceCSVDataSource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateReferenceCSVDataSource_args args = new CreateReferenceCSVDataSource_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setDataSourceId(dataSourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateReferenceCSVDataSource();
      }
    }

    public void UpdateReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVDataSource dataSource, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateReferenceCSVDataSource_call method_call = new UpdateReferenceCSVDataSource_call(authentication, configuration, dataSource, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateReferenceCSVDataSource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private ReferenceCSVDataSource dataSource;
      public UpdateReferenceCSVDataSource_call(Authentication authentication, ConfigurationVersion configuration, ReferenceCSVDataSource dataSource, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.dataSource = dataSource;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateReferenceCSVDataSource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateReferenceCSVDataSource_args args = new UpdateReferenceCSVDataSource_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setDataSource(dataSource);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateReferenceCSVDataSource();
      }
    }

    public void DeleteReferenceCSVDataSource(Authentication authentication, ConfigurationVersion configuration, String dataSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteReferenceCSVDataSource_call method_call = new DeleteReferenceCSVDataSource_call(authentication, configuration, dataSourceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteReferenceCSVDataSource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private String dataSourceId;
      public DeleteReferenceCSVDataSource_call(Authentication authentication, ConfigurationVersion configuration, String dataSourceId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.dataSourceId = dataSourceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteReferenceCSVDataSource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteReferenceCSVDataSource_args args = new DeleteReferenceCSVDataSource_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setDataSourceId(dataSourceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteReferenceCSVDataSource();
      }
    }

    public void GetLastTransactionID(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetLastTransactionID_call method_call = new GetLastTransactionID_call(authentication, configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetLastTransactionID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      public GetLastTransactionID_call(Authentication authentication, ConfigurationVersion configuration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetLastTransactionID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetLastTransactionID_args args = new GetLastTransactionID_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetLastTransactionID();
      }
    }

    public void GetPageViews(Authentication authentication, ConfigurationVersion configuration, TimeRange range, TimeRangePrecision precision, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetPageViews_call method_call = new GetPageViews_call(authentication, configuration, range, precision, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetPageViews_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private TimeRange range;
      private TimeRangePrecision precision;
      public GetPageViews_call(Authentication authentication, ConfigurationVersion configuration, TimeRange range, TimeRangePrecision precision, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.range = range;
        this.precision = precision;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetPageViews", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetPageViews_args args = new GetPageViews_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setRange(range);
        args.setPrecision(precision);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TimeRangeValue> getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetPageViews();
      }
    }

    public void GetChoiceReport(Authentication authentication, ConfigurationVersion configuration, ChoiceReportRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetChoiceReport_call method_call = new GetChoiceReport_call(authentication, configuration, request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetChoiceReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private ChoiceReportRequest request;
      public GetChoiceReport_call(Authentication authentication, ConfigurationVersion configuration, ChoiceReportRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetChoiceReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetChoiceReport_args args = new GetChoiceReport_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChoiceReport getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetChoiceReport();
      }
    }

    public void GetTransactionReport(Authentication authentication, ConfigurationVersion configuration, TransactionReportRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetTransactionReport_call method_call = new GetTransactionReport_call(authentication, configuration, request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetTransactionReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private TransactionReportRequest request;
      public GetTransactionReport_call(Authentication authentication, ConfigurationVersion configuration, TransactionReportRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetTransactionReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetTransactionReport_args args = new GetTransactionReport_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TransactionReport getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetTransactionReport();
      }
    }

    public void GetBehaviorReport(Authentication authentication, ConfigurationVersion configuration, BehaviorReportRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetBehaviorReport_call method_call = new GetBehaviorReport_call(authentication, configuration, request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetBehaviorReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Authentication authentication;
      private ConfigurationVersion configuration;
      private BehaviorReportRequest request;
      public GetBehaviorReport_call(Authentication authentication, ConfigurationVersion configuration, BehaviorReportRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.authentication = authentication;
        this.configuration = configuration;
        this.request = request;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetBehaviorReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetBehaviorReport_args args = new GetBehaviorReport_args();
        args.setAuthentication(authentication);
        args.setConfiguration(configuration);
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BehaviorReport getResult() throws DataIntelligenceServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetBehaviorReport();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("GetAuthentication", new GetAuthentication());
      processMap.put("UpdatePassword", new UpdatePassword());
      processMap.put("GetConfigurationVersion", new GetConfigurationVersion());
      processMap.put("SetDataSourcesConfiguration", new SetDataSourcesConfiguration());
      processMap.put("GetFields", new GetFields());
      processMap.put("CreateField", new CreateField());
      processMap.put("UpdateField", new UpdateField());
      processMap.put("DeleteField", new DeleteField());
      processMap.put("GetProcessTasks", new GetProcessTasks());
      processMap.put("CreateProcessTask", new CreateProcessTask());
      processMap.put("UpdateProcessTask", new UpdateProcessTask());
      processMap.put("DeleteProcessTask", new DeleteProcessTask());
      processMap.put("RunProcessTask", new RunProcessTask());
      processMap.put("GetEmailCampaigns", new GetEmailCampaigns());
      processMap.put("CreateEmailCampaign", new CreateEmailCampaign());
      processMap.put("UpdateEmailCampaign", new UpdateEmailCampaign());
      processMap.put("DeleteEmailCampaign", new DeleteEmailCampaign());
      processMap.put("GetChoices", new GetChoices());
      processMap.put("CreateChoice", new CreateChoice());
      processMap.put("UpdateChoice", new UpdateChoice());
      processMap.put("DeleteChoice", new DeleteChoice());
      processMap.put("GetChoiceVariants", new GetChoiceVariants());
      processMap.put("CreateChoiceVariant", new CreateChoiceVariant());
      processMap.put("UpdateChoiceVariant", new UpdateChoiceVariant());
      processMap.put("DeleteChoiceVariant", new DeleteChoiceVariant());
      processMap.put("GetProcessStatus", new GetProcessStatus());
      processMap.put("GetConfigurationDifferences", new GetConfigurationDifferences());
      processMap.put("PublishConfiguration", new PublishConfiguration());
      processMap.put("CloneConfiguration", new CloneConfiguration());
      processMap.put("CreateReferenceCSVFile", new CreateReferenceCSVFile());
      processMap.put("UpdateReferenceCSVFile", new UpdateReferenceCSVFile());
      processMap.put("DeleteReferenceCSVFile", new DeleteReferenceCSVFile());
      processMap.put("GetAllReferenceCSVFiles", new GetAllReferenceCSVFiles());
      processMap.put("CreateFieldsFromReferenceCSVFile", new CreateFieldsFromReferenceCSVFile());
      processMap.put("GetSchedulings", new GetSchedulings());
      processMap.put("CreateScheduling", new CreateScheduling());
      processMap.put("UpdateScheduling", new UpdateScheduling());
      processMap.put("DeleteScheduling", new DeleteScheduling());
      processMap.put("RunScheduling", new RunScheduling());
      processMap.put("GetRecommendationBlocks", new GetRecommendationBlocks());
      processMap.put("CreateRecommendationBlock", new CreateRecommendationBlock());
      processMap.put("UpdateRecommendationBlock", new UpdateRecommendationBlock());
      processMap.put("DeleteRecommendationBlock", new DeleteRecommendationBlock());
      processMap.put("GetDataSources", new GetDataSources());
      processMap.put("CreateDataSource", new CreateDataSource());
      processMap.put("UpdateDataSource", new UpdateDataSource());
      processMap.put("DeleteDataSource", new DeleteDataSource());
      processMap.put("GetDataExports", new GetDataExports());
      processMap.put("CreateDataExport", new CreateDataExport());
      processMap.put("UpdateDataExport", new UpdateDataExport());
      processMap.put("DeleteDataExport", new DeleteDataExport());
      processMap.put("GetReferenceCSVFileDataSources", new GetReferenceCSVFileDataSources());
      processMap.put("CreateReferenceCSVDataSource", new CreateReferenceCSVDataSource());
      processMap.put("UpdateReferenceCSVDataSource", new UpdateReferenceCSVDataSource());
      processMap.put("DeleteReferenceCSVDataSource", new DeleteReferenceCSVDataSource());
      processMap.put("GetLastTransactionID", new GetLastTransactionID());
      processMap.put("GetPageViews", new GetPageViews());
      processMap.put("GetChoiceReport", new GetChoiceReport());
      processMap.put("GetTransactionReport", new GetTransactionReport());
      processMap.put("GetBehaviorReport", new GetBehaviorReport());
      return processMap;
    }

    public static class GetAuthentication<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAuthentication_args> {
      public GetAuthentication() {
        super("GetAuthentication");
      }

      public GetAuthentication_args getEmptyArgsInstance() {
        return new GetAuthentication_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAuthentication_result getResult(I iface, GetAuthentication_args args) throws org.apache.thrift.TException {
        GetAuthentication_result result = new GetAuthentication_result();
        try {
          result.success = iface.GetAuthentication(args.authentication);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class UpdatePassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdatePassword_args> {
      public UpdatePassword() {
        super("UpdatePassword");
      }

      public UpdatePassword_args getEmptyArgsInstance() {
        return new UpdatePassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdatePassword_result getResult(I iface, UpdatePassword_args args) throws org.apache.thrift.TException {
        UpdatePassword_result result = new UpdatePassword_result();
        try {
          iface.UpdatePassword(args.authentication, args.newPassword);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetConfigurationVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetConfigurationVersion_args> {
      public GetConfigurationVersion() {
        super("GetConfigurationVersion");
      }

      public GetConfigurationVersion_args getEmptyArgsInstance() {
        return new GetConfigurationVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetConfigurationVersion_result getResult(I iface, GetConfigurationVersion_args args) throws org.apache.thrift.TException {
        GetConfigurationVersion_result result = new GetConfigurationVersion_result();
        try {
          result.success = iface.GetConfigurationVersion(args.authentication, args.versionType);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class SetDataSourcesConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SetDataSourcesConfiguration_args> {
      public SetDataSourcesConfiguration() {
        super("SetDataSourcesConfiguration");
      }

      public SetDataSourcesConfiguration_args getEmptyArgsInstance() {
        return new SetDataSourcesConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public SetDataSourcesConfiguration_result getResult(I iface, SetDataSourcesConfiguration_args args) throws org.apache.thrift.TException {
        SetDataSourcesConfiguration_result result = new SetDataSourcesConfiguration_result();
        try {
          iface.SetDataSourcesConfiguration(args.authentication, args.configurationVersion, args.dataSourcesConfigurationXML);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetFields<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetFields_args> {
      public GetFields() {
        super("GetFields");
      }

      public GetFields_args getEmptyArgsInstance() {
        return new GetFields_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetFields_result getResult(I iface, GetFields_args args) throws org.apache.thrift.TException {
        GetFields_result result = new GetFields_result();
        try {
          result.success = iface.GetFields(args.authentication, args.configuration);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class CreateField<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateField_args> {
      public CreateField() {
        super("CreateField");
      }

      public CreateField_args getEmptyArgsInstance() {
        return new CreateField_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateField_result getResult(I iface, CreateField_args args) throws org.apache.thrift.TException {
        CreateField_result result = new CreateField_result();
        try {
          iface.CreateField(args.authentication, args.configuration, args.fieldId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class UpdateField<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateField_args> {
      public UpdateField() {
        super("UpdateField");
      }

      public UpdateField_args getEmptyArgsInstance() {
        return new UpdateField_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateField_result getResult(I iface, UpdateField_args args) throws org.apache.thrift.TException {
        UpdateField_result result = new UpdateField_result();
        try {
          iface.UpdateField(args.authentication, args.configuration, args.field);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class DeleteField<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteField_args> {
      public DeleteField() {
        super("DeleteField");
      }

      public DeleteField_args getEmptyArgsInstance() {
        return new DeleteField_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteField_result getResult(I iface, DeleteField_args args) throws org.apache.thrift.TException {
        DeleteField_result result = new DeleteField_result();
        try {
          iface.DeleteField(args.authentication, args.configuration, args.fieldId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetProcessTasks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetProcessTasks_args> {
      public GetProcessTasks() {
        super("GetProcessTasks");
      }

      public GetProcessTasks_args getEmptyArgsInstance() {
        return new GetProcessTasks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetProcessTasks_result getResult(I iface, GetProcessTasks_args args) throws org.apache.thrift.TException {
        GetProcessTasks_result result = new GetProcessTasks_result();
        try {
          result.success = iface.GetProcessTasks(args.authentication, args.configuration);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class CreateProcessTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateProcessTask_args> {
      public CreateProcessTask() {
        super("CreateProcessTask");
      }

      public CreateProcessTask_args getEmptyArgsInstance() {
        return new CreateProcessTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateProcessTask_result getResult(I iface, CreateProcessTask_args args) throws org.apache.thrift.TException {
        CreateProcessTask_result result = new CreateProcessTask_result();
        try {
          iface.CreateProcessTask(args.authentication, args.configuration, args.processTaskId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class UpdateProcessTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateProcessTask_args> {
      public UpdateProcessTask() {
        super("UpdateProcessTask");
      }

      public UpdateProcessTask_args getEmptyArgsInstance() {
        return new UpdateProcessTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateProcessTask_result getResult(I iface, UpdateProcessTask_args args) throws org.apache.thrift.TException {
        UpdateProcessTask_result result = new UpdateProcessTask_result();
        try {
          iface.UpdateProcessTask(args.authentication, args.configuration, args.processTask);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class DeleteProcessTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteProcessTask_args> {
      public DeleteProcessTask() {
        super("DeleteProcessTask");
      }

      public DeleteProcessTask_args getEmptyArgsInstance() {
        return new DeleteProcessTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteProcessTask_result getResult(I iface, DeleteProcessTask_args args) throws org.apache.thrift.TException {
        DeleteProcessTask_result result = new DeleteProcessTask_result();
        try {
          iface.DeleteProcessTask(args.authentication, args.configuration, args.processTaskId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class RunProcessTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RunProcessTask_args> {
      public RunProcessTask() {
        super("RunProcessTask");
      }

      public RunProcessTask_args getEmptyArgsInstance() {
        return new RunProcessTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public RunProcessTask_result getResult(I iface, RunProcessTask_args args) throws org.apache.thrift.TException {
        RunProcessTask_result result = new RunProcessTask_result();
        try {
          result.success = iface.RunProcessTask(args.authentication, args.configuration, args.parameters);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetEmailCampaigns<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetEmailCampaigns_args> {
      public GetEmailCampaigns() {
        super("GetEmailCampaigns");
      }

      public GetEmailCampaigns_args getEmptyArgsInstance() {
        return new GetEmailCampaigns_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetEmailCampaigns_result getResult(I iface, GetEmailCampaigns_args args) throws org.apache.thrift.TException {
        GetEmailCampaigns_result result = new GetEmailCampaigns_result();
        try {
          result.success = iface.GetEmailCampaigns(args.authentication, args.configuration);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class CreateEmailCampaign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateEmailCampaign_args> {
      public CreateEmailCampaign() {
        super("CreateEmailCampaign");
      }

      public CreateEmailCampaign_args getEmptyArgsInstance() {
        return new CreateEmailCampaign_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateEmailCampaign_result getResult(I iface, CreateEmailCampaign_args args) throws org.apache.thrift.TException {
        CreateEmailCampaign_result result = new CreateEmailCampaign_result();
        try {
          iface.CreateEmailCampaign(args.authentication, args.configuration, args.emailCampaignId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class UpdateEmailCampaign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateEmailCampaign_args> {
      public UpdateEmailCampaign() {
        super("UpdateEmailCampaign");
      }

      public UpdateEmailCampaign_args getEmptyArgsInstance() {
        return new UpdateEmailCampaign_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateEmailCampaign_result getResult(I iface, UpdateEmailCampaign_args args) throws org.apache.thrift.TException {
        UpdateEmailCampaign_result result = new UpdateEmailCampaign_result();
        try {
          iface.UpdateEmailCampaign(args.authentication, args.configuration, args.emailCampaign);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class DeleteEmailCampaign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteEmailCampaign_args> {
      public DeleteEmailCampaign() {
        super("DeleteEmailCampaign");
      }

      public DeleteEmailCampaign_args getEmptyArgsInstance() {
        return new DeleteEmailCampaign_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteEmailCampaign_result getResult(I iface, DeleteEmailCampaign_args args) throws org.apache.thrift.TException {
        DeleteEmailCampaign_result result = new DeleteEmailCampaign_result();
        try {
          iface.DeleteEmailCampaign(args.authentication, args.configuration, args.emailCampaignId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetChoices<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetChoices_args> {
      public GetChoices() {
        super("GetChoices");
      }

      public GetChoices_args getEmptyArgsInstance() {
        return new GetChoices_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetChoices_result getResult(I iface, GetChoices_args args) throws org.apache.thrift.TException {
        GetChoices_result result = new GetChoices_result();
        try {
          result.success = iface.GetChoices(args.authentication, args.configuration, args.choiceSourceId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class CreateChoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateChoice_args> {
      public CreateChoice() {
        super("CreateChoice");
      }

      public CreateChoice_args getEmptyArgsInstance() {
        return new CreateChoice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateChoice_result getResult(I iface, CreateChoice_args args) throws org.apache.thrift.TException {
        CreateChoice_result result = new CreateChoice_result();
        try {
          iface.CreateChoice(args.authentication, args.configuration, args.choiceSourceId, args.choiceId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class UpdateChoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateChoice_args> {
      public UpdateChoice() {
        super("UpdateChoice");
      }

      public UpdateChoice_args getEmptyArgsInstance() {
        return new UpdateChoice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateChoice_result getResult(I iface, UpdateChoice_args args) throws org.apache.thrift.TException {
        UpdateChoice_result result = new UpdateChoice_result();
        try {
          iface.UpdateChoice(args.authentication, args.configuration, args.choiceSourceId, args.choice);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class DeleteChoice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteChoice_args> {
      public DeleteChoice() {
        super("DeleteChoice");
      }

      public DeleteChoice_args getEmptyArgsInstance() {
        return new DeleteChoice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteChoice_result getResult(I iface, DeleteChoice_args args) throws org.apache.thrift.TException {
        DeleteChoice_result result = new DeleteChoice_result();
        try {
          iface.DeleteChoice(args.authentication, args.configuration, args.choiceSourceId, args.choiceId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetChoiceVariants<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetChoiceVariants_args> {
      public GetChoiceVariants() {
        super("GetChoiceVariants");
      }

      public GetChoiceVariants_args getEmptyArgsInstance() {
        return new GetChoiceVariants_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetChoiceVariants_result getResult(I iface, GetChoiceVariants_args args) throws org.apache.thrift.TException {
        GetChoiceVariants_result result = new GetChoiceVariants_result();
        try {
          result.success = iface.GetChoiceVariants(args.authentication, args.configuration, args.choiceSourceId, args.choiceId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class CreateChoiceVariant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateChoiceVariant_args> {
      public CreateChoiceVariant() {
        super("CreateChoiceVariant");
      }

      public CreateChoiceVariant_args getEmptyArgsInstance() {
        return new CreateChoiceVariant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateChoiceVariant_result getResult(I iface, CreateChoiceVariant_args args) throws org.apache.thrift.TException {
        CreateChoiceVariant_result result = new CreateChoiceVariant_result();
        try {
          iface.CreateChoiceVariant(args.authentication, args.configuration, args.choiceSourceId, args.choiceId, args.choiceVariantId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class UpdateChoiceVariant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateChoiceVariant_args> {
      public UpdateChoiceVariant() {
        super("UpdateChoiceVariant");
      }

      public UpdateChoiceVariant_args getEmptyArgsInstance() {
        return new UpdateChoiceVariant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateChoiceVariant_result getResult(I iface, UpdateChoiceVariant_args args) throws org.apache.thrift.TException {
        UpdateChoiceVariant_result result = new UpdateChoiceVariant_result();
        try {
          iface.UpdateChoiceVariant(args.authentication, args.configuration, args.choiceSourceId, args.choiceVariant);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class DeleteChoiceVariant<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteChoiceVariant_args> {
      public DeleteChoiceVariant() {
        super("DeleteChoiceVariant");
      }

      public DeleteChoiceVariant_args getEmptyArgsInstance() {
        return new DeleteChoiceVariant_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteChoiceVariant_result getResult(I iface, DeleteChoiceVariant_args args) throws org.apache.thrift.TException {
        DeleteChoiceVariant_result result = new DeleteChoiceVariant_result();
        try {
          iface.DeleteChoiceVariant(args.authentication, args.configuration, args.choiceSourceId, args.choiceId, args.choiceVariantId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetProcessStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetProcessStatus_args> {
      public GetProcessStatus() {
        super("GetProcessStatus");
      }

      public GetProcessStatus_args getEmptyArgsInstance() {
        return new GetProcessStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetProcessStatus_result getResult(I iface, GetProcessStatus_args args) throws org.apache.thrift.TException {
        GetProcessStatus_result result = new GetProcessStatus_result();
        try {
          result.success = iface.GetProcessStatus(args.authentication, args.configuration, args.processTaskExecutionId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetConfigurationDifferences<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetConfigurationDifferences_args> {
      public GetConfigurationDifferences() {
        super("GetConfigurationDifferences");
      }

      public GetConfigurationDifferences_args getEmptyArgsInstance() {
        return new GetConfigurationDifferences_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetConfigurationDifferences_result getResult(I iface, GetConfigurationDifferences_args args) throws org.apache.thrift.TException {
        GetConfigurationDifferences_result result = new GetConfigurationDifferences_result();
        try {
          result.success = iface.GetConfigurationDifferences(args.authentication, args.configurationVersionSource, args.configurationVersionDestination);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class PublishConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, PublishConfiguration_args> {
      public PublishConfiguration() {
        super("PublishConfiguration");
      }

      public PublishConfiguration_args getEmptyArgsInstance() {
        return new PublishConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public PublishConfiguration_result getResult(I iface, PublishConfiguration_args args) throws org.apache.thrift.TException {
        PublishConfiguration_result result = new PublishConfiguration_result();
        try {
          iface.PublishConfiguration(args.authentication, args.configuration);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class CloneConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CloneConfiguration_args> {
      public CloneConfiguration() {
        super("CloneConfiguration");
      }

      public CloneConfiguration_args getEmptyArgsInstance() {
        return new CloneConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CloneConfiguration_result getResult(I iface, CloneConfiguration_args args) throws org.apache.thrift.TException {
        CloneConfiguration_result result = new CloneConfiguration_result();
        try {
          iface.CloneConfiguration(args.authentication, args.configuration);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class CreateReferenceCSVFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateReferenceCSVFile_args> {
      public CreateReferenceCSVFile() {
        super("CreateReferenceCSVFile");
      }

      public CreateReferenceCSVFile_args getEmptyArgsInstance() {
        return new CreateReferenceCSVFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateReferenceCSVFile_result getResult(I iface, CreateReferenceCSVFile_args args) throws org.apache.thrift.TException {
        CreateReferenceCSVFile_result result = new CreateReferenceCSVFile_result();
        try {
          result.success = iface.CreateReferenceCSVFile(args.authentication, args.configuration, args.fileDescriptor);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class UpdateReferenceCSVFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateReferenceCSVFile_args> {
      public UpdateReferenceCSVFile() {
        super("UpdateReferenceCSVFile");
      }

      public UpdateReferenceCSVFile_args getEmptyArgsInstance() {
        return new UpdateReferenceCSVFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateReferenceCSVFile_result getResult(I iface, UpdateReferenceCSVFile_args args) throws org.apache.thrift.TException {
        UpdateReferenceCSVFile_result result = new UpdateReferenceCSVFile_result();
        try {
          iface.UpdateReferenceCSVFile(args.authentication, args.configuration, args.fileDescriptor);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class DeleteReferenceCSVFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteReferenceCSVFile_args> {
      public DeleteReferenceCSVFile() {
        super("DeleteReferenceCSVFile");
      }

      public DeleteReferenceCSVFile_args getEmptyArgsInstance() {
        return new DeleteReferenceCSVFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteReferenceCSVFile_result getResult(I iface, DeleteReferenceCSVFile_args args) throws org.apache.thrift.TException {
        DeleteReferenceCSVFile_result result = new DeleteReferenceCSVFile_result();
        try {
          iface.DeleteReferenceCSVFile(args.authentication, args.configuration, args.fileDescriptor);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetAllReferenceCSVFiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAllReferenceCSVFiles_args> {
      public GetAllReferenceCSVFiles() {
        super("GetAllReferenceCSVFiles");
      }

      public GetAllReferenceCSVFiles_args getEmptyArgsInstance() {
        return new GetAllReferenceCSVFiles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAllReferenceCSVFiles_result getResult(I iface, GetAllReferenceCSVFiles_args args) throws org.apache.thrift.TException {
        GetAllReferenceCSVFiles_result result = new GetAllReferenceCSVFiles_result();
        try {
          result.success = iface.GetAllReferenceCSVFiles(args.authentication, args.configuration);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class CreateFieldsFromReferenceCSVFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateFieldsFromReferenceCSVFile_args> {
      public CreateFieldsFromReferenceCSVFile() {
        super("CreateFieldsFromReferenceCSVFile");
      }

      public CreateFieldsFromReferenceCSVFile_args getEmptyArgsInstance() {
        return new CreateFieldsFromReferenceCSVFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateFieldsFromReferenceCSVFile_result getResult(I iface, CreateFieldsFromReferenceCSVFile_args args) throws org.apache.thrift.TException {
        CreateFieldsFromReferenceCSVFile_result result = new CreateFieldsFromReferenceCSVFile_result();
        try {
          iface.CreateFieldsFromReferenceCSVFile(args.authentication, args.configurationVersion, args.fieldsConfigurationXML);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetSchedulings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetSchedulings_args> {
      public GetSchedulings() {
        super("GetSchedulings");
      }

      public GetSchedulings_args getEmptyArgsInstance() {
        return new GetSchedulings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetSchedulings_result getResult(I iface, GetSchedulings_args args) throws org.apache.thrift.TException {
        GetSchedulings_result result = new GetSchedulings_result();
        try {
          result.success = iface.GetSchedulings(args.authentication, args.configuration);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class CreateScheduling<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateScheduling_args> {
      public CreateScheduling() {
        super("CreateScheduling");
      }

      public CreateScheduling_args getEmptyArgsInstance() {
        return new CreateScheduling_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateScheduling_result getResult(I iface, CreateScheduling_args args) throws org.apache.thrift.TException {
        CreateScheduling_result result = new CreateScheduling_result();
        try {
          iface.CreateScheduling(args.authentication, args.configuration, args.schedulingId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class UpdateScheduling<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateScheduling_args> {
      public UpdateScheduling() {
        super("UpdateScheduling");
      }

      public UpdateScheduling_args getEmptyArgsInstance() {
        return new UpdateScheduling_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateScheduling_result getResult(I iface, UpdateScheduling_args args) throws org.apache.thrift.TException {
        UpdateScheduling_result result = new UpdateScheduling_result();
        try {
          iface.UpdateScheduling(args.authentication, args.configuration, args.scheduling);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class DeleteScheduling<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteScheduling_args> {
      public DeleteScheduling() {
        super("DeleteScheduling");
      }

      public DeleteScheduling_args getEmptyArgsInstance() {
        return new DeleteScheduling_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteScheduling_result getResult(I iface, DeleteScheduling_args args) throws org.apache.thrift.TException {
        DeleteScheduling_result result = new DeleteScheduling_result();
        try {
          iface.DeleteScheduling(args.authentication, args.configuration, args.schedulingId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class RunScheduling<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RunScheduling_args> {
      public RunScheduling() {
        super("RunScheduling");
      }

      public RunScheduling_args getEmptyArgsInstance() {
        return new RunScheduling_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public RunScheduling_result getResult(I iface, RunScheduling_args args) throws org.apache.thrift.TException {
        RunScheduling_result result = new RunScheduling_result();
        try {
          iface.RunScheduling(args.authentication, args.configuration, args.parameters);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetRecommendationBlocks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetRecommendationBlocks_args> {
      public GetRecommendationBlocks() {
        super("GetRecommendationBlocks");
      }

      public GetRecommendationBlocks_args getEmptyArgsInstance() {
        return new GetRecommendationBlocks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetRecommendationBlocks_result getResult(I iface, GetRecommendationBlocks_args args) throws org.apache.thrift.TException {
        GetRecommendationBlocks_result result = new GetRecommendationBlocks_result();
        try {
          result.success = iface.GetRecommendationBlocks(args.authentication, args.configuration);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class CreateRecommendationBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateRecommendationBlock_args> {
      public CreateRecommendationBlock() {
        super("CreateRecommendationBlock");
      }

      public CreateRecommendationBlock_args getEmptyArgsInstance() {
        return new CreateRecommendationBlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateRecommendationBlock_result getResult(I iface, CreateRecommendationBlock_args args) throws org.apache.thrift.TException {
        CreateRecommendationBlock_result result = new CreateRecommendationBlock_result();
        try {
          iface.CreateRecommendationBlock(args.authentication, args.configuration, args.recommendationBlockId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class UpdateRecommendationBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateRecommendationBlock_args> {
      public UpdateRecommendationBlock() {
        super("UpdateRecommendationBlock");
      }

      public UpdateRecommendationBlock_args getEmptyArgsInstance() {
        return new UpdateRecommendationBlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateRecommendationBlock_result getResult(I iface, UpdateRecommendationBlock_args args) throws org.apache.thrift.TException {
        UpdateRecommendationBlock_result result = new UpdateRecommendationBlock_result();
        try {
          iface.UpdateRecommendationBlock(args.authentication, args.configuration, args.recommendationBlock);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class DeleteRecommendationBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteRecommendationBlock_args> {
      public DeleteRecommendationBlock() {
        super("DeleteRecommendationBlock");
      }

      public DeleteRecommendationBlock_args getEmptyArgsInstance() {
        return new DeleteRecommendationBlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteRecommendationBlock_result getResult(I iface, DeleteRecommendationBlock_args args) throws org.apache.thrift.TException {
        DeleteRecommendationBlock_result result = new DeleteRecommendationBlock_result();
        try {
          iface.DeleteRecommendationBlock(args.authentication, args.configuration, args.recommendationBlockId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetDataSources<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetDataSources_args> {
      public GetDataSources() {
        super("GetDataSources");
      }

      public GetDataSources_args getEmptyArgsInstance() {
        return new GetDataSources_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetDataSources_result getResult(I iface, GetDataSources_args args) throws org.apache.thrift.TException {
        GetDataSources_result result = new GetDataSources_result();
        try {
          result.success = iface.GetDataSources(args.authentication, args.configuration);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class CreateDataSource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateDataSource_args> {
      public CreateDataSource() {
        super("CreateDataSource");
      }

      public CreateDataSource_args getEmptyArgsInstance() {
        return new CreateDataSource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateDataSource_result getResult(I iface, CreateDataSource_args args) throws org.apache.thrift.TException {
        CreateDataSource_result result = new CreateDataSource_result();
        try {
          iface.CreateDataSource(args.authentication, args.configuration, args.dataSourceId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class UpdateDataSource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateDataSource_args> {
      public UpdateDataSource() {
        super("UpdateDataSource");
      }

      public UpdateDataSource_args getEmptyArgsInstance() {
        return new UpdateDataSource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateDataSource_result getResult(I iface, UpdateDataSource_args args) throws org.apache.thrift.TException {
        UpdateDataSource_result result = new UpdateDataSource_result();
        try {
          iface.UpdateDataSource(args.authentication, args.configuration, args.dataSource);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class DeleteDataSource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteDataSource_args> {
      public DeleteDataSource() {
        super("DeleteDataSource");
      }

      public DeleteDataSource_args getEmptyArgsInstance() {
        return new DeleteDataSource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteDataSource_result getResult(I iface, DeleteDataSource_args args) throws org.apache.thrift.TException {
        DeleteDataSource_result result = new DeleteDataSource_result();
        try {
          iface.DeleteDataSource(args.authentication, args.configuration, args.dataSourceId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetDataExports<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetDataExports_args> {
      public GetDataExports() {
        super("GetDataExports");
      }

      public GetDataExports_args getEmptyArgsInstance() {
        return new GetDataExports_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetDataExports_result getResult(I iface, GetDataExports_args args) throws org.apache.thrift.TException {
        GetDataExports_result result = new GetDataExports_result();
        try {
          result.success = iface.GetDataExports(args.authentication, args.configuration);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class CreateDataExport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateDataExport_args> {
      public CreateDataExport() {
        super("CreateDataExport");
      }

      public CreateDataExport_args getEmptyArgsInstance() {
        return new CreateDataExport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateDataExport_result getResult(I iface, CreateDataExport_args args) throws org.apache.thrift.TException {
        CreateDataExport_result result = new CreateDataExport_result();
        try {
          iface.CreateDataExport(args.authentication, args.configuration, args.dataExportId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class UpdateDataExport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateDataExport_args> {
      public UpdateDataExport() {
        super("UpdateDataExport");
      }

      public UpdateDataExport_args getEmptyArgsInstance() {
        return new UpdateDataExport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateDataExport_result getResult(I iface, UpdateDataExport_args args) throws org.apache.thrift.TException {
        UpdateDataExport_result result = new UpdateDataExport_result();
        try {
          iface.UpdateDataExport(args.authentication, args.configuration, args.dataExport);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class DeleteDataExport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteDataExport_args> {
      public DeleteDataExport() {
        super("DeleteDataExport");
      }

      public DeleteDataExport_args getEmptyArgsInstance() {
        return new DeleteDataExport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteDataExport_result getResult(I iface, DeleteDataExport_args args) throws org.apache.thrift.TException {
        DeleteDataExport_result result = new DeleteDataExport_result();
        try {
          iface.DeleteDataExport(args.authentication, args.configuration, args.dataExportId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetReferenceCSVFileDataSources<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetReferenceCSVFileDataSources_args> {
      public GetReferenceCSVFileDataSources() {
        super("GetReferenceCSVFileDataSources");
      }

      public GetReferenceCSVFileDataSources_args getEmptyArgsInstance() {
        return new GetReferenceCSVFileDataSources_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetReferenceCSVFileDataSources_result getResult(I iface, GetReferenceCSVFileDataSources_args args) throws org.apache.thrift.TException {
        GetReferenceCSVFileDataSources_result result = new GetReferenceCSVFileDataSources_result();
        try {
          result.success = iface.GetReferenceCSVFileDataSources(args.authentication, args.configuration);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class CreateReferenceCSVDataSource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateReferenceCSVDataSource_args> {
      public CreateReferenceCSVDataSource() {
        super("CreateReferenceCSVDataSource");
      }

      public CreateReferenceCSVDataSource_args getEmptyArgsInstance() {
        return new CreateReferenceCSVDataSource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateReferenceCSVDataSource_result getResult(I iface, CreateReferenceCSVDataSource_args args) throws org.apache.thrift.TException {
        CreateReferenceCSVDataSource_result result = new CreateReferenceCSVDataSource_result();
        try {
          iface.CreateReferenceCSVDataSource(args.authentication, args.configuration, args.dataSourceId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class UpdateReferenceCSVDataSource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateReferenceCSVDataSource_args> {
      public UpdateReferenceCSVDataSource() {
        super("UpdateReferenceCSVDataSource");
      }

      public UpdateReferenceCSVDataSource_args getEmptyArgsInstance() {
        return new UpdateReferenceCSVDataSource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateReferenceCSVDataSource_result getResult(I iface, UpdateReferenceCSVDataSource_args args) throws org.apache.thrift.TException {
        UpdateReferenceCSVDataSource_result result = new UpdateReferenceCSVDataSource_result();
        try {
          iface.UpdateReferenceCSVDataSource(args.authentication, args.configuration, args.dataSource);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class DeleteReferenceCSVDataSource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteReferenceCSVDataSource_args> {
      public DeleteReferenceCSVDataSource() {
        super("DeleteReferenceCSVDataSource");
      }

      public DeleteReferenceCSVDataSource_args getEmptyArgsInstance() {
        return new DeleteReferenceCSVDataSource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteReferenceCSVDataSource_result getResult(I iface, DeleteReferenceCSVDataSource_args args) throws org.apache.thrift.TException {
        DeleteReferenceCSVDataSource_result result = new DeleteReferenceCSVDataSource_result();
        try {
          iface.DeleteReferenceCSVDataSource(args.authentication, args.configuration, args.dataSourceId);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetLastTransactionID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetLastTransactionID_args> {
      public GetLastTransactionID() {
        super("GetLastTransactionID");
      }

      public GetLastTransactionID_args getEmptyArgsInstance() {
        return new GetLastTransactionID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetLastTransactionID_result getResult(I iface, GetLastTransactionID_args args) throws org.apache.thrift.TException {
        GetLastTransactionID_result result = new GetLastTransactionID_result();
        try {
          result.success = iface.GetLastTransactionID(args.authentication, args.configuration);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetPageViews<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetPageViews_args> {
      public GetPageViews() {
        super("GetPageViews");
      }

      public GetPageViews_args getEmptyArgsInstance() {
        return new GetPageViews_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetPageViews_result getResult(I iface, GetPageViews_args args) throws org.apache.thrift.TException {
        GetPageViews_result result = new GetPageViews_result();
        try {
          result.success = iface.GetPageViews(args.authentication, args.configuration, args.range, args.precision);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetChoiceReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetChoiceReport_args> {
      public GetChoiceReport() {
        super("GetChoiceReport");
      }

      public GetChoiceReport_args getEmptyArgsInstance() {
        return new GetChoiceReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetChoiceReport_result getResult(I iface, GetChoiceReport_args args) throws org.apache.thrift.TException {
        GetChoiceReport_result result = new GetChoiceReport_result();
        try {
          result.success = iface.GetChoiceReport(args.authentication, args.configuration, args.request);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetTransactionReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetTransactionReport_args> {
      public GetTransactionReport() {
        super("GetTransactionReport");
      }

      public GetTransactionReport_args getEmptyArgsInstance() {
        return new GetTransactionReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetTransactionReport_result getResult(I iface, GetTransactionReport_args args) throws org.apache.thrift.TException {
        GetTransactionReport_result result = new GetTransactionReport_result();
        try {
          result.success = iface.GetTransactionReport(args.authentication, args.configuration, args.request);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class GetBehaviorReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetBehaviorReport_args> {
      public GetBehaviorReport() {
        super("GetBehaviorReport");
      }

      public GetBehaviorReport_args getEmptyArgsInstance() {
        return new GetBehaviorReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetBehaviorReport_result getResult(I iface, GetBehaviorReport_args args) throws org.apache.thrift.TException {
        GetBehaviorReport_result result = new GetBehaviorReport_result();
        try {
          result.success = iface.GetBehaviorReport(args.authentication, args.configuration, args.request);
        } catch (DataIntelligenceServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("GetAuthentication", new GetAuthentication());
      processMap.put("UpdatePassword", new UpdatePassword());
      processMap.put("GetConfigurationVersion", new GetConfigurationVersion());
      processMap.put("SetDataSourcesConfiguration", new SetDataSourcesConfiguration());
      processMap.put("GetFields", new GetFields());
      processMap.put("CreateField", new CreateField());
      processMap.put("UpdateField", new UpdateField());
      processMap.put("DeleteField", new DeleteField());
      processMap.put("GetProcessTasks", new GetProcessTasks());
      processMap.put("CreateProcessTask", new CreateProcessTask());
      processMap.put("UpdateProcessTask", new UpdateProcessTask());
      processMap.put("DeleteProcessTask", new DeleteProcessTask());
      processMap.put("RunProcessTask", new RunProcessTask());
      processMap.put("GetEmailCampaigns", new GetEmailCampaigns());
      processMap.put("CreateEmailCampaign", new CreateEmailCampaign());
      processMap.put("UpdateEmailCampaign", new UpdateEmailCampaign());
      processMap.put("DeleteEmailCampaign", new DeleteEmailCampaign());
      processMap.put("GetChoices", new GetChoices());
      processMap.put("CreateChoice", new CreateChoice());
      processMap.put("UpdateChoice", new UpdateChoice());
      processMap.put("DeleteChoice", new DeleteChoice());
      processMap.put("GetChoiceVariants", new GetChoiceVariants());
      processMap.put("CreateChoiceVariant", new CreateChoiceVariant());
      processMap.put("UpdateChoiceVariant", new UpdateChoiceVariant());
      processMap.put("DeleteChoiceVariant", new DeleteChoiceVariant());
      processMap.put("GetProcessStatus", new GetProcessStatus());
      processMap.put("GetConfigurationDifferences", new GetConfigurationDifferences());
      processMap.put("PublishConfiguration", new PublishConfiguration());
      processMap.put("CloneConfiguration", new CloneConfiguration());
      processMap.put("CreateReferenceCSVFile", new CreateReferenceCSVFile());
      processMap.put("UpdateReferenceCSVFile", new UpdateReferenceCSVFile());
      processMap.put("DeleteReferenceCSVFile", new DeleteReferenceCSVFile());
      processMap.put("GetAllReferenceCSVFiles", new GetAllReferenceCSVFiles());
      processMap.put("CreateFieldsFromReferenceCSVFile", new CreateFieldsFromReferenceCSVFile());
      processMap.put("GetSchedulings", new GetSchedulings());
      processMap.put("CreateScheduling", new CreateScheduling());
      processMap.put("UpdateScheduling", new UpdateScheduling());
      processMap.put("DeleteScheduling", new DeleteScheduling());
      processMap.put("RunScheduling", new RunScheduling());
      processMap.put("GetRecommendationBlocks", new GetRecommendationBlocks());
      processMap.put("CreateRecommendationBlock", new CreateRecommendationBlock());
      processMap.put("UpdateRecommendationBlock", new UpdateRecommendationBlock());
      processMap.put("DeleteRecommendationBlock", new DeleteRecommendationBlock());
      processMap.put("GetDataSources", new GetDataSources());
      processMap.put("CreateDataSource", new CreateDataSource());
      processMap.put("UpdateDataSource", new UpdateDataSource());
      processMap.put("DeleteDataSource", new DeleteDataSource());
      processMap.put("GetDataExports", new GetDataExports());
      processMap.put("CreateDataExport", new CreateDataExport());
      processMap.put("UpdateDataExport", new UpdateDataExport());
      processMap.put("DeleteDataExport", new DeleteDataExport());
      processMap.put("GetReferenceCSVFileDataSources", new GetReferenceCSVFileDataSources());
      processMap.put("CreateReferenceCSVDataSource", new CreateReferenceCSVDataSource());
      processMap.put("UpdateReferenceCSVDataSource", new UpdateReferenceCSVDataSource());
      processMap.put("DeleteReferenceCSVDataSource", new DeleteReferenceCSVDataSource());
      processMap.put("GetLastTransactionID", new GetLastTransactionID());
      processMap.put("GetPageViews", new GetPageViews());
      processMap.put("GetChoiceReport", new GetChoiceReport());
      processMap.put("GetTransactionReport", new GetTransactionReport());
      processMap.put("GetBehaviorReport", new GetBehaviorReport());
      return processMap;
    }

    public static class GetAuthentication<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAuthentication_args, Authentication> {
      public GetAuthentication() {
        super("GetAuthentication");
      }

      public GetAuthentication_args getEmptyArgsInstance() {
        return new GetAuthentication_args();
      }

      public AsyncMethodCallback<Authentication> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Authentication>() { 
          public void onComplete(Authentication o) {
            GetAuthentication_result result = new GetAuthentication_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetAuthentication_result result = new GetAuthentication_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAuthentication_args args, org.apache.thrift.async.AsyncMethodCallback<Authentication> resultHandler) throws TException {
        iface.GetAuthentication(args.authentication,resultHandler);
      }
    }

    public static class UpdatePassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdatePassword_args, Void> {
      public UpdatePassword() {
        super("UpdatePassword");
      }

      public UpdatePassword_args getEmptyArgsInstance() {
        return new UpdatePassword_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdatePassword_result result = new UpdatePassword_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdatePassword_result result = new UpdatePassword_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdatePassword_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdatePassword(args.authentication, args.newPassword,resultHandler);
      }
    }

    public static class GetConfigurationVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetConfigurationVersion_args, ConfigurationVersion> {
      public GetConfigurationVersion() {
        super("GetConfigurationVersion");
      }

      public GetConfigurationVersion_args getEmptyArgsInstance() {
        return new GetConfigurationVersion_args();
      }

      public AsyncMethodCallback<ConfigurationVersion> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ConfigurationVersion>() { 
          public void onComplete(ConfigurationVersion o) {
            GetConfigurationVersion_result result = new GetConfigurationVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetConfigurationVersion_result result = new GetConfigurationVersion_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetConfigurationVersion_args args, org.apache.thrift.async.AsyncMethodCallback<ConfigurationVersion> resultHandler) throws TException {
        iface.GetConfigurationVersion(args.authentication, args.versionType,resultHandler);
      }
    }

    public static class SetDataSourcesConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SetDataSourcesConfiguration_args, Void> {
      public SetDataSourcesConfiguration() {
        super("SetDataSourcesConfiguration");
      }

      public SetDataSourcesConfiguration_args getEmptyArgsInstance() {
        return new SetDataSourcesConfiguration_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            SetDataSourcesConfiguration_result result = new SetDataSourcesConfiguration_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            SetDataSourcesConfiguration_result result = new SetDataSourcesConfiguration_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, SetDataSourcesConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.SetDataSourcesConfiguration(args.authentication, args.configurationVersion, args.dataSourcesConfigurationXML,resultHandler);
      }
    }

    public static class GetFields<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetFields_args, Map<String,Field>> {
      public GetFields() {
        super("GetFields");
      }

      public GetFields_args getEmptyArgsInstance() {
        return new GetFields_args();
      }

      public AsyncMethodCallback<Map<String,Field>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Field>>() { 
          public void onComplete(Map<String,Field> o) {
            GetFields_result result = new GetFields_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetFields_result result = new GetFields_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetFields_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Field>> resultHandler) throws TException {
        iface.GetFields(args.authentication, args.configuration,resultHandler);
      }
    }

    public static class CreateField<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateField_args, Void> {
      public CreateField() {
        super("CreateField");
      }

      public CreateField_args getEmptyArgsInstance() {
        return new CreateField_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateField_result result = new CreateField_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateField_result result = new CreateField_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateField_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateField(args.authentication, args.configuration, args.fieldId,resultHandler);
      }
    }

    public static class UpdateField<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateField_args, Void> {
      public UpdateField() {
        super("UpdateField");
      }

      public UpdateField_args getEmptyArgsInstance() {
        return new UpdateField_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateField_result result = new UpdateField_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateField_result result = new UpdateField_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateField_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateField(args.authentication, args.configuration, args.field,resultHandler);
      }
    }

    public static class DeleteField<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteField_args, Void> {
      public DeleteField() {
        super("DeleteField");
      }

      public DeleteField_args getEmptyArgsInstance() {
        return new DeleteField_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeleteField_result result = new DeleteField_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeleteField_result result = new DeleteField_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteField_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeleteField(args.authentication, args.configuration, args.fieldId,resultHandler);
      }
    }

    public static class GetProcessTasks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetProcessTasks_args, Map<String,ProcessTask>> {
      public GetProcessTasks() {
        super("GetProcessTasks");
      }

      public GetProcessTasks_args getEmptyArgsInstance() {
        return new GetProcessTasks_args();
      }

      public AsyncMethodCallback<Map<String,ProcessTask>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,ProcessTask>>() { 
          public void onComplete(Map<String,ProcessTask> o) {
            GetProcessTasks_result result = new GetProcessTasks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetProcessTasks_result result = new GetProcessTasks_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetProcessTasks_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,ProcessTask>> resultHandler) throws TException {
        iface.GetProcessTasks(args.authentication, args.configuration,resultHandler);
      }
    }

    public static class CreateProcessTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateProcessTask_args, Void> {
      public CreateProcessTask() {
        super("CreateProcessTask");
      }

      public CreateProcessTask_args getEmptyArgsInstance() {
        return new CreateProcessTask_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateProcessTask_result result = new CreateProcessTask_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateProcessTask_result result = new CreateProcessTask_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateProcessTask_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateProcessTask(args.authentication, args.configuration, args.processTaskId,resultHandler);
      }
    }

    public static class UpdateProcessTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateProcessTask_args, Void> {
      public UpdateProcessTask() {
        super("UpdateProcessTask");
      }

      public UpdateProcessTask_args getEmptyArgsInstance() {
        return new UpdateProcessTask_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateProcessTask_result result = new UpdateProcessTask_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateProcessTask_result result = new UpdateProcessTask_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateProcessTask_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateProcessTask(args.authentication, args.configuration, args.processTask,resultHandler);
      }
    }

    public static class DeleteProcessTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteProcessTask_args, Void> {
      public DeleteProcessTask() {
        super("DeleteProcessTask");
      }

      public DeleteProcessTask_args getEmptyArgsInstance() {
        return new DeleteProcessTask_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeleteProcessTask_result result = new DeleteProcessTask_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeleteProcessTask_result result = new DeleteProcessTask_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteProcessTask_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeleteProcessTask(args.authentication, args.configuration, args.processTaskId,resultHandler);
      }
    }

    public static class RunProcessTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RunProcessTask_args, String> {
      public RunProcessTask() {
        super("RunProcessTask");
      }

      public RunProcessTask_args getEmptyArgsInstance() {
        return new RunProcessTask_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            RunProcessTask_result result = new RunProcessTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            RunProcessTask_result result = new RunProcessTask_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, RunProcessTask_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.RunProcessTask(args.authentication, args.configuration, args.parameters,resultHandler);
      }
    }

    public static class GetEmailCampaigns<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetEmailCampaigns_args, Map<String,EmailCampaign>> {
      public GetEmailCampaigns() {
        super("GetEmailCampaigns");
      }

      public GetEmailCampaigns_args getEmptyArgsInstance() {
        return new GetEmailCampaigns_args();
      }

      public AsyncMethodCallback<Map<String,EmailCampaign>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,EmailCampaign>>() { 
          public void onComplete(Map<String,EmailCampaign> o) {
            GetEmailCampaigns_result result = new GetEmailCampaigns_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetEmailCampaigns_result result = new GetEmailCampaigns_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetEmailCampaigns_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,EmailCampaign>> resultHandler) throws TException {
        iface.GetEmailCampaigns(args.authentication, args.configuration,resultHandler);
      }
    }

    public static class CreateEmailCampaign<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateEmailCampaign_args, Void> {
      public CreateEmailCampaign() {
        super("CreateEmailCampaign");
      }

      public CreateEmailCampaign_args getEmptyArgsInstance() {
        return new CreateEmailCampaign_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateEmailCampaign_result result = new CreateEmailCampaign_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateEmailCampaign_result result = new CreateEmailCampaign_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateEmailCampaign_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateEmailCampaign(args.authentication, args.configuration, args.emailCampaignId,resultHandler);
      }
    }

    public static class UpdateEmailCampaign<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateEmailCampaign_args, Void> {
      public UpdateEmailCampaign() {
        super("UpdateEmailCampaign");
      }

      public UpdateEmailCampaign_args getEmptyArgsInstance() {
        return new UpdateEmailCampaign_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateEmailCampaign_result result = new UpdateEmailCampaign_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateEmailCampaign_result result = new UpdateEmailCampaign_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateEmailCampaign_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateEmailCampaign(args.authentication, args.configuration, args.emailCampaign,resultHandler);
      }
    }

    public static class DeleteEmailCampaign<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteEmailCampaign_args, Void> {
      public DeleteEmailCampaign() {
        super("DeleteEmailCampaign");
      }

      public DeleteEmailCampaign_args getEmptyArgsInstance() {
        return new DeleteEmailCampaign_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeleteEmailCampaign_result result = new DeleteEmailCampaign_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeleteEmailCampaign_result result = new DeleteEmailCampaign_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteEmailCampaign_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeleteEmailCampaign(args.authentication, args.configuration, args.emailCampaignId,resultHandler);
      }
    }

    public static class GetChoices<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetChoices_args, Map<String,Choice>> {
      public GetChoices() {
        super("GetChoices");
      }

      public GetChoices_args getEmptyArgsInstance() {
        return new GetChoices_args();
      }

      public AsyncMethodCallback<Map<String,Choice>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Choice>>() { 
          public void onComplete(Map<String,Choice> o) {
            GetChoices_result result = new GetChoices_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetChoices_result result = new GetChoices_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetChoices_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Choice>> resultHandler) throws TException {
        iface.GetChoices(args.authentication, args.configuration, args.choiceSourceId,resultHandler);
      }
    }

    public static class CreateChoice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateChoice_args, Void> {
      public CreateChoice() {
        super("CreateChoice");
      }

      public CreateChoice_args getEmptyArgsInstance() {
        return new CreateChoice_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateChoice_result result = new CreateChoice_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateChoice_result result = new CreateChoice_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateChoice_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateChoice(args.authentication, args.configuration, args.choiceSourceId, args.choiceId,resultHandler);
      }
    }

    public static class UpdateChoice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateChoice_args, Void> {
      public UpdateChoice() {
        super("UpdateChoice");
      }

      public UpdateChoice_args getEmptyArgsInstance() {
        return new UpdateChoice_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateChoice_result result = new UpdateChoice_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateChoice_result result = new UpdateChoice_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateChoice_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateChoice(args.authentication, args.configuration, args.choiceSourceId, args.choice,resultHandler);
      }
    }

    public static class DeleteChoice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteChoice_args, Void> {
      public DeleteChoice() {
        super("DeleteChoice");
      }

      public DeleteChoice_args getEmptyArgsInstance() {
        return new DeleteChoice_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeleteChoice_result result = new DeleteChoice_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeleteChoice_result result = new DeleteChoice_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteChoice_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeleteChoice(args.authentication, args.configuration, args.choiceSourceId, args.choiceId,resultHandler);
      }
    }

    public static class GetChoiceVariants<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetChoiceVariants_args, Map<String,ChoiceVariant>> {
      public GetChoiceVariants() {
        super("GetChoiceVariants");
      }

      public GetChoiceVariants_args getEmptyArgsInstance() {
        return new GetChoiceVariants_args();
      }

      public AsyncMethodCallback<Map<String,ChoiceVariant>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,ChoiceVariant>>() { 
          public void onComplete(Map<String,ChoiceVariant> o) {
            GetChoiceVariants_result result = new GetChoiceVariants_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetChoiceVariants_result result = new GetChoiceVariants_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetChoiceVariants_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,ChoiceVariant>> resultHandler) throws TException {
        iface.GetChoiceVariants(args.authentication, args.configuration, args.choiceSourceId, args.choiceId,resultHandler);
      }
    }

    public static class CreateChoiceVariant<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateChoiceVariant_args, Void> {
      public CreateChoiceVariant() {
        super("CreateChoiceVariant");
      }

      public CreateChoiceVariant_args getEmptyArgsInstance() {
        return new CreateChoiceVariant_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateChoiceVariant_result result = new CreateChoiceVariant_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateChoiceVariant_result result = new CreateChoiceVariant_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateChoiceVariant_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateChoiceVariant(args.authentication, args.configuration, args.choiceSourceId, args.choiceId, args.choiceVariantId,resultHandler);
      }
    }

    public static class UpdateChoiceVariant<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateChoiceVariant_args, Void> {
      public UpdateChoiceVariant() {
        super("UpdateChoiceVariant");
      }

      public UpdateChoiceVariant_args getEmptyArgsInstance() {
        return new UpdateChoiceVariant_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateChoiceVariant_result result = new UpdateChoiceVariant_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateChoiceVariant_result result = new UpdateChoiceVariant_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateChoiceVariant_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateChoiceVariant(args.authentication, args.configuration, args.choiceSourceId, args.choiceVariant,resultHandler);
      }
    }

    public static class DeleteChoiceVariant<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteChoiceVariant_args, Void> {
      public DeleteChoiceVariant() {
        super("DeleteChoiceVariant");
      }

      public DeleteChoiceVariant_args getEmptyArgsInstance() {
        return new DeleteChoiceVariant_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeleteChoiceVariant_result result = new DeleteChoiceVariant_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeleteChoiceVariant_result result = new DeleteChoiceVariant_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteChoiceVariant_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeleteChoiceVariant(args.authentication, args.configuration, args.choiceSourceId, args.choiceId, args.choiceVariantId,resultHandler);
      }
    }

    public static class GetProcessStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetProcessStatus_args, ProcessTaskExecutionStatus> {
      public GetProcessStatus() {
        super("GetProcessStatus");
      }

      public GetProcessStatus_args getEmptyArgsInstance() {
        return new GetProcessStatus_args();
      }

      public AsyncMethodCallback<ProcessTaskExecutionStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProcessTaskExecutionStatus>() { 
          public void onComplete(ProcessTaskExecutionStatus o) {
            GetProcessStatus_result result = new GetProcessStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetProcessStatus_result result = new GetProcessStatus_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetProcessStatus_args args, org.apache.thrift.async.AsyncMethodCallback<ProcessTaskExecutionStatus> resultHandler) throws TException {
        iface.GetProcessStatus(args.authentication, args.configuration, args.processTaskExecutionId,resultHandler);
      }
    }

    public static class GetConfigurationDifferences<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetConfigurationDifferences_args, List<ConfigurationDifference>> {
      public GetConfigurationDifferences() {
        super("GetConfigurationDifferences");
      }

      public GetConfigurationDifferences_args getEmptyArgsInstance() {
        return new GetConfigurationDifferences_args();
      }

      public AsyncMethodCallback<List<ConfigurationDifference>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ConfigurationDifference>>() { 
          public void onComplete(List<ConfigurationDifference> o) {
            GetConfigurationDifferences_result result = new GetConfigurationDifferences_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetConfigurationDifferences_result result = new GetConfigurationDifferences_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetConfigurationDifferences_args args, org.apache.thrift.async.AsyncMethodCallback<List<ConfigurationDifference>> resultHandler) throws TException {
        iface.GetConfigurationDifferences(args.authentication, args.configurationVersionSource, args.configurationVersionDestination,resultHandler);
      }
    }

    public static class PublishConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, PublishConfiguration_args, Void> {
      public PublishConfiguration() {
        super("PublishConfiguration");
      }

      public PublishConfiguration_args getEmptyArgsInstance() {
        return new PublishConfiguration_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            PublishConfiguration_result result = new PublishConfiguration_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            PublishConfiguration_result result = new PublishConfiguration_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, PublishConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.PublishConfiguration(args.authentication, args.configuration,resultHandler);
      }
    }

    public static class CloneConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CloneConfiguration_args, Void> {
      public CloneConfiguration() {
        super("CloneConfiguration");
      }

      public CloneConfiguration_args getEmptyArgsInstance() {
        return new CloneConfiguration_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CloneConfiguration_result result = new CloneConfiguration_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CloneConfiguration_result result = new CloneConfiguration_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CloneConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CloneConfiguration(args.authentication, args.configuration,resultHandler);
      }
    }

    public static class CreateReferenceCSVFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateReferenceCSVFile_args, ReferenceCSVFileDescriptor> {
      public CreateReferenceCSVFile() {
        super("CreateReferenceCSVFile");
      }

      public CreateReferenceCSVFile_args getEmptyArgsInstance() {
        return new CreateReferenceCSVFile_args();
      }

      public AsyncMethodCallback<ReferenceCSVFileDescriptor> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReferenceCSVFileDescriptor>() { 
          public void onComplete(ReferenceCSVFileDescriptor o) {
            CreateReferenceCSVFile_result result = new CreateReferenceCSVFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateReferenceCSVFile_result result = new CreateReferenceCSVFile_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateReferenceCSVFile_args args, org.apache.thrift.async.AsyncMethodCallback<ReferenceCSVFileDescriptor> resultHandler) throws TException {
        iface.CreateReferenceCSVFile(args.authentication, args.configuration, args.fileDescriptor,resultHandler);
      }
    }

    public static class UpdateReferenceCSVFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateReferenceCSVFile_args, Void> {
      public UpdateReferenceCSVFile() {
        super("UpdateReferenceCSVFile");
      }

      public UpdateReferenceCSVFile_args getEmptyArgsInstance() {
        return new UpdateReferenceCSVFile_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateReferenceCSVFile_result result = new UpdateReferenceCSVFile_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateReferenceCSVFile_result result = new UpdateReferenceCSVFile_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateReferenceCSVFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateReferenceCSVFile(args.authentication, args.configuration, args.fileDescriptor,resultHandler);
      }
    }

    public static class DeleteReferenceCSVFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteReferenceCSVFile_args, Void> {
      public DeleteReferenceCSVFile() {
        super("DeleteReferenceCSVFile");
      }

      public DeleteReferenceCSVFile_args getEmptyArgsInstance() {
        return new DeleteReferenceCSVFile_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeleteReferenceCSVFile_result result = new DeleteReferenceCSVFile_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeleteReferenceCSVFile_result result = new DeleteReferenceCSVFile_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteReferenceCSVFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeleteReferenceCSVFile(args.authentication, args.configuration, args.fileDescriptor,resultHandler);
      }
    }

    public static class GetAllReferenceCSVFiles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAllReferenceCSVFiles_args, List<ReferenceCSVFileDescriptor>> {
      public GetAllReferenceCSVFiles() {
        super("GetAllReferenceCSVFiles");
      }

      public GetAllReferenceCSVFiles_args getEmptyArgsInstance() {
        return new GetAllReferenceCSVFiles_args();
      }

      public AsyncMethodCallback<List<ReferenceCSVFileDescriptor>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ReferenceCSVFileDescriptor>>() { 
          public void onComplete(List<ReferenceCSVFileDescriptor> o) {
            GetAllReferenceCSVFiles_result result = new GetAllReferenceCSVFiles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetAllReferenceCSVFiles_result result = new GetAllReferenceCSVFiles_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAllReferenceCSVFiles_args args, org.apache.thrift.async.AsyncMethodCallback<List<ReferenceCSVFileDescriptor>> resultHandler) throws TException {
        iface.GetAllReferenceCSVFiles(args.authentication, args.configuration,resultHandler);
      }
    }

    public static class CreateFieldsFromReferenceCSVFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateFieldsFromReferenceCSVFile_args, Void> {
      public CreateFieldsFromReferenceCSVFile() {
        super("CreateFieldsFromReferenceCSVFile");
      }

      public CreateFieldsFromReferenceCSVFile_args getEmptyArgsInstance() {
        return new CreateFieldsFromReferenceCSVFile_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateFieldsFromReferenceCSVFile_result result = new CreateFieldsFromReferenceCSVFile_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateFieldsFromReferenceCSVFile_result result = new CreateFieldsFromReferenceCSVFile_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateFieldsFromReferenceCSVFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateFieldsFromReferenceCSVFile(args.authentication, args.configurationVersion, args.fieldsConfigurationXML,resultHandler);
      }
    }

    public static class GetSchedulings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetSchedulings_args, Map<String,Scheduling>> {
      public GetSchedulings() {
        super("GetSchedulings");
      }

      public GetSchedulings_args getEmptyArgsInstance() {
        return new GetSchedulings_args();
      }

      public AsyncMethodCallback<Map<String,Scheduling>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Scheduling>>() { 
          public void onComplete(Map<String,Scheduling> o) {
            GetSchedulings_result result = new GetSchedulings_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetSchedulings_result result = new GetSchedulings_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetSchedulings_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Scheduling>> resultHandler) throws TException {
        iface.GetSchedulings(args.authentication, args.configuration,resultHandler);
      }
    }

    public static class CreateScheduling<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateScheduling_args, Void> {
      public CreateScheduling() {
        super("CreateScheduling");
      }

      public CreateScheduling_args getEmptyArgsInstance() {
        return new CreateScheduling_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateScheduling_result result = new CreateScheduling_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateScheduling_result result = new CreateScheduling_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateScheduling_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateScheduling(args.authentication, args.configuration, args.schedulingId,resultHandler);
      }
    }

    public static class UpdateScheduling<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateScheduling_args, Void> {
      public UpdateScheduling() {
        super("UpdateScheduling");
      }

      public UpdateScheduling_args getEmptyArgsInstance() {
        return new UpdateScheduling_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateScheduling_result result = new UpdateScheduling_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateScheduling_result result = new UpdateScheduling_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateScheduling_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateScheduling(args.authentication, args.configuration, args.scheduling,resultHandler);
      }
    }

    public static class DeleteScheduling<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteScheduling_args, Void> {
      public DeleteScheduling() {
        super("DeleteScheduling");
      }

      public DeleteScheduling_args getEmptyArgsInstance() {
        return new DeleteScheduling_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeleteScheduling_result result = new DeleteScheduling_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeleteScheduling_result result = new DeleteScheduling_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteScheduling_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeleteScheduling(args.authentication, args.configuration, args.schedulingId,resultHandler);
      }
    }

    public static class RunScheduling<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RunScheduling_args, Void> {
      public RunScheduling() {
        super("RunScheduling");
      }

      public RunScheduling_args getEmptyArgsInstance() {
        return new RunScheduling_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            RunScheduling_result result = new RunScheduling_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            RunScheduling_result result = new RunScheduling_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, RunScheduling_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.RunScheduling(args.authentication, args.configuration, args.parameters,resultHandler);
      }
    }

    public static class GetRecommendationBlocks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetRecommendationBlocks_args, Map<String,RecommendationBlock>> {
      public GetRecommendationBlocks() {
        super("GetRecommendationBlocks");
      }

      public GetRecommendationBlocks_args getEmptyArgsInstance() {
        return new GetRecommendationBlocks_args();
      }

      public AsyncMethodCallback<Map<String,RecommendationBlock>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,RecommendationBlock>>() { 
          public void onComplete(Map<String,RecommendationBlock> o) {
            GetRecommendationBlocks_result result = new GetRecommendationBlocks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetRecommendationBlocks_result result = new GetRecommendationBlocks_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetRecommendationBlocks_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,RecommendationBlock>> resultHandler) throws TException {
        iface.GetRecommendationBlocks(args.authentication, args.configuration,resultHandler);
      }
    }

    public static class CreateRecommendationBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateRecommendationBlock_args, Void> {
      public CreateRecommendationBlock() {
        super("CreateRecommendationBlock");
      }

      public CreateRecommendationBlock_args getEmptyArgsInstance() {
        return new CreateRecommendationBlock_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateRecommendationBlock_result result = new CreateRecommendationBlock_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateRecommendationBlock_result result = new CreateRecommendationBlock_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateRecommendationBlock_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateRecommendationBlock(args.authentication, args.configuration, args.recommendationBlockId,resultHandler);
      }
    }

    public static class UpdateRecommendationBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateRecommendationBlock_args, Void> {
      public UpdateRecommendationBlock() {
        super("UpdateRecommendationBlock");
      }

      public UpdateRecommendationBlock_args getEmptyArgsInstance() {
        return new UpdateRecommendationBlock_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateRecommendationBlock_result result = new UpdateRecommendationBlock_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateRecommendationBlock_result result = new UpdateRecommendationBlock_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateRecommendationBlock_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateRecommendationBlock(args.authentication, args.configuration, args.recommendationBlock,resultHandler);
      }
    }

    public static class DeleteRecommendationBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteRecommendationBlock_args, Void> {
      public DeleteRecommendationBlock() {
        super("DeleteRecommendationBlock");
      }

      public DeleteRecommendationBlock_args getEmptyArgsInstance() {
        return new DeleteRecommendationBlock_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeleteRecommendationBlock_result result = new DeleteRecommendationBlock_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeleteRecommendationBlock_result result = new DeleteRecommendationBlock_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteRecommendationBlock_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeleteRecommendationBlock(args.authentication, args.configuration, args.recommendationBlockId,resultHandler);
      }
    }

    public static class GetDataSources<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetDataSources_args, Map<String,DataSource>> {
      public GetDataSources() {
        super("GetDataSources");
      }

      public GetDataSources_args getEmptyArgsInstance() {
        return new GetDataSources_args();
      }

      public AsyncMethodCallback<Map<String,DataSource>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,DataSource>>() { 
          public void onComplete(Map<String,DataSource> o) {
            GetDataSources_result result = new GetDataSources_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetDataSources_result result = new GetDataSources_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetDataSources_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,DataSource>> resultHandler) throws TException {
        iface.GetDataSources(args.authentication, args.configuration,resultHandler);
      }
    }

    public static class CreateDataSource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateDataSource_args, Void> {
      public CreateDataSource() {
        super("CreateDataSource");
      }

      public CreateDataSource_args getEmptyArgsInstance() {
        return new CreateDataSource_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateDataSource_result result = new CreateDataSource_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateDataSource_result result = new CreateDataSource_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateDataSource_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateDataSource(args.authentication, args.configuration, args.dataSourceId,resultHandler);
      }
    }

    public static class UpdateDataSource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateDataSource_args, Void> {
      public UpdateDataSource() {
        super("UpdateDataSource");
      }

      public UpdateDataSource_args getEmptyArgsInstance() {
        return new UpdateDataSource_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateDataSource_result result = new UpdateDataSource_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateDataSource_result result = new UpdateDataSource_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateDataSource_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateDataSource(args.authentication, args.configuration, args.dataSource,resultHandler);
      }
    }

    public static class DeleteDataSource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteDataSource_args, Void> {
      public DeleteDataSource() {
        super("DeleteDataSource");
      }

      public DeleteDataSource_args getEmptyArgsInstance() {
        return new DeleteDataSource_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeleteDataSource_result result = new DeleteDataSource_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeleteDataSource_result result = new DeleteDataSource_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteDataSource_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeleteDataSource(args.authentication, args.configuration, args.dataSourceId,resultHandler);
      }
    }

    public static class GetDataExports<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetDataExports_args, Map<String,DataExport>> {
      public GetDataExports() {
        super("GetDataExports");
      }

      public GetDataExports_args getEmptyArgsInstance() {
        return new GetDataExports_args();
      }

      public AsyncMethodCallback<Map<String,DataExport>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,DataExport>>() { 
          public void onComplete(Map<String,DataExport> o) {
            GetDataExports_result result = new GetDataExports_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetDataExports_result result = new GetDataExports_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetDataExports_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,DataExport>> resultHandler) throws TException {
        iface.GetDataExports(args.authentication, args.configuration,resultHandler);
      }
    }

    public static class CreateDataExport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateDataExport_args, Void> {
      public CreateDataExport() {
        super("CreateDataExport");
      }

      public CreateDataExport_args getEmptyArgsInstance() {
        return new CreateDataExport_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateDataExport_result result = new CreateDataExport_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateDataExport_result result = new CreateDataExport_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateDataExport_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateDataExport(args.authentication, args.configuration, args.dataExportId,resultHandler);
      }
    }

    public static class UpdateDataExport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateDataExport_args, Void> {
      public UpdateDataExport() {
        super("UpdateDataExport");
      }

      public UpdateDataExport_args getEmptyArgsInstance() {
        return new UpdateDataExport_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateDataExport_result result = new UpdateDataExport_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateDataExport_result result = new UpdateDataExport_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateDataExport_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateDataExport(args.authentication, args.configuration, args.dataExport,resultHandler);
      }
    }

    public static class DeleteDataExport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteDataExport_args, Void> {
      public DeleteDataExport() {
        super("DeleteDataExport");
      }

      public DeleteDataExport_args getEmptyArgsInstance() {
        return new DeleteDataExport_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeleteDataExport_result result = new DeleteDataExport_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeleteDataExport_result result = new DeleteDataExport_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteDataExport_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeleteDataExport(args.authentication, args.configuration, args.dataExportId,resultHandler);
      }
    }

    public static class GetReferenceCSVFileDataSources<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetReferenceCSVFileDataSources_args, Map<String,ReferenceCSVDataSource>> {
      public GetReferenceCSVFileDataSources() {
        super("GetReferenceCSVFileDataSources");
      }

      public GetReferenceCSVFileDataSources_args getEmptyArgsInstance() {
        return new GetReferenceCSVFileDataSources_args();
      }

      public AsyncMethodCallback<Map<String,ReferenceCSVDataSource>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,ReferenceCSVDataSource>>() { 
          public void onComplete(Map<String,ReferenceCSVDataSource> o) {
            GetReferenceCSVFileDataSources_result result = new GetReferenceCSVFileDataSources_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetReferenceCSVFileDataSources_result result = new GetReferenceCSVFileDataSources_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetReferenceCSVFileDataSources_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,ReferenceCSVDataSource>> resultHandler) throws TException {
        iface.GetReferenceCSVFileDataSources(args.authentication, args.configuration,resultHandler);
      }
    }

    public static class CreateReferenceCSVDataSource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateReferenceCSVDataSource_args, Void> {
      public CreateReferenceCSVDataSource() {
        super("CreateReferenceCSVDataSource");
      }

      public CreateReferenceCSVDataSource_args getEmptyArgsInstance() {
        return new CreateReferenceCSVDataSource_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateReferenceCSVDataSource_result result = new CreateReferenceCSVDataSource_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateReferenceCSVDataSource_result result = new CreateReferenceCSVDataSource_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateReferenceCSVDataSource_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateReferenceCSVDataSource(args.authentication, args.configuration, args.dataSourceId,resultHandler);
      }
    }

    public static class UpdateReferenceCSVDataSource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateReferenceCSVDataSource_args, Void> {
      public UpdateReferenceCSVDataSource() {
        super("UpdateReferenceCSVDataSource");
      }

      public UpdateReferenceCSVDataSource_args getEmptyArgsInstance() {
        return new UpdateReferenceCSVDataSource_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateReferenceCSVDataSource_result result = new UpdateReferenceCSVDataSource_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateReferenceCSVDataSource_result result = new UpdateReferenceCSVDataSource_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateReferenceCSVDataSource_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateReferenceCSVDataSource(args.authentication, args.configuration, args.dataSource,resultHandler);
      }
    }

    public static class DeleteReferenceCSVDataSource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteReferenceCSVDataSource_args, Void> {
      public DeleteReferenceCSVDataSource() {
        super("DeleteReferenceCSVDataSource");
      }

      public DeleteReferenceCSVDataSource_args getEmptyArgsInstance() {
        return new DeleteReferenceCSVDataSource_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeleteReferenceCSVDataSource_result result = new DeleteReferenceCSVDataSource_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeleteReferenceCSVDataSource_result result = new DeleteReferenceCSVDataSource_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteReferenceCSVDataSource_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeleteReferenceCSVDataSource(args.authentication, args.configuration, args.dataSourceId,resultHandler);
      }
    }

    public static class GetLastTransactionID<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetLastTransactionID_args, String> {
      public GetLastTransactionID() {
        super("GetLastTransactionID");
      }

      public GetLastTransactionID_args getEmptyArgsInstance() {
        return new GetLastTransactionID_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            GetLastTransactionID_result result = new GetLastTransactionID_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetLastTransactionID_result result = new GetLastTransactionID_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetLastTransactionID_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.GetLastTransactionID(args.authentication, args.configuration,resultHandler);
      }
    }

    public static class GetPageViews<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetPageViews_args, List<TimeRangeValue>> {
      public GetPageViews() {
        super("GetPageViews");
      }

      public GetPageViews_args getEmptyArgsInstance() {
        return new GetPageViews_args();
      }

      public AsyncMethodCallback<List<TimeRangeValue>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TimeRangeValue>>() { 
          public void onComplete(List<TimeRangeValue> o) {
            GetPageViews_result result = new GetPageViews_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetPageViews_result result = new GetPageViews_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetPageViews_args args, org.apache.thrift.async.AsyncMethodCallback<List<TimeRangeValue>> resultHandler) throws TException {
        iface.GetPageViews(args.authentication, args.configuration, args.range, args.precision,resultHandler);
      }
    }

    public static class GetChoiceReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetChoiceReport_args, ChoiceReport> {
      public GetChoiceReport() {
        super("GetChoiceReport");
      }

      public GetChoiceReport_args getEmptyArgsInstance() {
        return new GetChoiceReport_args();
      }

      public AsyncMethodCallback<ChoiceReport> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ChoiceReport>() { 
          public void onComplete(ChoiceReport o) {
            GetChoiceReport_result result = new GetChoiceReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetChoiceReport_result result = new GetChoiceReport_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetChoiceReport_args args, org.apache.thrift.async.AsyncMethodCallback<ChoiceReport> resultHandler) throws TException {
        iface.GetChoiceReport(args.authentication, args.configuration, args.request,resultHandler);
      }
    }

    public static class GetTransactionReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetTransactionReport_args, TransactionReport> {
      public GetTransactionReport() {
        super("GetTransactionReport");
      }

      public GetTransactionReport_args getEmptyArgsInstance() {
        return new GetTransactionReport_args();
      }

      public AsyncMethodCallback<TransactionReport> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TransactionReport>() { 
          public void onComplete(TransactionReport o) {
            GetTransactionReport_result result = new GetTransactionReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetTransactionReport_result result = new GetTransactionReport_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetTransactionReport_args args, org.apache.thrift.async.AsyncMethodCallback<TransactionReport> resultHandler) throws TException {
        iface.GetTransactionReport(args.authentication, args.configuration, args.request,resultHandler);
      }
    }

    public static class GetBehaviorReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetBehaviorReport_args, BehaviorReport> {
      public GetBehaviorReport() {
        super("GetBehaviorReport");
      }

      public GetBehaviorReport_args getEmptyArgsInstance() {
        return new GetBehaviorReport_args();
      }

      public AsyncMethodCallback<BehaviorReport> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<BehaviorReport>() { 
          public void onComplete(BehaviorReport o) {
            GetBehaviorReport_result result = new GetBehaviorReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetBehaviorReport_result result = new GetBehaviorReport_result();
            if (e instanceof DataIntelligenceServiceException) {
                        result.e = (DataIntelligenceServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetBehaviorReport_args args, org.apache.thrift.async.AsyncMethodCallback<BehaviorReport> resultHandler) throws TException {
        iface.GetBehaviorReport(args.authentication, args.configuration, args.request,resultHandler);
      }
    }

  }

  public static class GetAuthentication_args implements org.apache.thrift.TBase<GetAuthentication_args, GetAuthentication_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAuthentication_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAuthentication_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAuthentication_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAuthentication_argsTupleSchemeFactory());
    }

    public AuthenticationRequest authentication; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AuthenticationRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAuthentication_args.class, metaDataMap);
    }

    public GetAuthentication_args() {
    }

    public GetAuthentication_args(
      AuthenticationRequest authentication)
    {
      this();
      this.authentication = authentication;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAuthentication_args(GetAuthentication_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new AuthenticationRequest(other.authentication);
      }
    }

    public GetAuthentication_args deepCopy() {
      return new GetAuthentication_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
    }

    public AuthenticationRequest getAuthentication() {
      return this.authentication;
    }

    public GetAuthentication_args setAuthentication(AuthenticationRequest authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((AuthenticationRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAuthentication_args)
        return this.equals((GetAuthentication_args)that);
      return false;
    }

    public boolean equals(GetAuthentication_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAuthentication_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAuthentication_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAuthentication_argsStandardSchemeFactory implements SchemeFactory {
      public GetAuthentication_argsStandardScheme getScheme() {
        return new GetAuthentication_argsStandardScheme();
      }
    }

    private static class GetAuthentication_argsStandardScheme extends StandardScheme<GetAuthentication_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAuthentication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new AuthenticationRequest();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAuthentication_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAuthentication_argsTupleSchemeFactory implements SchemeFactory {
      public GetAuthentication_argsTupleScheme getScheme() {
        return new GetAuthentication_argsTupleScheme();
      }
    }

    private static class GetAuthentication_argsTupleScheme extends TupleScheme<GetAuthentication_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAuthentication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAuthentication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authentication = new AuthenticationRequest();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
      }
    }

  }

  public static class GetAuthentication_result implements org.apache.thrift.TBase<GetAuthentication_result, GetAuthentication_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAuthentication_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAuthentication_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAuthentication_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAuthentication_resultTupleSchemeFactory());
    }

    public Authentication success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAuthentication_result.class, metaDataMap);
    }

    public GetAuthentication_result() {
    }

    public GetAuthentication_result(
      Authentication success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAuthentication_result(GetAuthentication_result other) {
      if (other.isSetSuccess()) {
        this.success = new Authentication(other.success);
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetAuthentication_result deepCopy() {
      return new GetAuthentication_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Authentication getSuccess() {
      return this.success;
    }

    public GetAuthentication_result setSuccess(Authentication success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetAuthentication_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Authentication)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAuthentication_result)
        return this.equals((GetAuthentication_result)that);
      return false;
    }

    public boolean equals(GetAuthentication_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAuthentication_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAuthentication_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAuthentication_resultStandardSchemeFactory implements SchemeFactory {
      public GetAuthentication_resultStandardScheme getScheme() {
        return new GetAuthentication_resultStandardScheme();
      }
    }

    private static class GetAuthentication_resultStandardScheme extends StandardScheme<GetAuthentication_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAuthentication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Authentication();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAuthentication_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAuthentication_resultTupleSchemeFactory implements SchemeFactory {
      public GetAuthentication_resultTupleScheme getScheme() {
        return new GetAuthentication_resultTupleScheme();
      }
    }

    private static class GetAuthentication_resultTupleScheme extends TupleScheme<GetAuthentication_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAuthentication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAuthentication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Authentication();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class UpdatePassword_args implements org.apache.thrift.TBase<UpdatePassword_args, UpdatePassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdatePassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdatePassword_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("newPassword", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdatePassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdatePassword_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public String newPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      NEW_PASSWORD((short)2, "newPassword");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // NEW_PASSWORD
            return NEW_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.NEW_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("newPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdatePassword_args.class, metaDataMap);
    }

    public UpdatePassword_args() {
    }

    public UpdatePassword_args(
      Authentication authentication,
      String newPassword)
    {
      this();
      this.authentication = authentication;
      this.newPassword = newPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdatePassword_args(UpdatePassword_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetNewPassword()) {
        this.newPassword = other.newPassword;
      }
    }

    public UpdatePassword_args deepCopy() {
      return new UpdatePassword_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.newPassword = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public UpdatePassword_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public String getNewPassword() {
      return this.newPassword;
    }

    public UpdatePassword_args setNewPassword(String newPassword) {
      this.newPassword = newPassword;
      return this;
    }

    public void unsetNewPassword() {
      this.newPassword = null;
    }

    /** Returns true if field newPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPassword() {
      return this.newPassword != null;
    }

    public void setNewPasswordIsSet(boolean value) {
      if (!value) {
        this.newPassword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case NEW_PASSWORD:
        if (value == null) {
          unsetNewPassword();
        } else {
          setNewPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case NEW_PASSWORD:
        return getNewPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case NEW_PASSWORD:
        return isSetNewPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdatePassword_args)
        return this.equals((UpdatePassword_args)that);
      return false;
    }

    public boolean equals(UpdatePassword_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_newPassword = true && this.isSetNewPassword();
      boolean that_present_newPassword = true && that.isSetNewPassword();
      if (this_present_newPassword || that_present_newPassword) {
        if (!(this_present_newPassword && that_present_newPassword))
          return false;
        if (!this.newPassword.equals(that.newPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_newPassword = true && (isSetNewPassword());
      list.add(present_newPassword);
      if (present_newPassword)
        list.add(newPassword);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdatePassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewPassword()).compareTo(other.isSetNewPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPassword, other.newPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdatePassword_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPassword:");
      if (this.newPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.newPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdatePassword_argsStandardSchemeFactory implements SchemeFactory {
      public UpdatePassword_argsStandardScheme getScheme() {
        return new UpdatePassword_argsStandardScheme();
      }
    }

    private static class UpdatePassword_argsStandardScheme extends StandardScheme<UpdatePassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdatePassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newPassword = iprot.readString();
                struct.setNewPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdatePassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.newPassword != null) {
          oprot.writeFieldBegin(NEW_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.newPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdatePassword_argsTupleSchemeFactory implements SchemeFactory {
      public UpdatePassword_argsTupleScheme getScheme() {
        return new UpdatePassword_argsTupleScheme();
      }
    }

    private static class UpdatePassword_argsTupleScheme extends TupleScheme<UpdatePassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdatePassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetNewPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetNewPassword()) {
          oprot.writeString(struct.newPassword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdatePassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newPassword = iprot.readString();
          struct.setNewPasswordIsSet(true);
        }
      }
    }

  }

  public static class UpdatePassword_result implements org.apache.thrift.TBase<UpdatePassword_result, UpdatePassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdatePassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdatePassword_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdatePassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdatePassword_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdatePassword_result.class, metaDataMap);
    }

    public UpdatePassword_result() {
    }

    public UpdatePassword_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdatePassword_result(UpdatePassword_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public UpdatePassword_result deepCopy() {
      return new UpdatePassword_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public UpdatePassword_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdatePassword_result)
        return this.equals((UpdatePassword_result)that);
      return false;
    }

    public boolean equals(UpdatePassword_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdatePassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdatePassword_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdatePassword_resultStandardSchemeFactory implements SchemeFactory {
      public UpdatePassword_resultStandardScheme getScheme() {
        return new UpdatePassword_resultStandardScheme();
      }
    }

    private static class UpdatePassword_resultStandardScheme extends StandardScheme<UpdatePassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdatePassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdatePassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdatePassword_resultTupleSchemeFactory implements SchemeFactory {
      public UpdatePassword_resultTupleScheme getScheme() {
        return new UpdatePassword_resultTupleScheme();
      }
    }

    private static class UpdatePassword_resultTupleScheme extends TupleScheme<UpdatePassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdatePassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdatePassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetConfigurationVersion_args implements org.apache.thrift.TBase<GetConfigurationVersion_args, GetConfigurationVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetConfigurationVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetConfigurationVersion_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("versionType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetConfigurationVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetConfigurationVersion_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    /**
     * 
     * @see ConfigurationVersionType
     */
    public ConfigurationVersionType versionType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      /**
       * 
       * @see ConfigurationVersionType
       */
      VERSION_TYPE((short)2, "versionType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // VERSION_TYPE
            return VERSION_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.VERSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("versionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ConfigurationVersionType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetConfigurationVersion_args.class, metaDataMap);
    }

    public GetConfigurationVersion_args() {
    }

    public GetConfigurationVersion_args(
      Authentication authentication,
      ConfigurationVersionType versionType)
    {
      this();
      this.authentication = authentication;
      this.versionType = versionType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetConfigurationVersion_args(GetConfigurationVersion_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetVersionType()) {
        this.versionType = other.versionType;
      }
    }

    public GetConfigurationVersion_args deepCopy() {
      return new GetConfigurationVersion_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.versionType = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetConfigurationVersion_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    /**
     * 
     * @see ConfigurationVersionType
     */
    public ConfigurationVersionType getVersionType() {
      return this.versionType;
    }

    /**
     * 
     * @see ConfigurationVersionType
     */
    public GetConfigurationVersion_args setVersionType(ConfigurationVersionType versionType) {
      this.versionType = versionType;
      return this;
    }

    public void unsetVersionType() {
      this.versionType = null;
    }

    /** Returns true if field versionType is set (has been assigned a value) and false otherwise */
    public boolean isSetVersionType() {
      return this.versionType != null;
    }

    public void setVersionTypeIsSet(boolean value) {
      if (!value) {
        this.versionType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case VERSION_TYPE:
        if (value == null) {
          unsetVersionType();
        } else {
          setVersionType((ConfigurationVersionType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case VERSION_TYPE:
        return getVersionType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case VERSION_TYPE:
        return isSetVersionType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetConfigurationVersion_args)
        return this.equals((GetConfigurationVersion_args)that);
      return false;
    }

    public boolean equals(GetConfigurationVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_versionType = true && this.isSetVersionType();
      boolean that_present_versionType = true && that.isSetVersionType();
      if (this_present_versionType || that_present_versionType) {
        if (!(this_present_versionType && that_present_versionType))
          return false;
        if (!this.versionType.equals(that.versionType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_versionType = true && (isSetVersionType());
      list.add(present_versionType);
      if (present_versionType)
        list.add(versionType.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(GetConfigurationVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersionType()).compareTo(other.isSetVersionType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersionType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionType, other.versionType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetConfigurationVersion_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("versionType:");
      if (this.versionType == null) {
        sb.append("null");
      } else {
        sb.append(this.versionType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetConfigurationVersion_argsStandardSchemeFactory implements SchemeFactory {
      public GetConfigurationVersion_argsStandardScheme getScheme() {
        return new GetConfigurationVersion_argsStandardScheme();
      }
    }

    private static class GetConfigurationVersion_argsStandardScheme extends StandardScheme<GetConfigurationVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetConfigurationVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.versionType = com.boxalino.dataintelligence.api.thrift.ConfigurationVersionType.findByValue(iprot.readI32());
                struct.setVersionTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetConfigurationVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.versionType != null) {
          oprot.writeFieldBegin(VERSION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.versionType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetConfigurationVersion_argsTupleSchemeFactory implements SchemeFactory {
      public GetConfigurationVersion_argsTupleScheme getScheme() {
        return new GetConfigurationVersion_argsTupleScheme();
      }
    }

    private static class GetConfigurationVersion_argsTupleScheme extends TupleScheme<GetConfigurationVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetConfigurationVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetVersionType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetVersionType()) {
          oprot.writeI32(struct.versionType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetConfigurationVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.versionType = com.boxalino.dataintelligence.api.thrift.ConfigurationVersionType.findByValue(iprot.readI32());
          struct.setVersionTypeIsSet(true);
        }
      }
    }

  }

  public static class GetConfigurationVersion_result implements org.apache.thrift.TBase<GetConfigurationVersion_result, GetConfigurationVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetConfigurationVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetConfigurationVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetConfigurationVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetConfigurationVersion_resultTupleSchemeFactory());
    }

    public ConfigurationVersion success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetConfigurationVersion_result.class, metaDataMap);
    }

    public GetConfigurationVersion_result() {
    }

    public GetConfigurationVersion_result(
      ConfigurationVersion success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetConfigurationVersion_result(GetConfigurationVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = new ConfigurationVersion(other.success);
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetConfigurationVersion_result deepCopy() {
      return new GetConfigurationVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ConfigurationVersion getSuccess() {
      return this.success;
    }

    public GetConfigurationVersion_result setSuccess(ConfigurationVersion success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetConfigurationVersion_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ConfigurationVersion)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetConfigurationVersion_result)
        return this.equals((GetConfigurationVersion_result)that);
      return false;
    }

    public boolean equals(GetConfigurationVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetConfigurationVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetConfigurationVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetConfigurationVersion_resultStandardSchemeFactory implements SchemeFactory {
      public GetConfigurationVersion_resultStandardScheme getScheme() {
        return new GetConfigurationVersion_resultStandardScheme();
      }
    }

    private static class GetConfigurationVersion_resultStandardScheme extends StandardScheme<GetConfigurationVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetConfigurationVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ConfigurationVersion();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetConfigurationVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetConfigurationVersion_resultTupleSchemeFactory implements SchemeFactory {
      public GetConfigurationVersion_resultTupleScheme getScheme() {
        return new GetConfigurationVersion_resultTupleScheme();
      }
    }

    private static class GetConfigurationVersion_resultTupleScheme extends TupleScheme<GetConfigurationVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetConfigurationVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetConfigurationVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ConfigurationVersion();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class SetDataSourcesConfiguration_args implements org.apache.thrift.TBase<SetDataSourcesConfiguration_args, SetDataSourcesConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<SetDataSourcesConfiguration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetDataSourcesConfiguration_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("configurationVersion", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_SOURCES_CONFIGURATION_XML_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSourcesConfigurationXML", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetDataSourcesConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetDataSourcesConfiguration_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configurationVersion; // required
    public String dataSourcesConfigurationXML; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION_VERSION((short)2, "configurationVersion"),
      DATA_SOURCES_CONFIGURATION_XML((short)3, "dataSourcesConfigurationXML");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION_VERSION
            return CONFIGURATION_VERSION;
          case 3: // DATA_SOURCES_CONFIGURATION_XML
            return DATA_SOURCES_CONFIGURATION_XML;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION_VERSION, new org.apache.thrift.meta_data.FieldMetaData("configurationVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.DATA_SOURCES_CONFIGURATION_XML, new org.apache.thrift.meta_data.FieldMetaData("dataSourcesConfigurationXML", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetDataSourcesConfiguration_args.class, metaDataMap);
    }

    public SetDataSourcesConfiguration_args() {
    }

    public SetDataSourcesConfiguration_args(
      Authentication authentication,
      ConfigurationVersion configurationVersion,
      String dataSourcesConfigurationXML)
    {
      this();
      this.authentication = authentication;
      this.configurationVersion = configurationVersion;
      this.dataSourcesConfigurationXML = dataSourcesConfigurationXML;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetDataSourcesConfiguration_args(SetDataSourcesConfiguration_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfigurationVersion()) {
        this.configurationVersion = new ConfigurationVersion(other.configurationVersion);
      }
      if (other.isSetDataSourcesConfigurationXML()) {
        this.dataSourcesConfigurationXML = other.dataSourcesConfigurationXML;
      }
    }

    public SetDataSourcesConfiguration_args deepCopy() {
      return new SetDataSourcesConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configurationVersion = null;
      this.dataSourcesConfigurationXML = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public SetDataSourcesConfiguration_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfigurationVersion() {
      return this.configurationVersion;
    }

    public SetDataSourcesConfiguration_args setConfigurationVersion(ConfigurationVersion configurationVersion) {
      this.configurationVersion = configurationVersion;
      return this;
    }

    public void unsetConfigurationVersion() {
      this.configurationVersion = null;
    }

    /** Returns true if field configurationVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigurationVersion() {
      return this.configurationVersion != null;
    }

    public void setConfigurationVersionIsSet(boolean value) {
      if (!value) {
        this.configurationVersion = null;
      }
    }

    public String getDataSourcesConfigurationXML() {
      return this.dataSourcesConfigurationXML;
    }

    public SetDataSourcesConfiguration_args setDataSourcesConfigurationXML(String dataSourcesConfigurationXML) {
      this.dataSourcesConfigurationXML = dataSourcesConfigurationXML;
      return this;
    }

    public void unsetDataSourcesConfigurationXML() {
      this.dataSourcesConfigurationXML = null;
    }

    /** Returns true if field dataSourcesConfigurationXML is set (has been assigned a value) and false otherwise */
    public boolean isSetDataSourcesConfigurationXML() {
      return this.dataSourcesConfigurationXML != null;
    }

    public void setDataSourcesConfigurationXMLIsSet(boolean value) {
      if (!value) {
        this.dataSourcesConfigurationXML = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION_VERSION:
        if (value == null) {
          unsetConfigurationVersion();
        } else {
          setConfigurationVersion((ConfigurationVersion)value);
        }
        break;

      case DATA_SOURCES_CONFIGURATION_XML:
        if (value == null) {
          unsetDataSourcesConfigurationXML();
        } else {
          setDataSourcesConfigurationXML((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION_VERSION:
        return getConfigurationVersion();

      case DATA_SOURCES_CONFIGURATION_XML:
        return getDataSourcesConfigurationXML();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION_VERSION:
        return isSetConfigurationVersion();
      case DATA_SOURCES_CONFIGURATION_XML:
        return isSetDataSourcesConfigurationXML();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetDataSourcesConfiguration_args)
        return this.equals((SetDataSourcesConfiguration_args)that);
      return false;
    }

    public boolean equals(SetDataSourcesConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configurationVersion = true && this.isSetConfigurationVersion();
      boolean that_present_configurationVersion = true && that.isSetConfigurationVersion();
      if (this_present_configurationVersion || that_present_configurationVersion) {
        if (!(this_present_configurationVersion && that_present_configurationVersion))
          return false;
        if (!this.configurationVersion.equals(that.configurationVersion))
          return false;
      }

      boolean this_present_dataSourcesConfigurationXML = true && this.isSetDataSourcesConfigurationXML();
      boolean that_present_dataSourcesConfigurationXML = true && that.isSetDataSourcesConfigurationXML();
      if (this_present_dataSourcesConfigurationXML || that_present_dataSourcesConfigurationXML) {
        if (!(this_present_dataSourcesConfigurationXML && that_present_dataSourcesConfigurationXML))
          return false;
        if (!this.dataSourcesConfigurationXML.equals(that.dataSourcesConfigurationXML))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configurationVersion = true && (isSetConfigurationVersion());
      list.add(present_configurationVersion);
      if (present_configurationVersion)
        list.add(configurationVersion);

      boolean present_dataSourcesConfigurationXML = true && (isSetDataSourcesConfigurationXML());
      list.add(present_dataSourcesConfigurationXML);
      if (present_dataSourcesConfigurationXML)
        list.add(dataSourcesConfigurationXML);

      return list.hashCode();
    }

    @Override
    public int compareTo(SetDataSourcesConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfigurationVersion()).compareTo(other.isSetConfigurationVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigurationVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configurationVersion, other.configurationVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataSourcesConfigurationXML()).compareTo(other.isSetDataSourcesConfigurationXML());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataSourcesConfigurationXML()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSourcesConfigurationXML, other.dataSourcesConfigurationXML);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetDataSourcesConfiguration_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configurationVersion:");
      if (this.configurationVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.configurationVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataSourcesConfigurationXML:");
      if (this.dataSourcesConfigurationXML == null) {
        sb.append("null");
      } else {
        sb.append(this.dataSourcesConfigurationXML);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configurationVersion != null) {
        configurationVersion.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetDataSourcesConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public SetDataSourcesConfiguration_argsStandardScheme getScheme() {
        return new SetDataSourcesConfiguration_argsStandardScheme();
      }
    }

    private static class SetDataSourcesConfiguration_argsStandardScheme extends StandardScheme<SetDataSourcesConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetDataSourcesConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configurationVersion = new ConfigurationVersion();
                struct.configurationVersion.read(iprot);
                struct.setConfigurationVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA_SOURCES_CONFIGURATION_XML
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataSourcesConfigurationXML = iprot.readString();
                struct.setDataSourcesConfigurationXMLIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetDataSourcesConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configurationVersion != null) {
          oprot.writeFieldBegin(CONFIGURATION_VERSION_FIELD_DESC);
          struct.configurationVersion.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataSourcesConfigurationXML != null) {
          oprot.writeFieldBegin(DATA_SOURCES_CONFIGURATION_XML_FIELD_DESC);
          oprot.writeString(struct.dataSourcesConfigurationXML);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetDataSourcesConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public SetDataSourcesConfiguration_argsTupleScheme getScheme() {
        return new SetDataSourcesConfiguration_argsTupleScheme();
      }
    }

    private static class SetDataSourcesConfiguration_argsTupleScheme extends TupleScheme<SetDataSourcesConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetDataSourcesConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfigurationVersion()) {
          optionals.set(1);
        }
        if (struct.isSetDataSourcesConfigurationXML()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfigurationVersion()) {
          struct.configurationVersion.write(oprot);
        }
        if (struct.isSetDataSourcesConfigurationXML()) {
          oprot.writeString(struct.dataSourcesConfigurationXML);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetDataSourcesConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configurationVersion = new ConfigurationVersion();
          struct.configurationVersion.read(iprot);
          struct.setConfigurationVersionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dataSourcesConfigurationXML = iprot.readString();
          struct.setDataSourcesConfigurationXMLIsSet(true);
        }
      }
    }

  }

  public static class SetDataSourcesConfiguration_result implements org.apache.thrift.TBase<SetDataSourcesConfiguration_result, SetDataSourcesConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<SetDataSourcesConfiguration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetDataSourcesConfiguration_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new SetDataSourcesConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new SetDataSourcesConfiguration_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetDataSourcesConfiguration_result.class, metaDataMap);
    }

    public SetDataSourcesConfiguration_result() {
    }

    public SetDataSourcesConfiguration_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SetDataSourcesConfiguration_result(SetDataSourcesConfiguration_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public SetDataSourcesConfiguration_result deepCopy() {
      return new SetDataSourcesConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public SetDataSourcesConfiguration_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof SetDataSourcesConfiguration_result)
        return this.equals((SetDataSourcesConfiguration_result)that);
      return false;
    }

    public boolean equals(SetDataSourcesConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(SetDataSourcesConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("SetDataSourcesConfiguration_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SetDataSourcesConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public SetDataSourcesConfiguration_resultStandardScheme getScheme() {
        return new SetDataSourcesConfiguration_resultStandardScheme();
      }
    }

    private static class SetDataSourcesConfiguration_resultStandardScheme extends StandardScheme<SetDataSourcesConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, SetDataSourcesConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, SetDataSourcesConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SetDataSourcesConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public SetDataSourcesConfiguration_resultTupleScheme getScheme() {
        return new SetDataSourcesConfiguration_resultTupleScheme();
      }
    }

    private static class SetDataSourcesConfiguration_resultTupleScheme extends TupleScheme<SetDataSourcesConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SetDataSourcesConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SetDataSourcesConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetFields_args implements org.apache.thrift.TBase<GetFields_args, GetFields_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetFields_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetFields_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetFields_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetFields_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetFields_args.class, metaDataMap);
    }

    public GetFields_args() {
    }

    public GetFields_args(
      Authentication authentication,
      ConfigurationVersion configuration)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetFields_args(GetFields_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
    }

    public GetFields_args deepCopy() {
      return new GetFields_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetFields_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetFields_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetFields_args)
        return this.equals((GetFields_args)that);
      return false;
    }

    public boolean equals(GetFields_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetFields_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetFields_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetFields_argsStandardSchemeFactory implements SchemeFactory {
      public GetFields_argsStandardScheme getScheme() {
        return new GetFields_argsStandardScheme();
      }
    }

    private static class GetFields_argsStandardScheme extends StandardScheme<GetFields_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetFields_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetFields_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetFields_argsTupleSchemeFactory implements SchemeFactory {
      public GetFields_argsTupleScheme getScheme() {
        return new GetFields_argsTupleScheme();
      }
    }

    private static class GetFields_argsTupleScheme extends TupleScheme<GetFields_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetFields_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetFields_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
      }
    }

  }

  public static class GetFields_result implements org.apache.thrift.TBase<GetFields_result, GetFields_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetFields_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetFields_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetFields_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetFields_resultTupleSchemeFactory());
    }

    public Map<String,Field> success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Field.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetFields_result.class, metaDataMap);
    }

    public GetFields_result() {
    }

    public GetFields_result(
      Map<String,Field> success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetFields_result(GetFields_result other) {
      if (other.isSetSuccess()) {
        Map<String,Field> __this__success = new HashMap<String,Field>(other.success.size());
        for (Map.Entry<String, Field> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Field other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Field __this__success_copy_value = new Field(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetFields_result deepCopy() {
      return new GetFields_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Field val) {
      if (this.success == null) {
        this.success = new HashMap<String,Field>();
      }
      this.success.put(key, val);
    }

    public Map<String,Field> getSuccess() {
      return this.success;
    }

    public GetFields_result setSuccess(Map<String,Field> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetFields_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Field>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetFields_result)
        return this.equals((GetFields_result)that);
      return false;
    }

    public boolean equals(GetFields_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetFields_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetFields_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetFields_resultStandardSchemeFactory implements SchemeFactory {
      public GetFields_resultStandardScheme getScheme() {
        return new GetFields_resultStandardScheme();
      }
    }

    private static class GetFields_resultStandardScheme extends StandardScheme<GetFields_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetFields_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map298 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Field>(2*_map298.size);
                  String _key299;
                  Field _val300;
                  for (int _i301 = 0; _i301 < _map298.size; ++_i301)
                  {
                    _key299 = iprot.readString();
                    _val300 = new Field();
                    _val300.read(iprot);
                    struct.success.put(_key299, _val300);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetFields_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, Field> _iter302 : struct.success.entrySet())
            {
              oprot.writeString(_iter302.getKey());
              _iter302.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetFields_resultTupleSchemeFactory implements SchemeFactory {
      public GetFields_resultTupleScheme getScheme() {
        return new GetFields_resultTupleScheme();
      }
    }

    private static class GetFields_resultTupleScheme extends TupleScheme<GetFields_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetFields_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Field> _iter303 : struct.success.entrySet())
            {
              oprot.writeString(_iter303.getKey());
              _iter303.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetFields_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map304 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,Field>(2*_map304.size);
            String _key305;
            Field _val306;
            for (int _i307 = 0; _i307 < _map304.size; ++_i307)
            {
              _key305 = iprot.readString();
              _val306 = new Field();
              _val306.read(iprot);
              struct.success.put(_key305, _val306);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class CreateField_args implements org.apache.thrift.TBase<CreateField_args, CreateField_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateField_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateField_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateField_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateField_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String fieldId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      FIELD_ID((short)3, "fieldId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // FIELD_ID
            return FIELD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.FIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("fieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateField_args.class, metaDataMap);
    }

    public CreateField_args() {
    }

    public CreateField_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String fieldId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.fieldId = fieldId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateField_args(CreateField_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetFieldId()) {
        this.fieldId = other.fieldId;
      }
    }

    public CreateField_args deepCopy() {
      return new CreateField_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.fieldId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public CreateField_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public CreateField_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getFieldId() {
      return this.fieldId;
    }

    public CreateField_args setFieldId(String fieldId) {
      this.fieldId = fieldId;
      return this;
    }

    public void unsetFieldId() {
      this.fieldId = null;
    }

    /** Returns true if field fieldId is set (has been assigned a value) and false otherwise */
    public boolean isSetFieldId() {
      return this.fieldId != null;
    }

    public void setFieldIdIsSet(boolean value) {
      if (!value) {
        this.fieldId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case FIELD_ID:
        if (value == null) {
          unsetFieldId();
        } else {
          setFieldId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case FIELD_ID:
        return getFieldId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case FIELD_ID:
        return isSetFieldId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateField_args)
        return this.equals((CreateField_args)that);
      return false;
    }

    public boolean equals(CreateField_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_fieldId = true && this.isSetFieldId();
      boolean that_present_fieldId = true && that.isSetFieldId();
      if (this_present_fieldId || that_present_fieldId) {
        if (!(this_present_fieldId && that_present_fieldId))
          return false;
        if (!this.fieldId.equals(that.fieldId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_fieldId = true && (isSetFieldId());
      list.add(present_fieldId);
      if (present_fieldId)
        list.add(fieldId);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateField_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFieldId()).compareTo(other.isSetFieldId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFieldId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldId, other.fieldId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateField_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fieldId:");
      if (this.fieldId == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateField_argsStandardSchemeFactory implements SchemeFactory {
      public CreateField_argsStandardScheme getScheme() {
        return new CreateField_argsStandardScheme();
      }
    }

    private static class CreateField_argsStandardScheme extends StandardScheme<CreateField_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateField_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FIELD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fieldId = iprot.readString();
                struct.setFieldIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateField_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fieldId != null) {
          oprot.writeFieldBegin(FIELD_ID_FIELD_DESC);
          oprot.writeString(struct.fieldId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateField_argsTupleSchemeFactory implements SchemeFactory {
      public CreateField_argsTupleScheme getScheme() {
        return new CreateField_argsTupleScheme();
      }
    }

    private static class CreateField_argsTupleScheme extends TupleScheme<CreateField_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateField_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetFieldId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetFieldId()) {
          oprot.writeString(struct.fieldId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateField_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fieldId = iprot.readString();
          struct.setFieldIdIsSet(true);
        }
      }
    }

  }

  public static class CreateField_result implements org.apache.thrift.TBase<CreateField_result, CreateField_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateField_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateField_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateField_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateField_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateField_result.class, metaDataMap);
    }

    public CreateField_result() {
    }

    public CreateField_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateField_result(CreateField_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public CreateField_result deepCopy() {
      return new CreateField_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public CreateField_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateField_result)
        return this.equals((CreateField_result)that);
      return false;
    }

    public boolean equals(CreateField_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateField_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateField_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateField_resultStandardSchemeFactory implements SchemeFactory {
      public CreateField_resultStandardScheme getScheme() {
        return new CreateField_resultStandardScheme();
      }
    }

    private static class CreateField_resultStandardScheme extends StandardScheme<CreateField_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateField_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateField_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateField_resultTupleSchemeFactory implements SchemeFactory {
      public CreateField_resultTupleScheme getScheme() {
        return new CreateField_resultTupleScheme();
      }
    }

    private static class CreateField_resultTupleScheme extends TupleScheme<CreateField_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateField_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateField_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class UpdateField_args implements org.apache.thrift.TBase<UpdateField_args, UpdateField_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateField_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateField_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("field", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateField_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateField_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public Field field; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      FIELD((short)3, "field");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // FIELD
            return FIELD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.FIELD, new org.apache.thrift.meta_data.FieldMetaData("field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Field.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateField_args.class, metaDataMap);
    }

    public UpdateField_args() {
    }

    public UpdateField_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      Field field)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.field = field;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateField_args(UpdateField_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetField()) {
        this.field = new Field(other.field);
      }
    }

    public UpdateField_args deepCopy() {
      return new UpdateField_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.field = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public UpdateField_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public UpdateField_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public Field getField() {
      return this.field;
    }

    public UpdateField_args setField(Field field) {
      this.field = field;
      return this;
    }

    public void unsetField() {
      this.field = null;
    }

    /** Returns true if field field is set (has been assigned a value) and false otherwise */
    public boolean isSetField() {
      return this.field != null;
    }

    public void setFieldIsSet(boolean value) {
      if (!value) {
        this.field = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case FIELD:
        if (value == null) {
          unsetField();
        } else {
          setField((Field)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case FIELD:
        return getField();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case FIELD:
        return isSetField();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateField_args)
        return this.equals((UpdateField_args)that);
      return false;
    }

    public boolean equals(UpdateField_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_field = true && this.isSetField();
      boolean that_present_field = true && that.isSetField();
      if (this_present_field || that_present_field) {
        if (!(this_present_field && that_present_field))
          return false;
        if (!this.field.equals(that.field))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_field = true && (isSetField());
      list.add(present_field);
      if (present_field)
        list.add(field);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateField_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetField()).compareTo(other.isSetField());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetField()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field, other.field);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateField_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("field:");
      if (this.field == null) {
        sb.append("null");
      } else {
        sb.append(this.field);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (field != null) {
        field.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateField_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateField_argsStandardScheme getScheme() {
        return new UpdateField_argsStandardScheme();
      }
    }

    private static class UpdateField_argsStandardScheme extends StandardScheme<UpdateField_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateField_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FIELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.field = new Field();
                struct.field.read(iprot);
                struct.setFieldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateField_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.field != null) {
          oprot.writeFieldBegin(FIELD_FIELD_DESC);
          struct.field.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateField_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateField_argsTupleScheme getScheme() {
        return new UpdateField_argsTupleScheme();
      }
    }

    private static class UpdateField_argsTupleScheme extends TupleScheme<UpdateField_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateField_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetField()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetField()) {
          struct.field.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateField_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.field = new Field();
          struct.field.read(iprot);
          struct.setFieldIsSet(true);
        }
      }
    }

  }

  public static class UpdateField_result implements org.apache.thrift.TBase<UpdateField_result, UpdateField_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateField_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateField_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateField_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateField_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateField_result.class, metaDataMap);
    }

    public UpdateField_result() {
    }

    public UpdateField_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateField_result(UpdateField_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public UpdateField_result deepCopy() {
      return new UpdateField_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public UpdateField_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateField_result)
        return this.equals((UpdateField_result)that);
      return false;
    }

    public boolean equals(UpdateField_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateField_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateField_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateField_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateField_resultStandardScheme getScheme() {
        return new UpdateField_resultStandardScheme();
      }
    }

    private static class UpdateField_resultStandardScheme extends StandardScheme<UpdateField_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateField_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateField_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateField_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateField_resultTupleScheme getScheme() {
        return new UpdateField_resultTupleScheme();
      }
    }

    private static class UpdateField_resultTupleScheme extends TupleScheme<UpdateField_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateField_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateField_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class DeleteField_args implements org.apache.thrift.TBase<DeleteField_args, DeleteField_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteField_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteField_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FIELD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteField_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteField_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String fieldId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      FIELD_ID((short)3, "fieldId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // FIELD_ID
            return FIELD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.FIELD_ID, new org.apache.thrift.meta_data.FieldMetaData("fieldId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteField_args.class, metaDataMap);
    }

    public DeleteField_args() {
    }

    public DeleteField_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String fieldId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.fieldId = fieldId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteField_args(DeleteField_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetFieldId()) {
        this.fieldId = other.fieldId;
      }
    }

    public DeleteField_args deepCopy() {
      return new DeleteField_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.fieldId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public DeleteField_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public DeleteField_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getFieldId() {
      return this.fieldId;
    }

    public DeleteField_args setFieldId(String fieldId) {
      this.fieldId = fieldId;
      return this;
    }

    public void unsetFieldId() {
      this.fieldId = null;
    }

    /** Returns true if field fieldId is set (has been assigned a value) and false otherwise */
    public boolean isSetFieldId() {
      return this.fieldId != null;
    }

    public void setFieldIdIsSet(boolean value) {
      if (!value) {
        this.fieldId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case FIELD_ID:
        if (value == null) {
          unsetFieldId();
        } else {
          setFieldId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case FIELD_ID:
        return getFieldId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case FIELD_ID:
        return isSetFieldId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteField_args)
        return this.equals((DeleteField_args)that);
      return false;
    }

    public boolean equals(DeleteField_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_fieldId = true && this.isSetFieldId();
      boolean that_present_fieldId = true && that.isSetFieldId();
      if (this_present_fieldId || that_present_fieldId) {
        if (!(this_present_fieldId && that_present_fieldId))
          return false;
        if (!this.fieldId.equals(that.fieldId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_fieldId = true && (isSetFieldId());
      list.add(present_fieldId);
      if (present_fieldId)
        list.add(fieldId);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteField_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFieldId()).compareTo(other.isSetFieldId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFieldId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldId, other.fieldId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteField_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fieldId:");
      if (this.fieldId == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteField_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteField_argsStandardScheme getScheme() {
        return new DeleteField_argsStandardScheme();
      }
    }

    private static class DeleteField_argsStandardScheme extends StandardScheme<DeleteField_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteField_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FIELD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fieldId = iprot.readString();
                struct.setFieldIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteField_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fieldId != null) {
          oprot.writeFieldBegin(FIELD_ID_FIELD_DESC);
          oprot.writeString(struct.fieldId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteField_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteField_argsTupleScheme getScheme() {
        return new DeleteField_argsTupleScheme();
      }
    }

    private static class DeleteField_argsTupleScheme extends TupleScheme<DeleteField_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteField_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetFieldId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetFieldId()) {
          oprot.writeString(struct.fieldId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteField_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fieldId = iprot.readString();
          struct.setFieldIdIsSet(true);
        }
      }
    }

  }

  public static class DeleteField_result implements org.apache.thrift.TBase<DeleteField_result, DeleteField_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteField_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteField_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteField_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteField_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteField_result.class, metaDataMap);
    }

    public DeleteField_result() {
    }

    public DeleteField_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteField_result(DeleteField_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public DeleteField_result deepCopy() {
      return new DeleteField_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public DeleteField_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteField_result)
        return this.equals((DeleteField_result)that);
      return false;
    }

    public boolean equals(DeleteField_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteField_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteField_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteField_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteField_resultStandardScheme getScheme() {
        return new DeleteField_resultStandardScheme();
      }
    }

    private static class DeleteField_resultStandardScheme extends StandardScheme<DeleteField_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteField_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteField_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteField_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteField_resultTupleScheme getScheme() {
        return new DeleteField_resultTupleScheme();
      }
    }

    private static class DeleteField_resultTupleScheme extends TupleScheme<DeleteField_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteField_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteField_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetProcessTasks_args implements org.apache.thrift.TBase<GetProcessTasks_args, GetProcessTasks_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetProcessTasks_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetProcessTasks_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetProcessTasks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetProcessTasks_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetProcessTasks_args.class, metaDataMap);
    }

    public GetProcessTasks_args() {
    }

    public GetProcessTasks_args(
      Authentication authentication,
      ConfigurationVersion configuration)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetProcessTasks_args(GetProcessTasks_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
    }

    public GetProcessTasks_args deepCopy() {
      return new GetProcessTasks_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetProcessTasks_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetProcessTasks_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetProcessTasks_args)
        return this.equals((GetProcessTasks_args)that);
      return false;
    }

    public boolean equals(GetProcessTasks_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetProcessTasks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetProcessTasks_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetProcessTasks_argsStandardSchemeFactory implements SchemeFactory {
      public GetProcessTasks_argsStandardScheme getScheme() {
        return new GetProcessTasks_argsStandardScheme();
      }
    }

    private static class GetProcessTasks_argsStandardScheme extends StandardScheme<GetProcessTasks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetProcessTasks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetProcessTasks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetProcessTasks_argsTupleSchemeFactory implements SchemeFactory {
      public GetProcessTasks_argsTupleScheme getScheme() {
        return new GetProcessTasks_argsTupleScheme();
      }
    }

    private static class GetProcessTasks_argsTupleScheme extends TupleScheme<GetProcessTasks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetProcessTasks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetProcessTasks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
      }
    }

  }

  public static class GetProcessTasks_result implements org.apache.thrift.TBase<GetProcessTasks_result, GetProcessTasks_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetProcessTasks_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetProcessTasks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetProcessTasks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetProcessTasks_resultTupleSchemeFactory());
    }

    public Map<String,ProcessTask> success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProcessTask.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetProcessTasks_result.class, metaDataMap);
    }

    public GetProcessTasks_result() {
    }

    public GetProcessTasks_result(
      Map<String,ProcessTask> success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetProcessTasks_result(GetProcessTasks_result other) {
      if (other.isSetSuccess()) {
        Map<String,ProcessTask> __this__success = new HashMap<String,ProcessTask>(other.success.size());
        for (Map.Entry<String, ProcessTask> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          ProcessTask other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          ProcessTask __this__success_copy_value = new ProcessTask(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetProcessTasks_result deepCopy() {
      return new GetProcessTasks_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, ProcessTask val) {
      if (this.success == null) {
        this.success = new HashMap<String,ProcessTask>();
      }
      this.success.put(key, val);
    }

    public Map<String,ProcessTask> getSuccess() {
      return this.success;
    }

    public GetProcessTasks_result setSuccess(Map<String,ProcessTask> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetProcessTasks_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,ProcessTask>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetProcessTasks_result)
        return this.equals((GetProcessTasks_result)that);
      return false;
    }

    public boolean equals(GetProcessTasks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetProcessTasks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetProcessTasks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetProcessTasks_resultStandardSchemeFactory implements SchemeFactory {
      public GetProcessTasks_resultStandardScheme getScheme() {
        return new GetProcessTasks_resultStandardScheme();
      }
    }

    private static class GetProcessTasks_resultStandardScheme extends StandardScheme<GetProcessTasks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetProcessTasks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map308 = iprot.readMapBegin();
                  struct.success = new HashMap<String,ProcessTask>(2*_map308.size);
                  String _key309;
                  ProcessTask _val310;
                  for (int _i311 = 0; _i311 < _map308.size; ++_i311)
                  {
                    _key309 = iprot.readString();
                    _val310 = new ProcessTask();
                    _val310.read(iprot);
                    struct.success.put(_key309, _val310);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetProcessTasks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, ProcessTask> _iter312 : struct.success.entrySet())
            {
              oprot.writeString(_iter312.getKey());
              _iter312.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetProcessTasks_resultTupleSchemeFactory implements SchemeFactory {
      public GetProcessTasks_resultTupleScheme getScheme() {
        return new GetProcessTasks_resultTupleScheme();
      }
    }

    private static class GetProcessTasks_resultTupleScheme extends TupleScheme<GetProcessTasks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetProcessTasks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, ProcessTask> _iter313 : struct.success.entrySet())
            {
              oprot.writeString(_iter313.getKey());
              _iter313.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetProcessTasks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map314 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,ProcessTask>(2*_map314.size);
            String _key315;
            ProcessTask _val316;
            for (int _i317 = 0; _i317 < _map314.size; ++_i317)
            {
              _key315 = iprot.readString();
              _val316 = new ProcessTask();
              _val316.read(iprot);
              struct.success.put(_key315, _val316);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class CreateProcessTask_args implements org.apache.thrift.TBase<CreateProcessTask_args, CreateProcessTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateProcessTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateProcessTask_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PROCESS_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processTaskId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateProcessTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateProcessTask_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String processTaskId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      PROCESS_TASK_ID((short)3, "processTaskId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // PROCESS_TASK_ID
            return PROCESS_TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.PROCESS_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("processTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateProcessTask_args.class, metaDataMap);
    }

    public CreateProcessTask_args() {
    }

    public CreateProcessTask_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String processTaskId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.processTaskId = processTaskId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateProcessTask_args(CreateProcessTask_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetProcessTaskId()) {
        this.processTaskId = other.processTaskId;
      }
    }

    public CreateProcessTask_args deepCopy() {
      return new CreateProcessTask_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.processTaskId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public CreateProcessTask_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public CreateProcessTask_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getProcessTaskId() {
      return this.processTaskId;
    }

    public CreateProcessTask_args setProcessTaskId(String processTaskId) {
      this.processTaskId = processTaskId;
      return this;
    }

    public void unsetProcessTaskId() {
      this.processTaskId = null;
    }

    /** Returns true if field processTaskId is set (has been assigned a value) and false otherwise */
    public boolean isSetProcessTaskId() {
      return this.processTaskId != null;
    }

    public void setProcessTaskIdIsSet(boolean value) {
      if (!value) {
        this.processTaskId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case PROCESS_TASK_ID:
        if (value == null) {
          unsetProcessTaskId();
        } else {
          setProcessTaskId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case PROCESS_TASK_ID:
        return getProcessTaskId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case PROCESS_TASK_ID:
        return isSetProcessTaskId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateProcessTask_args)
        return this.equals((CreateProcessTask_args)that);
      return false;
    }

    public boolean equals(CreateProcessTask_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_processTaskId = true && this.isSetProcessTaskId();
      boolean that_present_processTaskId = true && that.isSetProcessTaskId();
      if (this_present_processTaskId || that_present_processTaskId) {
        if (!(this_present_processTaskId && that_present_processTaskId))
          return false;
        if (!this.processTaskId.equals(that.processTaskId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_processTaskId = true && (isSetProcessTaskId());
      list.add(present_processTaskId);
      if (present_processTaskId)
        list.add(processTaskId);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateProcessTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProcessTaskId()).compareTo(other.isSetProcessTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProcessTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processTaskId, other.processTaskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateProcessTask_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("processTaskId:");
      if (this.processTaskId == null) {
        sb.append("null");
      } else {
        sb.append(this.processTaskId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateProcessTask_argsStandardSchemeFactory implements SchemeFactory {
      public CreateProcessTask_argsStandardScheme getScheme() {
        return new CreateProcessTask_argsStandardScheme();
      }
    }

    private static class CreateProcessTask_argsStandardScheme extends StandardScheme<CreateProcessTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateProcessTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROCESS_TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.processTaskId = iprot.readString();
                struct.setProcessTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateProcessTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.processTaskId != null) {
          oprot.writeFieldBegin(PROCESS_TASK_ID_FIELD_DESC);
          oprot.writeString(struct.processTaskId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateProcessTask_argsTupleSchemeFactory implements SchemeFactory {
      public CreateProcessTask_argsTupleScheme getScheme() {
        return new CreateProcessTask_argsTupleScheme();
      }
    }

    private static class CreateProcessTask_argsTupleScheme extends TupleScheme<CreateProcessTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateProcessTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetProcessTaskId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetProcessTaskId()) {
          oprot.writeString(struct.processTaskId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateProcessTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.processTaskId = iprot.readString();
          struct.setProcessTaskIdIsSet(true);
        }
      }
    }

  }

  public static class CreateProcessTask_result implements org.apache.thrift.TBase<CreateProcessTask_result, CreateProcessTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateProcessTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateProcessTask_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateProcessTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateProcessTask_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateProcessTask_result.class, metaDataMap);
    }

    public CreateProcessTask_result() {
    }

    public CreateProcessTask_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateProcessTask_result(CreateProcessTask_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public CreateProcessTask_result deepCopy() {
      return new CreateProcessTask_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public CreateProcessTask_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateProcessTask_result)
        return this.equals((CreateProcessTask_result)that);
      return false;
    }

    public boolean equals(CreateProcessTask_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateProcessTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateProcessTask_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateProcessTask_resultStandardSchemeFactory implements SchemeFactory {
      public CreateProcessTask_resultStandardScheme getScheme() {
        return new CreateProcessTask_resultStandardScheme();
      }
    }

    private static class CreateProcessTask_resultStandardScheme extends StandardScheme<CreateProcessTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateProcessTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateProcessTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateProcessTask_resultTupleSchemeFactory implements SchemeFactory {
      public CreateProcessTask_resultTupleScheme getScheme() {
        return new CreateProcessTask_resultTupleScheme();
      }
    }

    private static class CreateProcessTask_resultTupleScheme extends TupleScheme<CreateProcessTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateProcessTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateProcessTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class UpdateProcessTask_args implements org.apache.thrift.TBase<UpdateProcessTask_args, UpdateProcessTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateProcessTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateProcessTask_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PROCESS_TASK_FIELD_DESC = new org.apache.thrift.protocol.TField("processTask", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateProcessTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateProcessTask_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public ProcessTask processTask; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      PROCESS_TASK((short)3, "processTask");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // PROCESS_TASK
            return PROCESS_TASK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.PROCESS_TASK, new org.apache.thrift.meta_data.FieldMetaData("processTask", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProcessTask.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateProcessTask_args.class, metaDataMap);
    }

    public UpdateProcessTask_args() {
    }

    public UpdateProcessTask_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      ProcessTask processTask)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.processTask = processTask;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateProcessTask_args(UpdateProcessTask_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetProcessTask()) {
        this.processTask = new ProcessTask(other.processTask);
      }
    }

    public UpdateProcessTask_args deepCopy() {
      return new UpdateProcessTask_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.processTask = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public UpdateProcessTask_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public UpdateProcessTask_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public ProcessTask getProcessTask() {
      return this.processTask;
    }

    public UpdateProcessTask_args setProcessTask(ProcessTask processTask) {
      this.processTask = processTask;
      return this;
    }

    public void unsetProcessTask() {
      this.processTask = null;
    }

    /** Returns true if field processTask is set (has been assigned a value) and false otherwise */
    public boolean isSetProcessTask() {
      return this.processTask != null;
    }

    public void setProcessTaskIsSet(boolean value) {
      if (!value) {
        this.processTask = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case PROCESS_TASK:
        if (value == null) {
          unsetProcessTask();
        } else {
          setProcessTask((ProcessTask)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case PROCESS_TASK:
        return getProcessTask();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case PROCESS_TASK:
        return isSetProcessTask();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateProcessTask_args)
        return this.equals((UpdateProcessTask_args)that);
      return false;
    }

    public boolean equals(UpdateProcessTask_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_processTask = true && this.isSetProcessTask();
      boolean that_present_processTask = true && that.isSetProcessTask();
      if (this_present_processTask || that_present_processTask) {
        if (!(this_present_processTask && that_present_processTask))
          return false;
        if (!this.processTask.equals(that.processTask))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_processTask = true && (isSetProcessTask());
      list.add(present_processTask);
      if (present_processTask)
        list.add(processTask);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateProcessTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProcessTask()).compareTo(other.isSetProcessTask());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProcessTask()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processTask, other.processTask);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateProcessTask_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("processTask:");
      if (this.processTask == null) {
        sb.append("null");
      } else {
        sb.append(this.processTask);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (processTask != null) {
        processTask.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateProcessTask_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateProcessTask_argsStandardScheme getScheme() {
        return new UpdateProcessTask_argsStandardScheme();
      }
    }

    private static class UpdateProcessTask_argsStandardScheme extends StandardScheme<UpdateProcessTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateProcessTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROCESS_TASK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.processTask = new ProcessTask();
                struct.processTask.read(iprot);
                struct.setProcessTaskIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateProcessTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.processTask != null) {
          oprot.writeFieldBegin(PROCESS_TASK_FIELD_DESC);
          struct.processTask.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateProcessTask_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateProcessTask_argsTupleScheme getScheme() {
        return new UpdateProcessTask_argsTupleScheme();
      }
    }

    private static class UpdateProcessTask_argsTupleScheme extends TupleScheme<UpdateProcessTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateProcessTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetProcessTask()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetProcessTask()) {
          struct.processTask.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateProcessTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.processTask = new ProcessTask();
          struct.processTask.read(iprot);
          struct.setProcessTaskIsSet(true);
        }
      }
    }

  }

  public static class UpdateProcessTask_result implements org.apache.thrift.TBase<UpdateProcessTask_result, UpdateProcessTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateProcessTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateProcessTask_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateProcessTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateProcessTask_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateProcessTask_result.class, metaDataMap);
    }

    public UpdateProcessTask_result() {
    }

    public UpdateProcessTask_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateProcessTask_result(UpdateProcessTask_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public UpdateProcessTask_result deepCopy() {
      return new UpdateProcessTask_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public UpdateProcessTask_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateProcessTask_result)
        return this.equals((UpdateProcessTask_result)that);
      return false;
    }

    public boolean equals(UpdateProcessTask_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateProcessTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateProcessTask_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateProcessTask_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateProcessTask_resultStandardScheme getScheme() {
        return new UpdateProcessTask_resultStandardScheme();
      }
    }

    private static class UpdateProcessTask_resultStandardScheme extends StandardScheme<UpdateProcessTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateProcessTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateProcessTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateProcessTask_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateProcessTask_resultTupleScheme getScheme() {
        return new UpdateProcessTask_resultTupleScheme();
      }
    }

    private static class UpdateProcessTask_resultTupleScheme extends TupleScheme<UpdateProcessTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateProcessTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateProcessTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class DeleteProcessTask_args implements org.apache.thrift.TBase<DeleteProcessTask_args, DeleteProcessTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteProcessTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteProcessTask_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PROCESS_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processTaskId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteProcessTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteProcessTask_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String processTaskId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      PROCESS_TASK_ID((short)3, "processTaskId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // PROCESS_TASK_ID
            return PROCESS_TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.PROCESS_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("processTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteProcessTask_args.class, metaDataMap);
    }

    public DeleteProcessTask_args() {
    }

    public DeleteProcessTask_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String processTaskId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.processTaskId = processTaskId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteProcessTask_args(DeleteProcessTask_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetProcessTaskId()) {
        this.processTaskId = other.processTaskId;
      }
    }

    public DeleteProcessTask_args deepCopy() {
      return new DeleteProcessTask_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.processTaskId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public DeleteProcessTask_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public DeleteProcessTask_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getProcessTaskId() {
      return this.processTaskId;
    }

    public DeleteProcessTask_args setProcessTaskId(String processTaskId) {
      this.processTaskId = processTaskId;
      return this;
    }

    public void unsetProcessTaskId() {
      this.processTaskId = null;
    }

    /** Returns true if field processTaskId is set (has been assigned a value) and false otherwise */
    public boolean isSetProcessTaskId() {
      return this.processTaskId != null;
    }

    public void setProcessTaskIdIsSet(boolean value) {
      if (!value) {
        this.processTaskId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case PROCESS_TASK_ID:
        if (value == null) {
          unsetProcessTaskId();
        } else {
          setProcessTaskId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case PROCESS_TASK_ID:
        return getProcessTaskId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case PROCESS_TASK_ID:
        return isSetProcessTaskId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteProcessTask_args)
        return this.equals((DeleteProcessTask_args)that);
      return false;
    }

    public boolean equals(DeleteProcessTask_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_processTaskId = true && this.isSetProcessTaskId();
      boolean that_present_processTaskId = true && that.isSetProcessTaskId();
      if (this_present_processTaskId || that_present_processTaskId) {
        if (!(this_present_processTaskId && that_present_processTaskId))
          return false;
        if (!this.processTaskId.equals(that.processTaskId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_processTaskId = true && (isSetProcessTaskId());
      list.add(present_processTaskId);
      if (present_processTaskId)
        list.add(processTaskId);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteProcessTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProcessTaskId()).compareTo(other.isSetProcessTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProcessTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processTaskId, other.processTaskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteProcessTask_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("processTaskId:");
      if (this.processTaskId == null) {
        sb.append("null");
      } else {
        sb.append(this.processTaskId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteProcessTask_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteProcessTask_argsStandardScheme getScheme() {
        return new DeleteProcessTask_argsStandardScheme();
      }
    }

    private static class DeleteProcessTask_argsStandardScheme extends StandardScheme<DeleteProcessTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteProcessTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROCESS_TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.processTaskId = iprot.readString();
                struct.setProcessTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteProcessTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.processTaskId != null) {
          oprot.writeFieldBegin(PROCESS_TASK_ID_FIELD_DESC);
          oprot.writeString(struct.processTaskId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteProcessTask_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteProcessTask_argsTupleScheme getScheme() {
        return new DeleteProcessTask_argsTupleScheme();
      }
    }

    private static class DeleteProcessTask_argsTupleScheme extends TupleScheme<DeleteProcessTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteProcessTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetProcessTaskId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetProcessTaskId()) {
          oprot.writeString(struct.processTaskId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteProcessTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.processTaskId = iprot.readString();
          struct.setProcessTaskIdIsSet(true);
        }
      }
    }

  }

  public static class DeleteProcessTask_result implements org.apache.thrift.TBase<DeleteProcessTask_result, DeleteProcessTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteProcessTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteProcessTask_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteProcessTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteProcessTask_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteProcessTask_result.class, metaDataMap);
    }

    public DeleteProcessTask_result() {
    }

    public DeleteProcessTask_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteProcessTask_result(DeleteProcessTask_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public DeleteProcessTask_result deepCopy() {
      return new DeleteProcessTask_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public DeleteProcessTask_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteProcessTask_result)
        return this.equals((DeleteProcessTask_result)that);
      return false;
    }

    public boolean equals(DeleteProcessTask_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteProcessTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteProcessTask_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteProcessTask_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteProcessTask_resultStandardScheme getScheme() {
        return new DeleteProcessTask_resultStandardScheme();
      }
    }

    private static class DeleteProcessTask_resultStandardScheme extends StandardScheme<DeleteProcessTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteProcessTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteProcessTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteProcessTask_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteProcessTask_resultTupleScheme getScheme() {
        return new DeleteProcessTask_resultTupleScheme();
      }
    }

    private static class DeleteProcessTask_resultTupleScheme extends TupleScheme<DeleteProcessTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteProcessTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteProcessTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class RunProcessTask_args implements org.apache.thrift.TBase<RunProcessTask_args, RunProcessTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<RunProcessTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunProcessTask_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RunProcessTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RunProcessTask_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public ProcessTaskExecutionParameters parameters; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      PARAMETERS((short)3, "parameters");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // PARAMETERS
            return PARAMETERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProcessTaskExecutionParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RunProcessTask_args.class, metaDataMap);
    }

    public RunProcessTask_args() {
    }

    public RunProcessTask_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      ProcessTaskExecutionParameters parameters)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.parameters = parameters;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RunProcessTask_args(RunProcessTask_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetParameters()) {
        this.parameters = new ProcessTaskExecutionParameters(other.parameters);
      }
    }

    public RunProcessTask_args deepCopy() {
      return new RunProcessTask_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.parameters = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public RunProcessTask_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public RunProcessTask_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public ProcessTaskExecutionParameters getParameters() {
      return this.parameters;
    }

    public RunProcessTask_args setParameters(ProcessTaskExecutionParameters parameters) {
      this.parameters = parameters;
      return this;
    }

    public void unsetParameters() {
      this.parameters = null;
    }

    /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
    public boolean isSetParameters() {
      return this.parameters != null;
    }

    public void setParametersIsSet(boolean value) {
      if (!value) {
        this.parameters = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case PARAMETERS:
        if (value == null) {
          unsetParameters();
        } else {
          setParameters((ProcessTaskExecutionParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case PARAMETERS:
        return getParameters();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case PARAMETERS:
        return isSetParameters();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RunProcessTask_args)
        return this.equals((RunProcessTask_args)that);
      return false;
    }

    public boolean equals(RunProcessTask_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_parameters = true && this.isSetParameters();
      boolean that_present_parameters = true && that.isSetParameters();
      if (this_present_parameters || that_present_parameters) {
        if (!(this_present_parameters && that_present_parameters))
          return false;
        if (!this.parameters.equals(that.parameters))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_parameters = true && (isSetParameters());
      list.add(present_parameters);
      if (present_parameters)
        list.add(parameters);

      return list.hashCode();
    }

    @Override
    public int compareTo(RunProcessTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParameters()).compareTo(other.isSetParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, other.parameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RunProcessTask_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameters:");
      if (this.parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.parameters);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (parameters != null) {
        parameters.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RunProcessTask_argsStandardSchemeFactory implements SchemeFactory {
      public RunProcessTask_argsStandardScheme getScheme() {
        return new RunProcessTask_argsStandardScheme();
      }
    }

    private static class RunProcessTask_argsStandardScheme extends StandardScheme<RunProcessTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RunProcessTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAMETERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.parameters = new ProcessTaskExecutionParameters();
                struct.parameters.read(iprot);
                struct.setParametersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RunProcessTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.parameters != null) {
          oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
          struct.parameters.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RunProcessTask_argsTupleSchemeFactory implements SchemeFactory {
      public RunProcessTask_argsTupleScheme getScheme() {
        return new RunProcessTask_argsTupleScheme();
      }
    }

    private static class RunProcessTask_argsTupleScheme extends TupleScheme<RunProcessTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RunProcessTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetParameters()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetParameters()) {
          struct.parameters.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RunProcessTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.parameters = new ProcessTaskExecutionParameters();
          struct.parameters.read(iprot);
          struct.setParametersIsSet(true);
        }
      }
    }

  }

  public static class RunProcessTask_result implements org.apache.thrift.TBase<RunProcessTask_result, RunProcessTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<RunProcessTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunProcessTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RunProcessTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RunProcessTask_resultTupleSchemeFactory());
    }

    public String success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RunProcessTask_result.class, metaDataMap);
    }

    public RunProcessTask_result() {
    }

    public RunProcessTask_result(
      String success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RunProcessTask_result(RunProcessTask_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public RunProcessTask_result deepCopy() {
      return new RunProcessTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public RunProcessTask_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public RunProcessTask_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RunProcessTask_result)
        return this.equals((RunProcessTask_result)that);
      return false;
    }

    public boolean equals(RunProcessTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(RunProcessTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RunProcessTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RunProcessTask_resultStandardSchemeFactory implements SchemeFactory {
      public RunProcessTask_resultStandardScheme getScheme() {
        return new RunProcessTask_resultStandardScheme();
      }
    }

    private static class RunProcessTask_resultStandardScheme extends StandardScheme<RunProcessTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RunProcessTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RunProcessTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RunProcessTask_resultTupleSchemeFactory implements SchemeFactory {
      public RunProcessTask_resultTupleScheme getScheme() {
        return new RunProcessTask_resultTupleScheme();
      }
    }

    private static class RunProcessTask_resultTupleScheme extends TupleScheme<RunProcessTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RunProcessTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RunProcessTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetEmailCampaigns_args implements org.apache.thrift.TBase<GetEmailCampaigns_args, GetEmailCampaigns_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetEmailCampaigns_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEmailCampaigns_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetEmailCampaigns_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetEmailCampaigns_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEmailCampaigns_args.class, metaDataMap);
    }

    public GetEmailCampaigns_args() {
    }

    public GetEmailCampaigns_args(
      Authentication authentication,
      ConfigurationVersion configuration)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetEmailCampaigns_args(GetEmailCampaigns_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
    }

    public GetEmailCampaigns_args deepCopy() {
      return new GetEmailCampaigns_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetEmailCampaigns_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetEmailCampaigns_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetEmailCampaigns_args)
        return this.equals((GetEmailCampaigns_args)that);
      return false;
    }

    public boolean equals(GetEmailCampaigns_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetEmailCampaigns_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetEmailCampaigns_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetEmailCampaigns_argsStandardSchemeFactory implements SchemeFactory {
      public GetEmailCampaigns_argsStandardScheme getScheme() {
        return new GetEmailCampaigns_argsStandardScheme();
      }
    }

    private static class GetEmailCampaigns_argsStandardScheme extends StandardScheme<GetEmailCampaigns_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetEmailCampaigns_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetEmailCampaigns_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetEmailCampaigns_argsTupleSchemeFactory implements SchemeFactory {
      public GetEmailCampaigns_argsTupleScheme getScheme() {
        return new GetEmailCampaigns_argsTupleScheme();
      }
    }

    private static class GetEmailCampaigns_argsTupleScheme extends TupleScheme<GetEmailCampaigns_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetEmailCampaigns_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetEmailCampaigns_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
      }
    }

  }

  public static class GetEmailCampaigns_result implements org.apache.thrift.TBase<GetEmailCampaigns_result, GetEmailCampaigns_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetEmailCampaigns_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEmailCampaigns_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetEmailCampaigns_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetEmailCampaigns_resultTupleSchemeFactory());
    }

    public Map<String,EmailCampaign> success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmailCampaign.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEmailCampaigns_result.class, metaDataMap);
    }

    public GetEmailCampaigns_result() {
    }

    public GetEmailCampaigns_result(
      Map<String,EmailCampaign> success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetEmailCampaigns_result(GetEmailCampaigns_result other) {
      if (other.isSetSuccess()) {
        Map<String,EmailCampaign> __this__success = new HashMap<String,EmailCampaign>(other.success.size());
        for (Map.Entry<String, EmailCampaign> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          EmailCampaign other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          EmailCampaign __this__success_copy_value = new EmailCampaign(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetEmailCampaigns_result deepCopy() {
      return new GetEmailCampaigns_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, EmailCampaign val) {
      if (this.success == null) {
        this.success = new HashMap<String,EmailCampaign>();
      }
      this.success.put(key, val);
    }

    public Map<String,EmailCampaign> getSuccess() {
      return this.success;
    }

    public GetEmailCampaigns_result setSuccess(Map<String,EmailCampaign> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetEmailCampaigns_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,EmailCampaign>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetEmailCampaigns_result)
        return this.equals((GetEmailCampaigns_result)that);
      return false;
    }

    public boolean equals(GetEmailCampaigns_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetEmailCampaigns_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetEmailCampaigns_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetEmailCampaigns_resultStandardSchemeFactory implements SchemeFactory {
      public GetEmailCampaigns_resultStandardScheme getScheme() {
        return new GetEmailCampaigns_resultStandardScheme();
      }
    }

    private static class GetEmailCampaigns_resultStandardScheme extends StandardScheme<GetEmailCampaigns_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetEmailCampaigns_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map318 = iprot.readMapBegin();
                  struct.success = new HashMap<String,EmailCampaign>(2*_map318.size);
                  String _key319;
                  EmailCampaign _val320;
                  for (int _i321 = 0; _i321 < _map318.size; ++_i321)
                  {
                    _key319 = iprot.readString();
                    _val320 = new EmailCampaign();
                    _val320.read(iprot);
                    struct.success.put(_key319, _val320);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetEmailCampaigns_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, EmailCampaign> _iter322 : struct.success.entrySet())
            {
              oprot.writeString(_iter322.getKey());
              _iter322.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetEmailCampaigns_resultTupleSchemeFactory implements SchemeFactory {
      public GetEmailCampaigns_resultTupleScheme getScheme() {
        return new GetEmailCampaigns_resultTupleScheme();
      }
    }

    private static class GetEmailCampaigns_resultTupleScheme extends TupleScheme<GetEmailCampaigns_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetEmailCampaigns_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, EmailCampaign> _iter323 : struct.success.entrySet())
            {
              oprot.writeString(_iter323.getKey());
              _iter323.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetEmailCampaigns_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map324 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,EmailCampaign>(2*_map324.size);
            String _key325;
            EmailCampaign _val326;
            for (int _i327 = 0; _i327 < _map324.size; ++_i327)
            {
              _key325 = iprot.readString();
              _val326 = new EmailCampaign();
              _val326.read(iprot);
              struct.success.put(_key325, _val326);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class CreateEmailCampaign_args implements org.apache.thrift.TBase<CreateEmailCampaign_args, CreateEmailCampaign_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateEmailCampaign_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateEmailCampaign_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField EMAIL_CAMPAIGN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("emailCampaignId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateEmailCampaign_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateEmailCampaign_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String emailCampaignId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      EMAIL_CAMPAIGN_ID((short)3, "emailCampaignId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // EMAIL_CAMPAIGN_ID
            return EMAIL_CAMPAIGN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.EMAIL_CAMPAIGN_ID, new org.apache.thrift.meta_data.FieldMetaData("emailCampaignId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateEmailCampaign_args.class, metaDataMap);
    }

    public CreateEmailCampaign_args() {
    }

    public CreateEmailCampaign_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String emailCampaignId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.emailCampaignId = emailCampaignId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateEmailCampaign_args(CreateEmailCampaign_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetEmailCampaignId()) {
        this.emailCampaignId = other.emailCampaignId;
      }
    }

    public CreateEmailCampaign_args deepCopy() {
      return new CreateEmailCampaign_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.emailCampaignId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public CreateEmailCampaign_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public CreateEmailCampaign_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getEmailCampaignId() {
      return this.emailCampaignId;
    }

    public CreateEmailCampaign_args setEmailCampaignId(String emailCampaignId) {
      this.emailCampaignId = emailCampaignId;
      return this;
    }

    public void unsetEmailCampaignId() {
      this.emailCampaignId = null;
    }

    /** Returns true if field emailCampaignId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmailCampaignId() {
      return this.emailCampaignId != null;
    }

    public void setEmailCampaignIdIsSet(boolean value) {
      if (!value) {
        this.emailCampaignId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case EMAIL_CAMPAIGN_ID:
        if (value == null) {
          unsetEmailCampaignId();
        } else {
          setEmailCampaignId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case EMAIL_CAMPAIGN_ID:
        return getEmailCampaignId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case EMAIL_CAMPAIGN_ID:
        return isSetEmailCampaignId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateEmailCampaign_args)
        return this.equals((CreateEmailCampaign_args)that);
      return false;
    }

    public boolean equals(CreateEmailCampaign_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_emailCampaignId = true && this.isSetEmailCampaignId();
      boolean that_present_emailCampaignId = true && that.isSetEmailCampaignId();
      if (this_present_emailCampaignId || that_present_emailCampaignId) {
        if (!(this_present_emailCampaignId && that_present_emailCampaignId))
          return false;
        if (!this.emailCampaignId.equals(that.emailCampaignId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_emailCampaignId = true && (isSetEmailCampaignId());
      list.add(present_emailCampaignId);
      if (present_emailCampaignId)
        list.add(emailCampaignId);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateEmailCampaign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmailCampaignId()).compareTo(other.isSetEmailCampaignId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmailCampaignId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailCampaignId, other.emailCampaignId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateEmailCampaign_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("emailCampaignId:");
      if (this.emailCampaignId == null) {
        sb.append("null");
      } else {
        sb.append(this.emailCampaignId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateEmailCampaign_argsStandardSchemeFactory implements SchemeFactory {
      public CreateEmailCampaign_argsStandardScheme getScheme() {
        return new CreateEmailCampaign_argsStandardScheme();
      }
    }

    private static class CreateEmailCampaign_argsStandardScheme extends StandardScheme<CreateEmailCampaign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateEmailCampaign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EMAIL_CAMPAIGN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.emailCampaignId = iprot.readString();
                struct.setEmailCampaignIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateEmailCampaign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.emailCampaignId != null) {
          oprot.writeFieldBegin(EMAIL_CAMPAIGN_ID_FIELD_DESC);
          oprot.writeString(struct.emailCampaignId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateEmailCampaign_argsTupleSchemeFactory implements SchemeFactory {
      public CreateEmailCampaign_argsTupleScheme getScheme() {
        return new CreateEmailCampaign_argsTupleScheme();
      }
    }

    private static class CreateEmailCampaign_argsTupleScheme extends TupleScheme<CreateEmailCampaign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateEmailCampaign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetEmailCampaignId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetEmailCampaignId()) {
          oprot.writeString(struct.emailCampaignId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateEmailCampaign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.emailCampaignId = iprot.readString();
          struct.setEmailCampaignIdIsSet(true);
        }
      }
    }

  }

  public static class CreateEmailCampaign_result implements org.apache.thrift.TBase<CreateEmailCampaign_result, CreateEmailCampaign_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateEmailCampaign_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateEmailCampaign_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateEmailCampaign_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateEmailCampaign_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateEmailCampaign_result.class, metaDataMap);
    }

    public CreateEmailCampaign_result() {
    }

    public CreateEmailCampaign_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateEmailCampaign_result(CreateEmailCampaign_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public CreateEmailCampaign_result deepCopy() {
      return new CreateEmailCampaign_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public CreateEmailCampaign_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateEmailCampaign_result)
        return this.equals((CreateEmailCampaign_result)that);
      return false;
    }

    public boolean equals(CreateEmailCampaign_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateEmailCampaign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateEmailCampaign_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateEmailCampaign_resultStandardSchemeFactory implements SchemeFactory {
      public CreateEmailCampaign_resultStandardScheme getScheme() {
        return new CreateEmailCampaign_resultStandardScheme();
      }
    }

    private static class CreateEmailCampaign_resultStandardScheme extends StandardScheme<CreateEmailCampaign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateEmailCampaign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateEmailCampaign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateEmailCampaign_resultTupleSchemeFactory implements SchemeFactory {
      public CreateEmailCampaign_resultTupleScheme getScheme() {
        return new CreateEmailCampaign_resultTupleScheme();
      }
    }

    private static class CreateEmailCampaign_resultTupleScheme extends TupleScheme<CreateEmailCampaign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateEmailCampaign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateEmailCampaign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class UpdateEmailCampaign_args implements org.apache.thrift.TBase<UpdateEmailCampaign_args, UpdateEmailCampaign_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateEmailCampaign_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEmailCampaign_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField EMAIL_CAMPAIGN_FIELD_DESC = new org.apache.thrift.protocol.TField("emailCampaign", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateEmailCampaign_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateEmailCampaign_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public EmailCampaign emailCampaign; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      EMAIL_CAMPAIGN((short)3, "emailCampaign");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // EMAIL_CAMPAIGN
            return EMAIL_CAMPAIGN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.EMAIL_CAMPAIGN, new org.apache.thrift.meta_data.FieldMetaData("emailCampaign", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmailCampaign.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEmailCampaign_args.class, metaDataMap);
    }

    public UpdateEmailCampaign_args() {
    }

    public UpdateEmailCampaign_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      EmailCampaign emailCampaign)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.emailCampaign = emailCampaign;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateEmailCampaign_args(UpdateEmailCampaign_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetEmailCampaign()) {
        this.emailCampaign = new EmailCampaign(other.emailCampaign);
      }
    }

    public UpdateEmailCampaign_args deepCopy() {
      return new UpdateEmailCampaign_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.emailCampaign = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public UpdateEmailCampaign_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public UpdateEmailCampaign_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public EmailCampaign getEmailCampaign() {
      return this.emailCampaign;
    }

    public UpdateEmailCampaign_args setEmailCampaign(EmailCampaign emailCampaign) {
      this.emailCampaign = emailCampaign;
      return this;
    }

    public void unsetEmailCampaign() {
      this.emailCampaign = null;
    }

    /** Returns true if field emailCampaign is set (has been assigned a value) and false otherwise */
    public boolean isSetEmailCampaign() {
      return this.emailCampaign != null;
    }

    public void setEmailCampaignIsSet(boolean value) {
      if (!value) {
        this.emailCampaign = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case EMAIL_CAMPAIGN:
        if (value == null) {
          unsetEmailCampaign();
        } else {
          setEmailCampaign((EmailCampaign)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case EMAIL_CAMPAIGN:
        return getEmailCampaign();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case EMAIL_CAMPAIGN:
        return isSetEmailCampaign();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateEmailCampaign_args)
        return this.equals((UpdateEmailCampaign_args)that);
      return false;
    }

    public boolean equals(UpdateEmailCampaign_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_emailCampaign = true && this.isSetEmailCampaign();
      boolean that_present_emailCampaign = true && that.isSetEmailCampaign();
      if (this_present_emailCampaign || that_present_emailCampaign) {
        if (!(this_present_emailCampaign && that_present_emailCampaign))
          return false;
        if (!this.emailCampaign.equals(that.emailCampaign))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_emailCampaign = true && (isSetEmailCampaign());
      list.add(present_emailCampaign);
      if (present_emailCampaign)
        list.add(emailCampaign);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateEmailCampaign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmailCampaign()).compareTo(other.isSetEmailCampaign());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmailCampaign()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailCampaign, other.emailCampaign);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateEmailCampaign_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("emailCampaign:");
      if (this.emailCampaign == null) {
        sb.append("null");
      } else {
        sb.append(this.emailCampaign);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (emailCampaign != null) {
        emailCampaign.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateEmailCampaign_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateEmailCampaign_argsStandardScheme getScheme() {
        return new UpdateEmailCampaign_argsStandardScheme();
      }
    }

    private static class UpdateEmailCampaign_argsStandardScheme extends StandardScheme<UpdateEmailCampaign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEmailCampaign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EMAIL_CAMPAIGN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.emailCampaign = new EmailCampaign();
                struct.emailCampaign.read(iprot);
                struct.setEmailCampaignIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEmailCampaign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.emailCampaign != null) {
          oprot.writeFieldBegin(EMAIL_CAMPAIGN_FIELD_DESC);
          struct.emailCampaign.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateEmailCampaign_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateEmailCampaign_argsTupleScheme getScheme() {
        return new UpdateEmailCampaign_argsTupleScheme();
      }
    }

    private static class UpdateEmailCampaign_argsTupleScheme extends TupleScheme<UpdateEmailCampaign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEmailCampaign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetEmailCampaign()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetEmailCampaign()) {
          struct.emailCampaign.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEmailCampaign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.emailCampaign = new EmailCampaign();
          struct.emailCampaign.read(iprot);
          struct.setEmailCampaignIsSet(true);
        }
      }
    }

  }

  public static class UpdateEmailCampaign_result implements org.apache.thrift.TBase<UpdateEmailCampaign_result, UpdateEmailCampaign_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateEmailCampaign_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEmailCampaign_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateEmailCampaign_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateEmailCampaign_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEmailCampaign_result.class, metaDataMap);
    }

    public UpdateEmailCampaign_result() {
    }

    public UpdateEmailCampaign_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateEmailCampaign_result(UpdateEmailCampaign_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public UpdateEmailCampaign_result deepCopy() {
      return new UpdateEmailCampaign_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public UpdateEmailCampaign_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateEmailCampaign_result)
        return this.equals((UpdateEmailCampaign_result)that);
      return false;
    }

    public boolean equals(UpdateEmailCampaign_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateEmailCampaign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateEmailCampaign_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateEmailCampaign_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateEmailCampaign_resultStandardScheme getScheme() {
        return new UpdateEmailCampaign_resultStandardScheme();
      }
    }

    private static class UpdateEmailCampaign_resultStandardScheme extends StandardScheme<UpdateEmailCampaign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEmailCampaign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEmailCampaign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateEmailCampaign_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateEmailCampaign_resultTupleScheme getScheme() {
        return new UpdateEmailCampaign_resultTupleScheme();
      }
    }

    private static class UpdateEmailCampaign_resultTupleScheme extends TupleScheme<UpdateEmailCampaign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEmailCampaign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEmailCampaign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class DeleteEmailCampaign_args implements org.apache.thrift.TBase<DeleteEmailCampaign_args, DeleteEmailCampaign_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteEmailCampaign_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteEmailCampaign_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField EMAIL_CAMPAIGN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("emailCampaignId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteEmailCampaign_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteEmailCampaign_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String emailCampaignId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      EMAIL_CAMPAIGN_ID((short)3, "emailCampaignId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // EMAIL_CAMPAIGN_ID
            return EMAIL_CAMPAIGN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.EMAIL_CAMPAIGN_ID, new org.apache.thrift.meta_data.FieldMetaData("emailCampaignId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteEmailCampaign_args.class, metaDataMap);
    }

    public DeleteEmailCampaign_args() {
    }

    public DeleteEmailCampaign_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String emailCampaignId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.emailCampaignId = emailCampaignId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteEmailCampaign_args(DeleteEmailCampaign_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetEmailCampaignId()) {
        this.emailCampaignId = other.emailCampaignId;
      }
    }

    public DeleteEmailCampaign_args deepCopy() {
      return new DeleteEmailCampaign_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.emailCampaignId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public DeleteEmailCampaign_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public DeleteEmailCampaign_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getEmailCampaignId() {
      return this.emailCampaignId;
    }

    public DeleteEmailCampaign_args setEmailCampaignId(String emailCampaignId) {
      this.emailCampaignId = emailCampaignId;
      return this;
    }

    public void unsetEmailCampaignId() {
      this.emailCampaignId = null;
    }

    /** Returns true if field emailCampaignId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmailCampaignId() {
      return this.emailCampaignId != null;
    }

    public void setEmailCampaignIdIsSet(boolean value) {
      if (!value) {
        this.emailCampaignId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case EMAIL_CAMPAIGN_ID:
        if (value == null) {
          unsetEmailCampaignId();
        } else {
          setEmailCampaignId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case EMAIL_CAMPAIGN_ID:
        return getEmailCampaignId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case EMAIL_CAMPAIGN_ID:
        return isSetEmailCampaignId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteEmailCampaign_args)
        return this.equals((DeleteEmailCampaign_args)that);
      return false;
    }

    public boolean equals(DeleteEmailCampaign_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_emailCampaignId = true && this.isSetEmailCampaignId();
      boolean that_present_emailCampaignId = true && that.isSetEmailCampaignId();
      if (this_present_emailCampaignId || that_present_emailCampaignId) {
        if (!(this_present_emailCampaignId && that_present_emailCampaignId))
          return false;
        if (!this.emailCampaignId.equals(that.emailCampaignId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_emailCampaignId = true && (isSetEmailCampaignId());
      list.add(present_emailCampaignId);
      if (present_emailCampaignId)
        list.add(emailCampaignId);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteEmailCampaign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmailCampaignId()).compareTo(other.isSetEmailCampaignId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmailCampaignId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailCampaignId, other.emailCampaignId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteEmailCampaign_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("emailCampaignId:");
      if (this.emailCampaignId == null) {
        sb.append("null");
      } else {
        sb.append(this.emailCampaignId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteEmailCampaign_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteEmailCampaign_argsStandardScheme getScheme() {
        return new DeleteEmailCampaign_argsStandardScheme();
      }
    }

    private static class DeleteEmailCampaign_argsStandardScheme extends StandardScheme<DeleteEmailCampaign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteEmailCampaign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EMAIL_CAMPAIGN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.emailCampaignId = iprot.readString();
                struct.setEmailCampaignIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteEmailCampaign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.emailCampaignId != null) {
          oprot.writeFieldBegin(EMAIL_CAMPAIGN_ID_FIELD_DESC);
          oprot.writeString(struct.emailCampaignId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteEmailCampaign_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteEmailCampaign_argsTupleScheme getScheme() {
        return new DeleteEmailCampaign_argsTupleScheme();
      }
    }

    private static class DeleteEmailCampaign_argsTupleScheme extends TupleScheme<DeleteEmailCampaign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteEmailCampaign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetEmailCampaignId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetEmailCampaignId()) {
          oprot.writeString(struct.emailCampaignId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteEmailCampaign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.emailCampaignId = iprot.readString();
          struct.setEmailCampaignIdIsSet(true);
        }
      }
    }

  }

  public static class DeleteEmailCampaign_result implements org.apache.thrift.TBase<DeleteEmailCampaign_result, DeleteEmailCampaign_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteEmailCampaign_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteEmailCampaign_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteEmailCampaign_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteEmailCampaign_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteEmailCampaign_result.class, metaDataMap);
    }

    public DeleteEmailCampaign_result() {
    }

    public DeleteEmailCampaign_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteEmailCampaign_result(DeleteEmailCampaign_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public DeleteEmailCampaign_result deepCopy() {
      return new DeleteEmailCampaign_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public DeleteEmailCampaign_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteEmailCampaign_result)
        return this.equals((DeleteEmailCampaign_result)that);
      return false;
    }

    public boolean equals(DeleteEmailCampaign_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteEmailCampaign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteEmailCampaign_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteEmailCampaign_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteEmailCampaign_resultStandardScheme getScheme() {
        return new DeleteEmailCampaign_resultStandardScheme();
      }
    }

    private static class DeleteEmailCampaign_resultStandardScheme extends StandardScheme<DeleteEmailCampaign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteEmailCampaign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteEmailCampaign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteEmailCampaign_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteEmailCampaign_resultTupleScheme getScheme() {
        return new DeleteEmailCampaign_resultTupleScheme();
      }
    }

    private static class DeleteEmailCampaign_resultTupleScheme extends TupleScheme<DeleteEmailCampaign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteEmailCampaign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteEmailCampaign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetChoices_args implements org.apache.thrift.TBase<GetChoices_args, GetChoices_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetChoices_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetChoices_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CHOICE_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceSourceId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetChoices_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetChoices_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String choiceSourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      CHOICE_SOURCE_ID((short)3, "choiceSourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // CHOICE_SOURCE_ID
            return CHOICE_SOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.CHOICE_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChoices_args.class, metaDataMap);
    }

    public GetChoices_args() {
    }

    public GetChoices_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String choiceSourceId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.choiceSourceId = choiceSourceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetChoices_args(GetChoices_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetChoiceSourceId()) {
        this.choiceSourceId = other.choiceSourceId;
      }
    }

    public GetChoices_args deepCopy() {
      return new GetChoices_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.choiceSourceId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetChoices_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetChoices_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getChoiceSourceId() {
      return this.choiceSourceId;
    }

    public GetChoices_args setChoiceSourceId(String choiceSourceId) {
      this.choiceSourceId = choiceSourceId;
      return this;
    }

    public void unsetChoiceSourceId() {
      this.choiceSourceId = null;
    }

    /** Returns true if field choiceSourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceSourceId() {
      return this.choiceSourceId != null;
    }

    public void setChoiceSourceIdIsSet(boolean value) {
      if (!value) {
        this.choiceSourceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case CHOICE_SOURCE_ID:
        if (value == null) {
          unsetChoiceSourceId();
        } else {
          setChoiceSourceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case CHOICE_SOURCE_ID:
        return getChoiceSourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case CHOICE_SOURCE_ID:
        return isSetChoiceSourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetChoices_args)
        return this.equals((GetChoices_args)that);
      return false;
    }

    public boolean equals(GetChoices_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_choiceSourceId = true && this.isSetChoiceSourceId();
      boolean that_present_choiceSourceId = true && that.isSetChoiceSourceId();
      if (this_present_choiceSourceId || that_present_choiceSourceId) {
        if (!(this_present_choiceSourceId && that_present_choiceSourceId))
          return false;
        if (!this.choiceSourceId.equals(that.choiceSourceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_choiceSourceId = true && (isSetChoiceSourceId());
      list.add(present_choiceSourceId);
      if (present_choiceSourceId)
        list.add(choiceSourceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetChoices_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceSourceId()).compareTo(other.isSetChoiceSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceSourceId, other.choiceSourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetChoices_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceSourceId:");
      if (this.choiceSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceSourceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetChoices_argsStandardSchemeFactory implements SchemeFactory {
      public GetChoices_argsStandardScheme getScheme() {
        return new GetChoices_argsStandardScheme();
      }
    }

    private static class GetChoices_argsStandardScheme extends StandardScheme<GetChoices_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetChoices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHOICE_SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceSourceId = iprot.readString();
                struct.setChoiceSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetChoices_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.choiceSourceId != null) {
          oprot.writeFieldBegin(CHOICE_SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.choiceSourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetChoices_argsTupleSchemeFactory implements SchemeFactory {
      public GetChoices_argsTupleScheme getScheme() {
        return new GetChoices_argsTupleScheme();
      }
    }

    private static class GetChoices_argsTupleScheme extends TupleScheme<GetChoices_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetChoices_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetChoiceSourceId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetChoiceSourceId()) {
          oprot.writeString(struct.choiceSourceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetChoices_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.choiceSourceId = iprot.readString();
          struct.setChoiceSourceIdIsSet(true);
        }
      }
    }

  }

  public static class GetChoices_result implements org.apache.thrift.TBase<GetChoices_result, GetChoices_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetChoices_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetChoices_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetChoices_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetChoices_resultTupleSchemeFactory());
    }

    public Map<String,Choice> success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Choice.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChoices_result.class, metaDataMap);
    }

    public GetChoices_result() {
    }

    public GetChoices_result(
      Map<String,Choice> success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetChoices_result(GetChoices_result other) {
      if (other.isSetSuccess()) {
        Map<String,Choice> __this__success = new HashMap<String,Choice>(other.success.size());
        for (Map.Entry<String, Choice> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Choice other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Choice __this__success_copy_value = new Choice(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetChoices_result deepCopy() {
      return new GetChoices_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Choice val) {
      if (this.success == null) {
        this.success = new HashMap<String,Choice>();
      }
      this.success.put(key, val);
    }

    public Map<String,Choice> getSuccess() {
      return this.success;
    }

    public GetChoices_result setSuccess(Map<String,Choice> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetChoices_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Choice>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetChoices_result)
        return this.equals((GetChoices_result)that);
      return false;
    }

    public boolean equals(GetChoices_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetChoices_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetChoices_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetChoices_resultStandardSchemeFactory implements SchemeFactory {
      public GetChoices_resultStandardScheme getScheme() {
        return new GetChoices_resultStandardScheme();
      }
    }

    private static class GetChoices_resultStandardScheme extends StandardScheme<GetChoices_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetChoices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map328 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Choice>(2*_map328.size);
                  String _key329;
                  Choice _val330;
                  for (int _i331 = 0; _i331 < _map328.size; ++_i331)
                  {
                    _key329 = iprot.readString();
                    _val330 = new Choice();
                    _val330.read(iprot);
                    struct.success.put(_key329, _val330);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetChoices_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, Choice> _iter332 : struct.success.entrySet())
            {
              oprot.writeString(_iter332.getKey());
              _iter332.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetChoices_resultTupleSchemeFactory implements SchemeFactory {
      public GetChoices_resultTupleScheme getScheme() {
        return new GetChoices_resultTupleScheme();
      }
    }

    private static class GetChoices_resultTupleScheme extends TupleScheme<GetChoices_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetChoices_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Choice> _iter333 : struct.success.entrySet())
            {
              oprot.writeString(_iter333.getKey());
              _iter333.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetChoices_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map334 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,Choice>(2*_map334.size);
            String _key335;
            Choice _val336;
            for (int _i337 = 0; _i337 < _map334.size; ++_i337)
            {
              _key335 = iprot.readString();
              _val336 = new Choice();
              _val336.read(iprot);
              struct.success.put(_key335, _val336);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class CreateChoice_args implements org.apache.thrift.TBase<CreateChoice_args, CreateChoice_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateChoice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateChoice_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CHOICE_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceSourceId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceId", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateChoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateChoice_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String choiceSourceId; // required
    public String choiceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      CHOICE_SOURCE_ID((short)3, "choiceSourceId"),
      CHOICE_ID((short)4, "choiceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // CHOICE_SOURCE_ID
            return CHOICE_SOURCE_ID;
          case 4: // CHOICE_ID
            return CHOICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.CHOICE_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateChoice_args.class, metaDataMap);
    }

    public CreateChoice_args() {
    }

    public CreateChoice_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String choiceSourceId,
      String choiceId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.choiceSourceId = choiceSourceId;
      this.choiceId = choiceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateChoice_args(CreateChoice_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetChoiceSourceId()) {
        this.choiceSourceId = other.choiceSourceId;
      }
      if (other.isSetChoiceId()) {
        this.choiceId = other.choiceId;
      }
    }

    public CreateChoice_args deepCopy() {
      return new CreateChoice_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.choiceSourceId = null;
      this.choiceId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public CreateChoice_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public CreateChoice_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getChoiceSourceId() {
      return this.choiceSourceId;
    }

    public CreateChoice_args setChoiceSourceId(String choiceSourceId) {
      this.choiceSourceId = choiceSourceId;
      return this;
    }

    public void unsetChoiceSourceId() {
      this.choiceSourceId = null;
    }

    /** Returns true if field choiceSourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceSourceId() {
      return this.choiceSourceId != null;
    }

    public void setChoiceSourceIdIsSet(boolean value) {
      if (!value) {
        this.choiceSourceId = null;
      }
    }

    public String getChoiceId() {
      return this.choiceId;
    }

    public CreateChoice_args setChoiceId(String choiceId) {
      this.choiceId = choiceId;
      return this;
    }

    public void unsetChoiceId() {
      this.choiceId = null;
    }

    /** Returns true if field choiceId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceId() {
      return this.choiceId != null;
    }

    public void setChoiceIdIsSet(boolean value) {
      if (!value) {
        this.choiceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case CHOICE_SOURCE_ID:
        if (value == null) {
          unsetChoiceSourceId();
        } else {
          setChoiceSourceId((String)value);
        }
        break;

      case CHOICE_ID:
        if (value == null) {
          unsetChoiceId();
        } else {
          setChoiceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case CHOICE_SOURCE_ID:
        return getChoiceSourceId();

      case CHOICE_ID:
        return getChoiceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case CHOICE_SOURCE_ID:
        return isSetChoiceSourceId();
      case CHOICE_ID:
        return isSetChoiceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateChoice_args)
        return this.equals((CreateChoice_args)that);
      return false;
    }

    public boolean equals(CreateChoice_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_choiceSourceId = true && this.isSetChoiceSourceId();
      boolean that_present_choiceSourceId = true && that.isSetChoiceSourceId();
      if (this_present_choiceSourceId || that_present_choiceSourceId) {
        if (!(this_present_choiceSourceId && that_present_choiceSourceId))
          return false;
        if (!this.choiceSourceId.equals(that.choiceSourceId))
          return false;
      }

      boolean this_present_choiceId = true && this.isSetChoiceId();
      boolean that_present_choiceId = true && that.isSetChoiceId();
      if (this_present_choiceId || that_present_choiceId) {
        if (!(this_present_choiceId && that_present_choiceId))
          return false;
        if (!this.choiceId.equals(that.choiceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_choiceSourceId = true && (isSetChoiceSourceId());
      list.add(present_choiceSourceId);
      if (present_choiceSourceId)
        list.add(choiceSourceId);

      boolean present_choiceId = true && (isSetChoiceId());
      list.add(present_choiceId);
      if (present_choiceId)
        list.add(choiceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateChoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceSourceId()).compareTo(other.isSetChoiceSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceSourceId, other.choiceSourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceId()).compareTo(other.isSetChoiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceId, other.choiceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateChoice_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceSourceId:");
      if (this.choiceSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceSourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceId:");
      if (this.choiceId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateChoice_argsStandardSchemeFactory implements SchemeFactory {
      public CreateChoice_argsStandardScheme getScheme() {
        return new CreateChoice_argsStandardScheme();
      }
    }

    private static class CreateChoice_argsStandardScheme extends StandardScheme<CreateChoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateChoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHOICE_SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceSourceId = iprot.readString();
                struct.setChoiceSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHOICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceId = iprot.readString();
                struct.setChoiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateChoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.choiceSourceId != null) {
          oprot.writeFieldBegin(CHOICE_SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.choiceSourceId);
          oprot.writeFieldEnd();
        }
        if (struct.choiceId != null) {
          oprot.writeFieldBegin(CHOICE_ID_FIELD_DESC);
          oprot.writeString(struct.choiceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateChoice_argsTupleSchemeFactory implements SchemeFactory {
      public CreateChoice_argsTupleScheme getScheme() {
        return new CreateChoice_argsTupleScheme();
      }
    }

    private static class CreateChoice_argsTupleScheme extends TupleScheme<CreateChoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateChoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetChoiceSourceId()) {
          optionals.set(2);
        }
        if (struct.isSetChoiceId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetChoiceSourceId()) {
          oprot.writeString(struct.choiceSourceId);
        }
        if (struct.isSetChoiceId()) {
          oprot.writeString(struct.choiceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateChoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.choiceSourceId = iprot.readString();
          struct.setChoiceSourceIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.choiceId = iprot.readString();
          struct.setChoiceIdIsSet(true);
        }
      }
    }

  }

  public static class CreateChoice_result implements org.apache.thrift.TBase<CreateChoice_result, CreateChoice_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateChoice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateChoice_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateChoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateChoice_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateChoice_result.class, metaDataMap);
    }

    public CreateChoice_result() {
    }

    public CreateChoice_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateChoice_result(CreateChoice_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public CreateChoice_result deepCopy() {
      return new CreateChoice_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public CreateChoice_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateChoice_result)
        return this.equals((CreateChoice_result)that);
      return false;
    }

    public boolean equals(CreateChoice_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateChoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateChoice_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateChoice_resultStandardSchemeFactory implements SchemeFactory {
      public CreateChoice_resultStandardScheme getScheme() {
        return new CreateChoice_resultStandardScheme();
      }
    }

    private static class CreateChoice_resultStandardScheme extends StandardScheme<CreateChoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateChoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateChoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateChoice_resultTupleSchemeFactory implements SchemeFactory {
      public CreateChoice_resultTupleScheme getScheme() {
        return new CreateChoice_resultTupleScheme();
      }
    }

    private static class CreateChoice_resultTupleScheme extends TupleScheme<CreateChoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateChoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateChoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class UpdateChoice_args implements org.apache.thrift.TBase<UpdateChoice_args, UpdateChoice_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateChoice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateChoice_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CHOICE_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceSourceId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHOICE_FIELD_DESC = new org.apache.thrift.protocol.TField("choice", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateChoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateChoice_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String choiceSourceId; // required
    public Choice choice; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      CHOICE_SOURCE_ID((short)3, "choiceSourceId"),
      CHOICE((short)4, "choice");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // CHOICE_SOURCE_ID
            return CHOICE_SOURCE_ID;
          case 4: // CHOICE
            return CHOICE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.CHOICE_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHOICE, new org.apache.thrift.meta_data.FieldMetaData("choice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Choice.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateChoice_args.class, metaDataMap);
    }

    public UpdateChoice_args() {
    }

    public UpdateChoice_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String choiceSourceId,
      Choice choice)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.choiceSourceId = choiceSourceId;
      this.choice = choice;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateChoice_args(UpdateChoice_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetChoiceSourceId()) {
        this.choiceSourceId = other.choiceSourceId;
      }
      if (other.isSetChoice()) {
        this.choice = new Choice(other.choice);
      }
    }

    public UpdateChoice_args deepCopy() {
      return new UpdateChoice_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.choiceSourceId = null;
      this.choice = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public UpdateChoice_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public UpdateChoice_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getChoiceSourceId() {
      return this.choiceSourceId;
    }

    public UpdateChoice_args setChoiceSourceId(String choiceSourceId) {
      this.choiceSourceId = choiceSourceId;
      return this;
    }

    public void unsetChoiceSourceId() {
      this.choiceSourceId = null;
    }

    /** Returns true if field choiceSourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceSourceId() {
      return this.choiceSourceId != null;
    }

    public void setChoiceSourceIdIsSet(boolean value) {
      if (!value) {
        this.choiceSourceId = null;
      }
    }

    public Choice getChoice() {
      return this.choice;
    }

    public UpdateChoice_args setChoice(Choice choice) {
      this.choice = choice;
      return this;
    }

    public void unsetChoice() {
      this.choice = null;
    }

    /** Returns true if field choice is set (has been assigned a value) and false otherwise */
    public boolean isSetChoice() {
      return this.choice != null;
    }

    public void setChoiceIsSet(boolean value) {
      if (!value) {
        this.choice = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case CHOICE_SOURCE_ID:
        if (value == null) {
          unsetChoiceSourceId();
        } else {
          setChoiceSourceId((String)value);
        }
        break;

      case CHOICE:
        if (value == null) {
          unsetChoice();
        } else {
          setChoice((Choice)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case CHOICE_SOURCE_ID:
        return getChoiceSourceId();

      case CHOICE:
        return getChoice();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case CHOICE_SOURCE_ID:
        return isSetChoiceSourceId();
      case CHOICE:
        return isSetChoice();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateChoice_args)
        return this.equals((UpdateChoice_args)that);
      return false;
    }

    public boolean equals(UpdateChoice_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_choiceSourceId = true && this.isSetChoiceSourceId();
      boolean that_present_choiceSourceId = true && that.isSetChoiceSourceId();
      if (this_present_choiceSourceId || that_present_choiceSourceId) {
        if (!(this_present_choiceSourceId && that_present_choiceSourceId))
          return false;
        if (!this.choiceSourceId.equals(that.choiceSourceId))
          return false;
      }

      boolean this_present_choice = true && this.isSetChoice();
      boolean that_present_choice = true && that.isSetChoice();
      if (this_present_choice || that_present_choice) {
        if (!(this_present_choice && that_present_choice))
          return false;
        if (!this.choice.equals(that.choice))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_choiceSourceId = true && (isSetChoiceSourceId());
      list.add(present_choiceSourceId);
      if (present_choiceSourceId)
        list.add(choiceSourceId);

      boolean present_choice = true && (isSetChoice());
      list.add(present_choice);
      if (present_choice)
        list.add(choice);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateChoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceSourceId()).compareTo(other.isSetChoiceSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceSourceId, other.choiceSourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoice()).compareTo(other.isSetChoice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choice, other.choice);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateChoice_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceSourceId:");
      if (this.choiceSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceSourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choice:");
      if (this.choice == null) {
        sb.append("null");
      } else {
        sb.append(this.choice);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (choice != null) {
        choice.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateChoice_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateChoice_argsStandardScheme getScheme() {
        return new UpdateChoice_argsStandardScheme();
      }
    }

    private static class UpdateChoice_argsStandardScheme extends StandardScheme<UpdateChoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateChoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHOICE_SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceSourceId = iprot.readString();
                struct.setChoiceSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHOICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.choice = new Choice();
                struct.choice.read(iprot);
                struct.setChoiceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateChoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.choiceSourceId != null) {
          oprot.writeFieldBegin(CHOICE_SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.choiceSourceId);
          oprot.writeFieldEnd();
        }
        if (struct.choice != null) {
          oprot.writeFieldBegin(CHOICE_FIELD_DESC);
          struct.choice.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateChoice_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateChoice_argsTupleScheme getScheme() {
        return new UpdateChoice_argsTupleScheme();
      }
    }

    private static class UpdateChoice_argsTupleScheme extends TupleScheme<UpdateChoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateChoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetChoiceSourceId()) {
          optionals.set(2);
        }
        if (struct.isSetChoice()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetChoiceSourceId()) {
          oprot.writeString(struct.choiceSourceId);
        }
        if (struct.isSetChoice()) {
          struct.choice.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateChoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.choiceSourceId = iprot.readString();
          struct.setChoiceSourceIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.choice = new Choice();
          struct.choice.read(iprot);
          struct.setChoiceIsSet(true);
        }
      }
    }

  }

  public static class UpdateChoice_result implements org.apache.thrift.TBase<UpdateChoice_result, UpdateChoice_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateChoice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateChoice_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateChoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateChoice_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateChoice_result.class, metaDataMap);
    }

    public UpdateChoice_result() {
    }

    public UpdateChoice_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateChoice_result(UpdateChoice_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public UpdateChoice_result deepCopy() {
      return new UpdateChoice_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public UpdateChoice_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateChoice_result)
        return this.equals((UpdateChoice_result)that);
      return false;
    }

    public boolean equals(UpdateChoice_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateChoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateChoice_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateChoice_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateChoice_resultStandardScheme getScheme() {
        return new UpdateChoice_resultStandardScheme();
      }
    }

    private static class UpdateChoice_resultStandardScheme extends StandardScheme<UpdateChoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateChoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateChoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateChoice_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateChoice_resultTupleScheme getScheme() {
        return new UpdateChoice_resultTupleScheme();
      }
    }

    private static class UpdateChoice_resultTupleScheme extends TupleScheme<UpdateChoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateChoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateChoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class DeleteChoice_args implements org.apache.thrift.TBase<DeleteChoice_args, DeleteChoice_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteChoice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteChoice_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CHOICE_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceSourceId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceId", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteChoice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteChoice_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String choiceSourceId; // required
    public String choiceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      CHOICE_SOURCE_ID((short)3, "choiceSourceId"),
      CHOICE_ID((short)4, "choiceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // CHOICE_SOURCE_ID
            return CHOICE_SOURCE_ID;
          case 4: // CHOICE_ID
            return CHOICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.CHOICE_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteChoice_args.class, metaDataMap);
    }

    public DeleteChoice_args() {
    }

    public DeleteChoice_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String choiceSourceId,
      String choiceId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.choiceSourceId = choiceSourceId;
      this.choiceId = choiceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteChoice_args(DeleteChoice_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetChoiceSourceId()) {
        this.choiceSourceId = other.choiceSourceId;
      }
      if (other.isSetChoiceId()) {
        this.choiceId = other.choiceId;
      }
    }

    public DeleteChoice_args deepCopy() {
      return new DeleteChoice_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.choiceSourceId = null;
      this.choiceId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public DeleteChoice_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public DeleteChoice_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getChoiceSourceId() {
      return this.choiceSourceId;
    }

    public DeleteChoice_args setChoiceSourceId(String choiceSourceId) {
      this.choiceSourceId = choiceSourceId;
      return this;
    }

    public void unsetChoiceSourceId() {
      this.choiceSourceId = null;
    }

    /** Returns true if field choiceSourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceSourceId() {
      return this.choiceSourceId != null;
    }

    public void setChoiceSourceIdIsSet(boolean value) {
      if (!value) {
        this.choiceSourceId = null;
      }
    }

    public String getChoiceId() {
      return this.choiceId;
    }

    public DeleteChoice_args setChoiceId(String choiceId) {
      this.choiceId = choiceId;
      return this;
    }

    public void unsetChoiceId() {
      this.choiceId = null;
    }

    /** Returns true if field choiceId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceId() {
      return this.choiceId != null;
    }

    public void setChoiceIdIsSet(boolean value) {
      if (!value) {
        this.choiceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case CHOICE_SOURCE_ID:
        if (value == null) {
          unsetChoiceSourceId();
        } else {
          setChoiceSourceId((String)value);
        }
        break;

      case CHOICE_ID:
        if (value == null) {
          unsetChoiceId();
        } else {
          setChoiceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case CHOICE_SOURCE_ID:
        return getChoiceSourceId();

      case CHOICE_ID:
        return getChoiceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case CHOICE_SOURCE_ID:
        return isSetChoiceSourceId();
      case CHOICE_ID:
        return isSetChoiceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteChoice_args)
        return this.equals((DeleteChoice_args)that);
      return false;
    }

    public boolean equals(DeleteChoice_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_choiceSourceId = true && this.isSetChoiceSourceId();
      boolean that_present_choiceSourceId = true && that.isSetChoiceSourceId();
      if (this_present_choiceSourceId || that_present_choiceSourceId) {
        if (!(this_present_choiceSourceId && that_present_choiceSourceId))
          return false;
        if (!this.choiceSourceId.equals(that.choiceSourceId))
          return false;
      }

      boolean this_present_choiceId = true && this.isSetChoiceId();
      boolean that_present_choiceId = true && that.isSetChoiceId();
      if (this_present_choiceId || that_present_choiceId) {
        if (!(this_present_choiceId && that_present_choiceId))
          return false;
        if (!this.choiceId.equals(that.choiceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_choiceSourceId = true && (isSetChoiceSourceId());
      list.add(present_choiceSourceId);
      if (present_choiceSourceId)
        list.add(choiceSourceId);

      boolean present_choiceId = true && (isSetChoiceId());
      list.add(present_choiceId);
      if (present_choiceId)
        list.add(choiceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteChoice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceSourceId()).compareTo(other.isSetChoiceSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceSourceId, other.choiceSourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceId()).compareTo(other.isSetChoiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceId, other.choiceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteChoice_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceSourceId:");
      if (this.choiceSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceSourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceId:");
      if (this.choiceId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteChoice_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteChoice_argsStandardScheme getScheme() {
        return new DeleteChoice_argsStandardScheme();
      }
    }

    private static class DeleteChoice_argsStandardScheme extends StandardScheme<DeleteChoice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteChoice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHOICE_SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceSourceId = iprot.readString();
                struct.setChoiceSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHOICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceId = iprot.readString();
                struct.setChoiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteChoice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.choiceSourceId != null) {
          oprot.writeFieldBegin(CHOICE_SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.choiceSourceId);
          oprot.writeFieldEnd();
        }
        if (struct.choiceId != null) {
          oprot.writeFieldBegin(CHOICE_ID_FIELD_DESC);
          oprot.writeString(struct.choiceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteChoice_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteChoice_argsTupleScheme getScheme() {
        return new DeleteChoice_argsTupleScheme();
      }
    }

    private static class DeleteChoice_argsTupleScheme extends TupleScheme<DeleteChoice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteChoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetChoiceSourceId()) {
          optionals.set(2);
        }
        if (struct.isSetChoiceId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetChoiceSourceId()) {
          oprot.writeString(struct.choiceSourceId);
        }
        if (struct.isSetChoiceId()) {
          oprot.writeString(struct.choiceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteChoice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.choiceSourceId = iprot.readString();
          struct.setChoiceSourceIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.choiceId = iprot.readString();
          struct.setChoiceIdIsSet(true);
        }
      }
    }

  }

  public static class DeleteChoice_result implements org.apache.thrift.TBase<DeleteChoice_result, DeleteChoice_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteChoice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteChoice_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteChoice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteChoice_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteChoice_result.class, metaDataMap);
    }

    public DeleteChoice_result() {
    }

    public DeleteChoice_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteChoice_result(DeleteChoice_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public DeleteChoice_result deepCopy() {
      return new DeleteChoice_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public DeleteChoice_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteChoice_result)
        return this.equals((DeleteChoice_result)that);
      return false;
    }

    public boolean equals(DeleteChoice_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteChoice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteChoice_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteChoice_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteChoice_resultStandardScheme getScheme() {
        return new DeleteChoice_resultStandardScheme();
      }
    }

    private static class DeleteChoice_resultStandardScheme extends StandardScheme<DeleteChoice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteChoice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteChoice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteChoice_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteChoice_resultTupleScheme getScheme() {
        return new DeleteChoice_resultTupleScheme();
      }
    }

    private static class DeleteChoice_resultTupleScheme extends TupleScheme<DeleteChoice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteChoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteChoice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetChoiceVariants_args implements org.apache.thrift.TBase<GetChoiceVariants_args, GetChoiceVariants_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetChoiceVariants_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetChoiceVariants_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CHOICE_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceSourceId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceId", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetChoiceVariants_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetChoiceVariants_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String choiceSourceId; // required
    public String choiceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      CHOICE_SOURCE_ID((short)3, "choiceSourceId"),
      CHOICE_ID((short)4, "choiceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // CHOICE_SOURCE_ID
            return CHOICE_SOURCE_ID;
          case 4: // CHOICE_ID
            return CHOICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.CHOICE_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChoiceVariants_args.class, metaDataMap);
    }

    public GetChoiceVariants_args() {
    }

    public GetChoiceVariants_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String choiceSourceId,
      String choiceId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.choiceSourceId = choiceSourceId;
      this.choiceId = choiceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetChoiceVariants_args(GetChoiceVariants_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetChoiceSourceId()) {
        this.choiceSourceId = other.choiceSourceId;
      }
      if (other.isSetChoiceId()) {
        this.choiceId = other.choiceId;
      }
    }

    public GetChoiceVariants_args deepCopy() {
      return new GetChoiceVariants_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.choiceSourceId = null;
      this.choiceId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetChoiceVariants_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetChoiceVariants_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getChoiceSourceId() {
      return this.choiceSourceId;
    }

    public GetChoiceVariants_args setChoiceSourceId(String choiceSourceId) {
      this.choiceSourceId = choiceSourceId;
      return this;
    }

    public void unsetChoiceSourceId() {
      this.choiceSourceId = null;
    }

    /** Returns true if field choiceSourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceSourceId() {
      return this.choiceSourceId != null;
    }

    public void setChoiceSourceIdIsSet(boolean value) {
      if (!value) {
        this.choiceSourceId = null;
      }
    }

    public String getChoiceId() {
      return this.choiceId;
    }

    public GetChoiceVariants_args setChoiceId(String choiceId) {
      this.choiceId = choiceId;
      return this;
    }

    public void unsetChoiceId() {
      this.choiceId = null;
    }

    /** Returns true if field choiceId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceId() {
      return this.choiceId != null;
    }

    public void setChoiceIdIsSet(boolean value) {
      if (!value) {
        this.choiceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case CHOICE_SOURCE_ID:
        if (value == null) {
          unsetChoiceSourceId();
        } else {
          setChoiceSourceId((String)value);
        }
        break;

      case CHOICE_ID:
        if (value == null) {
          unsetChoiceId();
        } else {
          setChoiceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case CHOICE_SOURCE_ID:
        return getChoiceSourceId();

      case CHOICE_ID:
        return getChoiceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case CHOICE_SOURCE_ID:
        return isSetChoiceSourceId();
      case CHOICE_ID:
        return isSetChoiceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetChoiceVariants_args)
        return this.equals((GetChoiceVariants_args)that);
      return false;
    }

    public boolean equals(GetChoiceVariants_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_choiceSourceId = true && this.isSetChoiceSourceId();
      boolean that_present_choiceSourceId = true && that.isSetChoiceSourceId();
      if (this_present_choiceSourceId || that_present_choiceSourceId) {
        if (!(this_present_choiceSourceId && that_present_choiceSourceId))
          return false;
        if (!this.choiceSourceId.equals(that.choiceSourceId))
          return false;
      }

      boolean this_present_choiceId = true && this.isSetChoiceId();
      boolean that_present_choiceId = true && that.isSetChoiceId();
      if (this_present_choiceId || that_present_choiceId) {
        if (!(this_present_choiceId && that_present_choiceId))
          return false;
        if (!this.choiceId.equals(that.choiceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_choiceSourceId = true && (isSetChoiceSourceId());
      list.add(present_choiceSourceId);
      if (present_choiceSourceId)
        list.add(choiceSourceId);

      boolean present_choiceId = true && (isSetChoiceId());
      list.add(present_choiceId);
      if (present_choiceId)
        list.add(choiceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetChoiceVariants_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceSourceId()).compareTo(other.isSetChoiceSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceSourceId, other.choiceSourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceId()).compareTo(other.isSetChoiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceId, other.choiceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetChoiceVariants_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceSourceId:");
      if (this.choiceSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceSourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceId:");
      if (this.choiceId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetChoiceVariants_argsStandardSchemeFactory implements SchemeFactory {
      public GetChoiceVariants_argsStandardScheme getScheme() {
        return new GetChoiceVariants_argsStandardScheme();
      }
    }

    private static class GetChoiceVariants_argsStandardScheme extends StandardScheme<GetChoiceVariants_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetChoiceVariants_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHOICE_SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceSourceId = iprot.readString();
                struct.setChoiceSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHOICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceId = iprot.readString();
                struct.setChoiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetChoiceVariants_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.choiceSourceId != null) {
          oprot.writeFieldBegin(CHOICE_SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.choiceSourceId);
          oprot.writeFieldEnd();
        }
        if (struct.choiceId != null) {
          oprot.writeFieldBegin(CHOICE_ID_FIELD_DESC);
          oprot.writeString(struct.choiceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetChoiceVariants_argsTupleSchemeFactory implements SchemeFactory {
      public GetChoiceVariants_argsTupleScheme getScheme() {
        return new GetChoiceVariants_argsTupleScheme();
      }
    }

    private static class GetChoiceVariants_argsTupleScheme extends TupleScheme<GetChoiceVariants_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetChoiceVariants_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetChoiceSourceId()) {
          optionals.set(2);
        }
        if (struct.isSetChoiceId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetChoiceSourceId()) {
          oprot.writeString(struct.choiceSourceId);
        }
        if (struct.isSetChoiceId()) {
          oprot.writeString(struct.choiceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetChoiceVariants_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.choiceSourceId = iprot.readString();
          struct.setChoiceSourceIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.choiceId = iprot.readString();
          struct.setChoiceIdIsSet(true);
        }
      }
    }

  }

  public static class GetChoiceVariants_result implements org.apache.thrift.TBase<GetChoiceVariants_result, GetChoiceVariants_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetChoiceVariants_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetChoiceVariants_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetChoiceVariants_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetChoiceVariants_resultTupleSchemeFactory());
    }

    public Map<String,ChoiceVariant> success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceVariant.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChoiceVariants_result.class, metaDataMap);
    }

    public GetChoiceVariants_result() {
    }

    public GetChoiceVariants_result(
      Map<String,ChoiceVariant> success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetChoiceVariants_result(GetChoiceVariants_result other) {
      if (other.isSetSuccess()) {
        Map<String,ChoiceVariant> __this__success = new HashMap<String,ChoiceVariant>(other.success.size());
        for (Map.Entry<String, ChoiceVariant> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          ChoiceVariant other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          ChoiceVariant __this__success_copy_value = new ChoiceVariant(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetChoiceVariants_result deepCopy() {
      return new GetChoiceVariants_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, ChoiceVariant val) {
      if (this.success == null) {
        this.success = new HashMap<String,ChoiceVariant>();
      }
      this.success.put(key, val);
    }

    public Map<String,ChoiceVariant> getSuccess() {
      return this.success;
    }

    public GetChoiceVariants_result setSuccess(Map<String,ChoiceVariant> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetChoiceVariants_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,ChoiceVariant>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetChoiceVariants_result)
        return this.equals((GetChoiceVariants_result)that);
      return false;
    }

    public boolean equals(GetChoiceVariants_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetChoiceVariants_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetChoiceVariants_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetChoiceVariants_resultStandardSchemeFactory implements SchemeFactory {
      public GetChoiceVariants_resultStandardScheme getScheme() {
        return new GetChoiceVariants_resultStandardScheme();
      }
    }

    private static class GetChoiceVariants_resultStandardScheme extends StandardScheme<GetChoiceVariants_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetChoiceVariants_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map338 = iprot.readMapBegin();
                  struct.success = new HashMap<String,ChoiceVariant>(2*_map338.size);
                  String _key339;
                  ChoiceVariant _val340;
                  for (int _i341 = 0; _i341 < _map338.size; ++_i341)
                  {
                    _key339 = iprot.readString();
                    _val340 = new ChoiceVariant();
                    _val340.read(iprot);
                    struct.success.put(_key339, _val340);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetChoiceVariants_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, ChoiceVariant> _iter342 : struct.success.entrySet())
            {
              oprot.writeString(_iter342.getKey());
              _iter342.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetChoiceVariants_resultTupleSchemeFactory implements SchemeFactory {
      public GetChoiceVariants_resultTupleScheme getScheme() {
        return new GetChoiceVariants_resultTupleScheme();
      }
    }

    private static class GetChoiceVariants_resultTupleScheme extends TupleScheme<GetChoiceVariants_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetChoiceVariants_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, ChoiceVariant> _iter343 : struct.success.entrySet())
            {
              oprot.writeString(_iter343.getKey());
              _iter343.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetChoiceVariants_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map344 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,ChoiceVariant>(2*_map344.size);
            String _key345;
            ChoiceVariant _val346;
            for (int _i347 = 0; _i347 < _map344.size; ++_i347)
            {
              _key345 = iprot.readString();
              _val346 = new ChoiceVariant();
              _val346.read(iprot);
              struct.success.put(_key345, _val346);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class CreateChoiceVariant_args implements org.apache.thrift.TBase<CreateChoiceVariant_args, CreateChoiceVariant_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateChoiceVariant_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateChoiceVariant_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CHOICE_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceSourceId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CHOICE_VARIANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceVariantId", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateChoiceVariant_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateChoiceVariant_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String choiceSourceId; // required
    public String choiceId; // required
    public String choiceVariantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      CHOICE_SOURCE_ID((short)3, "choiceSourceId"),
      CHOICE_ID((short)4, "choiceId"),
      CHOICE_VARIANT_ID((short)5, "choiceVariantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // CHOICE_SOURCE_ID
            return CHOICE_SOURCE_ID;
          case 4: // CHOICE_ID
            return CHOICE_ID;
          case 5: // CHOICE_VARIANT_ID
            return CHOICE_VARIANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.CHOICE_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHOICE_VARIANT_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceVariantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateChoiceVariant_args.class, metaDataMap);
    }

    public CreateChoiceVariant_args() {
    }

    public CreateChoiceVariant_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String choiceSourceId,
      String choiceId,
      String choiceVariantId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.choiceSourceId = choiceSourceId;
      this.choiceId = choiceId;
      this.choiceVariantId = choiceVariantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateChoiceVariant_args(CreateChoiceVariant_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetChoiceSourceId()) {
        this.choiceSourceId = other.choiceSourceId;
      }
      if (other.isSetChoiceId()) {
        this.choiceId = other.choiceId;
      }
      if (other.isSetChoiceVariantId()) {
        this.choiceVariantId = other.choiceVariantId;
      }
    }

    public CreateChoiceVariant_args deepCopy() {
      return new CreateChoiceVariant_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.choiceSourceId = null;
      this.choiceId = null;
      this.choiceVariantId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public CreateChoiceVariant_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public CreateChoiceVariant_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getChoiceSourceId() {
      return this.choiceSourceId;
    }

    public CreateChoiceVariant_args setChoiceSourceId(String choiceSourceId) {
      this.choiceSourceId = choiceSourceId;
      return this;
    }

    public void unsetChoiceSourceId() {
      this.choiceSourceId = null;
    }

    /** Returns true if field choiceSourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceSourceId() {
      return this.choiceSourceId != null;
    }

    public void setChoiceSourceIdIsSet(boolean value) {
      if (!value) {
        this.choiceSourceId = null;
      }
    }

    public String getChoiceId() {
      return this.choiceId;
    }

    public CreateChoiceVariant_args setChoiceId(String choiceId) {
      this.choiceId = choiceId;
      return this;
    }

    public void unsetChoiceId() {
      this.choiceId = null;
    }

    /** Returns true if field choiceId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceId() {
      return this.choiceId != null;
    }

    public void setChoiceIdIsSet(boolean value) {
      if (!value) {
        this.choiceId = null;
      }
    }

    public String getChoiceVariantId() {
      return this.choiceVariantId;
    }

    public CreateChoiceVariant_args setChoiceVariantId(String choiceVariantId) {
      this.choiceVariantId = choiceVariantId;
      return this;
    }

    public void unsetChoiceVariantId() {
      this.choiceVariantId = null;
    }

    /** Returns true if field choiceVariantId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceVariantId() {
      return this.choiceVariantId != null;
    }

    public void setChoiceVariantIdIsSet(boolean value) {
      if (!value) {
        this.choiceVariantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case CHOICE_SOURCE_ID:
        if (value == null) {
          unsetChoiceSourceId();
        } else {
          setChoiceSourceId((String)value);
        }
        break;

      case CHOICE_ID:
        if (value == null) {
          unsetChoiceId();
        } else {
          setChoiceId((String)value);
        }
        break;

      case CHOICE_VARIANT_ID:
        if (value == null) {
          unsetChoiceVariantId();
        } else {
          setChoiceVariantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case CHOICE_SOURCE_ID:
        return getChoiceSourceId();

      case CHOICE_ID:
        return getChoiceId();

      case CHOICE_VARIANT_ID:
        return getChoiceVariantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case CHOICE_SOURCE_ID:
        return isSetChoiceSourceId();
      case CHOICE_ID:
        return isSetChoiceId();
      case CHOICE_VARIANT_ID:
        return isSetChoiceVariantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateChoiceVariant_args)
        return this.equals((CreateChoiceVariant_args)that);
      return false;
    }

    public boolean equals(CreateChoiceVariant_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_choiceSourceId = true && this.isSetChoiceSourceId();
      boolean that_present_choiceSourceId = true && that.isSetChoiceSourceId();
      if (this_present_choiceSourceId || that_present_choiceSourceId) {
        if (!(this_present_choiceSourceId && that_present_choiceSourceId))
          return false;
        if (!this.choiceSourceId.equals(that.choiceSourceId))
          return false;
      }

      boolean this_present_choiceId = true && this.isSetChoiceId();
      boolean that_present_choiceId = true && that.isSetChoiceId();
      if (this_present_choiceId || that_present_choiceId) {
        if (!(this_present_choiceId && that_present_choiceId))
          return false;
        if (!this.choiceId.equals(that.choiceId))
          return false;
      }

      boolean this_present_choiceVariantId = true && this.isSetChoiceVariantId();
      boolean that_present_choiceVariantId = true && that.isSetChoiceVariantId();
      if (this_present_choiceVariantId || that_present_choiceVariantId) {
        if (!(this_present_choiceVariantId && that_present_choiceVariantId))
          return false;
        if (!this.choiceVariantId.equals(that.choiceVariantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_choiceSourceId = true && (isSetChoiceSourceId());
      list.add(present_choiceSourceId);
      if (present_choiceSourceId)
        list.add(choiceSourceId);

      boolean present_choiceId = true && (isSetChoiceId());
      list.add(present_choiceId);
      if (present_choiceId)
        list.add(choiceId);

      boolean present_choiceVariantId = true && (isSetChoiceVariantId());
      list.add(present_choiceVariantId);
      if (present_choiceVariantId)
        list.add(choiceVariantId);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateChoiceVariant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceSourceId()).compareTo(other.isSetChoiceSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceSourceId, other.choiceSourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceId()).compareTo(other.isSetChoiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceId, other.choiceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceVariantId()).compareTo(other.isSetChoiceVariantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceVariantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceVariantId, other.choiceVariantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateChoiceVariant_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceSourceId:");
      if (this.choiceSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceSourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceId:");
      if (this.choiceId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceVariantId:");
      if (this.choiceVariantId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceVariantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateChoiceVariant_argsStandardSchemeFactory implements SchemeFactory {
      public CreateChoiceVariant_argsStandardScheme getScheme() {
        return new CreateChoiceVariant_argsStandardScheme();
      }
    }

    private static class CreateChoiceVariant_argsStandardScheme extends StandardScheme<CreateChoiceVariant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateChoiceVariant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHOICE_SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceSourceId = iprot.readString();
                struct.setChoiceSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHOICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceId = iprot.readString();
                struct.setChoiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CHOICE_VARIANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceVariantId = iprot.readString();
                struct.setChoiceVariantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateChoiceVariant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.choiceSourceId != null) {
          oprot.writeFieldBegin(CHOICE_SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.choiceSourceId);
          oprot.writeFieldEnd();
        }
        if (struct.choiceId != null) {
          oprot.writeFieldBegin(CHOICE_ID_FIELD_DESC);
          oprot.writeString(struct.choiceId);
          oprot.writeFieldEnd();
        }
        if (struct.choiceVariantId != null) {
          oprot.writeFieldBegin(CHOICE_VARIANT_ID_FIELD_DESC);
          oprot.writeString(struct.choiceVariantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateChoiceVariant_argsTupleSchemeFactory implements SchemeFactory {
      public CreateChoiceVariant_argsTupleScheme getScheme() {
        return new CreateChoiceVariant_argsTupleScheme();
      }
    }

    private static class CreateChoiceVariant_argsTupleScheme extends TupleScheme<CreateChoiceVariant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateChoiceVariant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetChoiceSourceId()) {
          optionals.set(2);
        }
        if (struct.isSetChoiceId()) {
          optionals.set(3);
        }
        if (struct.isSetChoiceVariantId()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetChoiceSourceId()) {
          oprot.writeString(struct.choiceSourceId);
        }
        if (struct.isSetChoiceId()) {
          oprot.writeString(struct.choiceId);
        }
        if (struct.isSetChoiceVariantId()) {
          oprot.writeString(struct.choiceVariantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateChoiceVariant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.choiceSourceId = iprot.readString();
          struct.setChoiceSourceIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.choiceId = iprot.readString();
          struct.setChoiceIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.choiceVariantId = iprot.readString();
          struct.setChoiceVariantIdIsSet(true);
        }
      }
    }

  }

  public static class CreateChoiceVariant_result implements org.apache.thrift.TBase<CreateChoiceVariant_result, CreateChoiceVariant_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateChoiceVariant_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateChoiceVariant_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateChoiceVariant_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateChoiceVariant_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateChoiceVariant_result.class, metaDataMap);
    }

    public CreateChoiceVariant_result() {
    }

    public CreateChoiceVariant_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateChoiceVariant_result(CreateChoiceVariant_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public CreateChoiceVariant_result deepCopy() {
      return new CreateChoiceVariant_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public CreateChoiceVariant_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateChoiceVariant_result)
        return this.equals((CreateChoiceVariant_result)that);
      return false;
    }

    public boolean equals(CreateChoiceVariant_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateChoiceVariant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateChoiceVariant_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateChoiceVariant_resultStandardSchemeFactory implements SchemeFactory {
      public CreateChoiceVariant_resultStandardScheme getScheme() {
        return new CreateChoiceVariant_resultStandardScheme();
      }
    }

    private static class CreateChoiceVariant_resultStandardScheme extends StandardScheme<CreateChoiceVariant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateChoiceVariant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateChoiceVariant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateChoiceVariant_resultTupleSchemeFactory implements SchemeFactory {
      public CreateChoiceVariant_resultTupleScheme getScheme() {
        return new CreateChoiceVariant_resultTupleScheme();
      }
    }

    private static class CreateChoiceVariant_resultTupleScheme extends TupleScheme<CreateChoiceVariant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateChoiceVariant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateChoiceVariant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class UpdateChoiceVariant_args implements org.apache.thrift.TBase<UpdateChoiceVariant_args, UpdateChoiceVariant_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateChoiceVariant_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateChoiceVariant_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CHOICE_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceSourceId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHOICE_VARIANT_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceVariant", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateChoiceVariant_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateChoiceVariant_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String choiceSourceId; // required
    public ChoiceVariant choiceVariant; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      CHOICE_SOURCE_ID((short)3, "choiceSourceId"),
      CHOICE_VARIANT((short)4, "choiceVariant");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // CHOICE_SOURCE_ID
            return CHOICE_SOURCE_ID;
          case 4: // CHOICE_VARIANT
            return CHOICE_VARIANT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.CHOICE_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHOICE_VARIANT, new org.apache.thrift.meta_data.FieldMetaData("choiceVariant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceVariant.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateChoiceVariant_args.class, metaDataMap);
    }

    public UpdateChoiceVariant_args() {
    }

    public UpdateChoiceVariant_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String choiceSourceId,
      ChoiceVariant choiceVariant)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.choiceSourceId = choiceSourceId;
      this.choiceVariant = choiceVariant;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateChoiceVariant_args(UpdateChoiceVariant_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetChoiceSourceId()) {
        this.choiceSourceId = other.choiceSourceId;
      }
      if (other.isSetChoiceVariant()) {
        this.choiceVariant = new ChoiceVariant(other.choiceVariant);
      }
    }

    public UpdateChoiceVariant_args deepCopy() {
      return new UpdateChoiceVariant_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.choiceSourceId = null;
      this.choiceVariant = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public UpdateChoiceVariant_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public UpdateChoiceVariant_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getChoiceSourceId() {
      return this.choiceSourceId;
    }

    public UpdateChoiceVariant_args setChoiceSourceId(String choiceSourceId) {
      this.choiceSourceId = choiceSourceId;
      return this;
    }

    public void unsetChoiceSourceId() {
      this.choiceSourceId = null;
    }

    /** Returns true if field choiceSourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceSourceId() {
      return this.choiceSourceId != null;
    }

    public void setChoiceSourceIdIsSet(boolean value) {
      if (!value) {
        this.choiceSourceId = null;
      }
    }

    public ChoiceVariant getChoiceVariant() {
      return this.choiceVariant;
    }

    public UpdateChoiceVariant_args setChoiceVariant(ChoiceVariant choiceVariant) {
      this.choiceVariant = choiceVariant;
      return this;
    }

    public void unsetChoiceVariant() {
      this.choiceVariant = null;
    }

    /** Returns true if field choiceVariant is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceVariant() {
      return this.choiceVariant != null;
    }

    public void setChoiceVariantIsSet(boolean value) {
      if (!value) {
        this.choiceVariant = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case CHOICE_SOURCE_ID:
        if (value == null) {
          unsetChoiceSourceId();
        } else {
          setChoiceSourceId((String)value);
        }
        break;

      case CHOICE_VARIANT:
        if (value == null) {
          unsetChoiceVariant();
        } else {
          setChoiceVariant((ChoiceVariant)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case CHOICE_SOURCE_ID:
        return getChoiceSourceId();

      case CHOICE_VARIANT:
        return getChoiceVariant();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case CHOICE_SOURCE_ID:
        return isSetChoiceSourceId();
      case CHOICE_VARIANT:
        return isSetChoiceVariant();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateChoiceVariant_args)
        return this.equals((UpdateChoiceVariant_args)that);
      return false;
    }

    public boolean equals(UpdateChoiceVariant_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_choiceSourceId = true && this.isSetChoiceSourceId();
      boolean that_present_choiceSourceId = true && that.isSetChoiceSourceId();
      if (this_present_choiceSourceId || that_present_choiceSourceId) {
        if (!(this_present_choiceSourceId && that_present_choiceSourceId))
          return false;
        if (!this.choiceSourceId.equals(that.choiceSourceId))
          return false;
      }

      boolean this_present_choiceVariant = true && this.isSetChoiceVariant();
      boolean that_present_choiceVariant = true && that.isSetChoiceVariant();
      if (this_present_choiceVariant || that_present_choiceVariant) {
        if (!(this_present_choiceVariant && that_present_choiceVariant))
          return false;
        if (!this.choiceVariant.equals(that.choiceVariant))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_choiceSourceId = true && (isSetChoiceSourceId());
      list.add(present_choiceSourceId);
      if (present_choiceSourceId)
        list.add(choiceSourceId);

      boolean present_choiceVariant = true && (isSetChoiceVariant());
      list.add(present_choiceVariant);
      if (present_choiceVariant)
        list.add(choiceVariant);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateChoiceVariant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceSourceId()).compareTo(other.isSetChoiceSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceSourceId, other.choiceSourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceVariant()).compareTo(other.isSetChoiceVariant());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceVariant()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceVariant, other.choiceVariant);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateChoiceVariant_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceSourceId:");
      if (this.choiceSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceSourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceVariant:");
      if (this.choiceVariant == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceVariant);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (choiceVariant != null) {
        choiceVariant.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateChoiceVariant_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateChoiceVariant_argsStandardScheme getScheme() {
        return new UpdateChoiceVariant_argsStandardScheme();
      }
    }

    private static class UpdateChoiceVariant_argsStandardScheme extends StandardScheme<UpdateChoiceVariant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateChoiceVariant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHOICE_SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceSourceId = iprot.readString();
                struct.setChoiceSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHOICE_VARIANT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.choiceVariant = new ChoiceVariant();
                struct.choiceVariant.read(iprot);
                struct.setChoiceVariantIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateChoiceVariant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.choiceSourceId != null) {
          oprot.writeFieldBegin(CHOICE_SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.choiceSourceId);
          oprot.writeFieldEnd();
        }
        if (struct.choiceVariant != null) {
          oprot.writeFieldBegin(CHOICE_VARIANT_FIELD_DESC);
          struct.choiceVariant.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateChoiceVariant_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateChoiceVariant_argsTupleScheme getScheme() {
        return new UpdateChoiceVariant_argsTupleScheme();
      }
    }

    private static class UpdateChoiceVariant_argsTupleScheme extends TupleScheme<UpdateChoiceVariant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateChoiceVariant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetChoiceSourceId()) {
          optionals.set(2);
        }
        if (struct.isSetChoiceVariant()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetChoiceSourceId()) {
          oprot.writeString(struct.choiceSourceId);
        }
        if (struct.isSetChoiceVariant()) {
          struct.choiceVariant.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateChoiceVariant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.choiceSourceId = iprot.readString();
          struct.setChoiceSourceIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.choiceVariant = new ChoiceVariant();
          struct.choiceVariant.read(iprot);
          struct.setChoiceVariantIsSet(true);
        }
      }
    }

  }

  public static class UpdateChoiceVariant_result implements org.apache.thrift.TBase<UpdateChoiceVariant_result, UpdateChoiceVariant_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateChoiceVariant_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateChoiceVariant_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateChoiceVariant_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateChoiceVariant_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateChoiceVariant_result.class, metaDataMap);
    }

    public UpdateChoiceVariant_result() {
    }

    public UpdateChoiceVariant_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateChoiceVariant_result(UpdateChoiceVariant_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public UpdateChoiceVariant_result deepCopy() {
      return new UpdateChoiceVariant_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public UpdateChoiceVariant_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateChoiceVariant_result)
        return this.equals((UpdateChoiceVariant_result)that);
      return false;
    }

    public boolean equals(UpdateChoiceVariant_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateChoiceVariant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateChoiceVariant_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateChoiceVariant_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateChoiceVariant_resultStandardScheme getScheme() {
        return new UpdateChoiceVariant_resultStandardScheme();
      }
    }

    private static class UpdateChoiceVariant_resultStandardScheme extends StandardScheme<UpdateChoiceVariant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateChoiceVariant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateChoiceVariant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateChoiceVariant_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateChoiceVariant_resultTupleScheme getScheme() {
        return new UpdateChoiceVariant_resultTupleScheme();
      }
    }

    private static class UpdateChoiceVariant_resultTupleScheme extends TupleScheme<UpdateChoiceVariant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateChoiceVariant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateChoiceVariant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class DeleteChoiceVariant_args implements org.apache.thrift.TBase<DeleteChoiceVariant_args, DeleteChoiceVariant_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteChoiceVariant_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteChoiceVariant_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CHOICE_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceSourceId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHOICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CHOICE_VARIANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceVariantId", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteChoiceVariant_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteChoiceVariant_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String choiceSourceId; // required
    public String choiceId; // required
    public String choiceVariantId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      CHOICE_SOURCE_ID((short)3, "choiceSourceId"),
      CHOICE_ID((short)4, "choiceId"),
      CHOICE_VARIANT_ID((short)5, "choiceVariantId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // CHOICE_SOURCE_ID
            return CHOICE_SOURCE_ID;
          case 4: // CHOICE_ID
            return CHOICE_ID;
          case 5: // CHOICE_VARIANT_ID
            return CHOICE_VARIANT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.CHOICE_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHOICE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHOICE_VARIANT_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceVariantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteChoiceVariant_args.class, metaDataMap);
    }

    public DeleteChoiceVariant_args() {
    }

    public DeleteChoiceVariant_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String choiceSourceId,
      String choiceId,
      String choiceVariantId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.choiceSourceId = choiceSourceId;
      this.choiceId = choiceId;
      this.choiceVariantId = choiceVariantId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteChoiceVariant_args(DeleteChoiceVariant_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetChoiceSourceId()) {
        this.choiceSourceId = other.choiceSourceId;
      }
      if (other.isSetChoiceId()) {
        this.choiceId = other.choiceId;
      }
      if (other.isSetChoiceVariantId()) {
        this.choiceVariantId = other.choiceVariantId;
      }
    }

    public DeleteChoiceVariant_args deepCopy() {
      return new DeleteChoiceVariant_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.choiceSourceId = null;
      this.choiceId = null;
      this.choiceVariantId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public DeleteChoiceVariant_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public DeleteChoiceVariant_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getChoiceSourceId() {
      return this.choiceSourceId;
    }

    public DeleteChoiceVariant_args setChoiceSourceId(String choiceSourceId) {
      this.choiceSourceId = choiceSourceId;
      return this;
    }

    public void unsetChoiceSourceId() {
      this.choiceSourceId = null;
    }

    /** Returns true if field choiceSourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceSourceId() {
      return this.choiceSourceId != null;
    }

    public void setChoiceSourceIdIsSet(boolean value) {
      if (!value) {
        this.choiceSourceId = null;
      }
    }

    public String getChoiceId() {
      return this.choiceId;
    }

    public DeleteChoiceVariant_args setChoiceId(String choiceId) {
      this.choiceId = choiceId;
      return this;
    }

    public void unsetChoiceId() {
      this.choiceId = null;
    }

    /** Returns true if field choiceId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceId() {
      return this.choiceId != null;
    }

    public void setChoiceIdIsSet(boolean value) {
      if (!value) {
        this.choiceId = null;
      }
    }

    public String getChoiceVariantId() {
      return this.choiceVariantId;
    }

    public DeleteChoiceVariant_args setChoiceVariantId(String choiceVariantId) {
      this.choiceVariantId = choiceVariantId;
      return this;
    }

    public void unsetChoiceVariantId() {
      this.choiceVariantId = null;
    }

    /** Returns true if field choiceVariantId is set (has been assigned a value) and false otherwise */
    public boolean isSetChoiceVariantId() {
      return this.choiceVariantId != null;
    }

    public void setChoiceVariantIdIsSet(boolean value) {
      if (!value) {
        this.choiceVariantId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case CHOICE_SOURCE_ID:
        if (value == null) {
          unsetChoiceSourceId();
        } else {
          setChoiceSourceId((String)value);
        }
        break;

      case CHOICE_ID:
        if (value == null) {
          unsetChoiceId();
        } else {
          setChoiceId((String)value);
        }
        break;

      case CHOICE_VARIANT_ID:
        if (value == null) {
          unsetChoiceVariantId();
        } else {
          setChoiceVariantId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case CHOICE_SOURCE_ID:
        return getChoiceSourceId();

      case CHOICE_ID:
        return getChoiceId();

      case CHOICE_VARIANT_ID:
        return getChoiceVariantId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case CHOICE_SOURCE_ID:
        return isSetChoiceSourceId();
      case CHOICE_ID:
        return isSetChoiceId();
      case CHOICE_VARIANT_ID:
        return isSetChoiceVariantId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteChoiceVariant_args)
        return this.equals((DeleteChoiceVariant_args)that);
      return false;
    }

    public boolean equals(DeleteChoiceVariant_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_choiceSourceId = true && this.isSetChoiceSourceId();
      boolean that_present_choiceSourceId = true && that.isSetChoiceSourceId();
      if (this_present_choiceSourceId || that_present_choiceSourceId) {
        if (!(this_present_choiceSourceId && that_present_choiceSourceId))
          return false;
        if (!this.choiceSourceId.equals(that.choiceSourceId))
          return false;
      }

      boolean this_present_choiceId = true && this.isSetChoiceId();
      boolean that_present_choiceId = true && that.isSetChoiceId();
      if (this_present_choiceId || that_present_choiceId) {
        if (!(this_present_choiceId && that_present_choiceId))
          return false;
        if (!this.choiceId.equals(that.choiceId))
          return false;
      }

      boolean this_present_choiceVariantId = true && this.isSetChoiceVariantId();
      boolean that_present_choiceVariantId = true && that.isSetChoiceVariantId();
      if (this_present_choiceVariantId || that_present_choiceVariantId) {
        if (!(this_present_choiceVariantId && that_present_choiceVariantId))
          return false;
        if (!this.choiceVariantId.equals(that.choiceVariantId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_choiceSourceId = true && (isSetChoiceSourceId());
      list.add(present_choiceSourceId);
      if (present_choiceSourceId)
        list.add(choiceSourceId);

      boolean present_choiceId = true && (isSetChoiceId());
      list.add(present_choiceId);
      if (present_choiceId)
        list.add(choiceId);

      boolean present_choiceVariantId = true && (isSetChoiceVariantId());
      list.add(present_choiceVariantId);
      if (present_choiceVariantId)
        list.add(choiceVariantId);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteChoiceVariant_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceSourceId()).compareTo(other.isSetChoiceSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceSourceId, other.choiceSourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceId()).compareTo(other.isSetChoiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceId, other.choiceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChoiceVariantId()).compareTo(other.isSetChoiceVariantId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChoiceVariantId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceVariantId, other.choiceVariantId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteChoiceVariant_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceSourceId:");
      if (this.choiceSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceSourceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceId:");
      if (this.choiceId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("choiceVariantId:");
      if (this.choiceVariantId == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceVariantId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteChoiceVariant_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteChoiceVariant_argsStandardScheme getScheme() {
        return new DeleteChoiceVariant_argsStandardScheme();
      }
    }

    private static class DeleteChoiceVariant_argsStandardScheme extends StandardScheme<DeleteChoiceVariant_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteChoiceVariant_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHOICE_SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceSourceId = iprot.readString();
                struct.setChoiceSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHOICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceId = iprot.readString();
                struct.setChoiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CHOICE_VARIANT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.choiceVariantId = iprot.readString();
                struct.setChoiceVariantIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteChoiceVariant_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.choiceSourceId != null) {
          oprot.writeFieldBegin(CHOICE_SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.choiceSourceId);
          oprot.writeFieldEnd();
        }
        if (struct.choiceId != null) {
          oprot.writeFieldBegin(CHOICE_ID_FIELD_DESC);
          oprot.writeString(struct.choiceId);
          oprot.writeFieldEnd();
        }
        if (struct.choiceVariantId != null) {
          oprot.writeFieldBegin(CHOICE_VARIANT_ID_FIELD_DESC);
          oprot.writeString(struct.choiceVariantId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteChoiceVariant_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteChoiceVariant_argsTupleScheme getScheme() {
        return new DeleteChoiceVariant_argsTupleScheme();
      }
    }

    private static class DeleteChoiceVariant_argsTupleScheme extends TupleScheme<DeleteChoiceVariant_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteChoiceVariant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetChoiceSourceId()) {
          optionals.set(2);
        }
        if (struct.isSetChoiceId()) {
          optionals.set(3);
        }
        if (struct.isSetChoiceVariantId()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetChoiceSourceId()) {
          oprot.writeString(struct.choiceSourceId);
        }
        if (struct.isSetChoiceId()) {
          oprot.writeString(struct.choiceId);
        }
        if (struct.isSetChoiceVariantId()) {
          oprot.writeString(struct.choiceVariantId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteChoiceVariant_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.choiceSourceId = iprot.readString();
          struct.setChoiceSourceIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.choiceId = iprot.readString();
          struct.setChoiceIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.choiceVariantId = iprot.readString();
          struct.setChoiceVariantIdIsSet(true);
        }
      }
    }

  }

  public static class DeleteChoiceVariant_result implements org.apache.thrift.TBase<DeleteChoiceVariant_result, DeleteChoiceVariant_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteChoiceVariant_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteChoiceVariant_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteChoiceVariant_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteChoiceVariant_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteChoiceVariant_result.class, metaDataMap);
    }

    public DeleteChoiceVariant_result() {
    }

    public DeleteChoiceVariant_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteChoiceVariant_result(DeleteChoiceVariant_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public DeleteChoiceVariant_result deepCopy() {
      return new DeleteChoiceVariant_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public DeleteChoiceVariant_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteChoiceVariant_result)
        return this.equals((DeleteChoiceVariant_result)that);
      return false;
    }

    public boolean equals(DeleteChoiceVariant_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteChoiceVariant_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteChoiceVariant_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteChoiceVariant_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteChoiceVariant_resultStandardScheme getScheme() {
        return new DeleteChoiceVariant_resultStandardScheme();
      }
    }

    private static class DeleteChoiceVariant_resultStandardScheme extends StandardScheme<DeleteChoiceVariant_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteChoiceVariant_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteChoiceVariant_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteChoiceVariant_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteChoiceVariant_resultTupleScheme getScheme() {
        return new DeleteChoiceVariant_resultTupleScheme();
      }
    }

    private static class DeleteChoiceVariant_resultTupleScheme extends TupleScheme<DeleteChoiceVariant_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteChoiceVariant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteChoiceVariant_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetProcessStatus_args implements org.apache.thrift.TBase<GetProcessStatus_args, GetProcessStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetProcessStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetProcessStatus_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PROCESS_TASK_EXECUTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processTaskExecutionId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetProcessStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetProcessStatus_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String processTaskExecutionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      PROCESS_TASK_EXECUTION_ID((short)3, "processTaskExecutionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // PROCESS_TASK_EXECUTION_ID
            return PROCESS_TASK_EXECUTION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.PROCESS_TASK_EXECUTION_ID, new org.apache.thrift.meta_data.FieldMetaData("processTaskExecutionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetProcessStatus_args.class, metaDataMap);
    }

    public GetProcessStatus_args() {
    }

    public GetProcessStatus_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String processTaskExecutionId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.processTaskExecutionId = processTaskExecutionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetProcessStatus_args(GetProcessStatus_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetProcessTaskExecutionId()) {
        this.processTaskExecutionId = other.processTaskExecutionId;
      }
    }

    public GetProcessStatus_args deepCopy() {
      return new GetProcessStatus_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.processTaskExecutionId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetProcessStatus_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetProcessStatus_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getProcessTaskExecutionId() {
      return this.processTaskExecutionId;
    }

    public GetProcessStatus_args setProcessTaskExecutionId(String processTaskExecutionId) {
      this.processTaskExecutionId = processTaskExecutionId;
      return this;
    }

    public void unsetProcessTaskExecutionId() {
      this.processTaskExecutionId = null;
    }

    /** Returns true if field processTaskExecutionId is set (has been assigned a value) and false otherwise */
    public boolean isSetProcessTaskExecutionId() {
      return this.processTaskExecutionId != null;
    }

    public void setProcessTaskExecutionIdIsSet(boolean value) {
      if (!value) {
        this.processTaskExecutionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case PROCESS_TASK_EXECUTION_ID:
        if (value == null) {
          unsetProcessTaskExecutionId();
        } else {
          setProcessTaskExecutionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case PROCESS_TASK_EXECUTION_ID:
        return getProcessTaskExecutionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case PROCESS_TASK_EXECUTION_ID:
        return isSetProcessTaskExecutionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetProcessStatus_args)
        return this.equals((GetProcessStatus_args)that);
      return false;
    }

    public boolean equals(GetProcessStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_processTaskExecutionId = true && this.isSetProcessTaskExecutionId();
      boolean that_present_processTaskExecutionId = true && that.isSetProcessTaskExecutionId();
      if (this_present_processTaskExecutionId || that_present_processTaskExecutionId) {
        if (!(this_present_processTaskExecutionId && that_present_processTaskExecutionId))
          return false;
        if (!this.processTaskExecutionId.equals(that.processTaskExecutionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_processTaskExecutionId = true && (isSetProcessTaskExecutionId());
      list.add(present_processTaskExecutionId);
      if (present_processTaskExecutionId)
        list.add(processTaskExecutionId);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetProcessStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProcessTaskExecutionId()).compareTo(other.isSetProcessTaskExecutionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProcessTaskExecutionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processTaskExecutionId, other.processTaskExecutionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetProcessStatus_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("processTaskExecutionId:");
      if (this.processTaskExecutionId == null) {
        sb.append("null");
      } else {
        sb.append(this.processTaskExecutionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetProcessStatus_argsStandardSchemeFactory implements SchemeFactory {
      public GetProcessStatus_argsStandardScheme getScheme() {
        return new GetProcessStatus_argsStandardScheme();
      }
    }

    private static class GetProcessStatus_argsStandardScheme extends StandardScheme<GetProcessStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetProcessStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROCESS_TASK_EXECUTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.processTaskExecutionId = iprot.readString();
                struct.setProcessTaskExecutionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetProcessStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.processTaskExecutionId != null) {
          oprot.writeFieldBegin(PROCESS_TASK_EXECUTION_ID_FIELD_DESC);
          oprot.writeString(struct.processTaskExecutionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetProcessStatus_argsTupleSchemeFactory implements SchemeFactory {
      public GetProcessStatus_argsTupleScheme getScheme() {
        return new GetProcessStatus_argsTupleScheme();
      }
    }

    private static class GetProcessStatus_argsTupleScheme extends TupleScheme<GetProcessStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetProcessStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetProcessTaskExecutionId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetProcessTaskExecutionId()) {
          oprot.writeString(struct.processTaskExecutionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetProcessStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.processTaskExecutionId = iprot.readString();
          struct.setProcessTaskExecutionIdIsSet(true);
        }
      }
    }

  }

  public static class GetProcessStatus_result implements org.apache.thrift.TBase<GetProcessStatus_result, GetProcessStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetProcessStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetProcessStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetProcessStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetProcessStatus_resultTupleSchemeFactory());
    }

    public ProcessTaskExecutionStatus success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProcessTaskExecutionStatus.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetProcessStatus_result.class, metaDataMap);
    }

    public GetProcessStatus_result() {
    }

    public GetProcessStatus_result(
      ProcessTaskExecutionStatus success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetProcessStatus_result(GetProcessStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProcessTaskExecutionStatus(other.success);
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetProcessStatus_result deepCopy() {
      return new GetProcessStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ProcessTaskExecutionStatus getSuccess() {
      return this.success;
    }

    public GetProcessStatus_result setSuccess(ProcessTaskExecutionStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetProcessStatus_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProcessTaskExecutionStatus)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetProcessStatus_result)
        return this.equals((GetProcessStatus_result)that);
      return false;
    }

    public boolean equals(GetProcessStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetProcessStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetProcessStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetProcessStatus_resultStandardSchemeFactory implements SchemeFactory {
      public GetProcessStatus_resultStandardScheme getScheme() {
        return new GetProcessStatus_resultStandardScheme();
      }
    }

    private static class GetProcessStatus_resultStandardScheme extends StandardScheme<GetProcessStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetProcessStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProcessTaskExecutionStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetProcessStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetProcessStatus_resultTupleSchemeFactory implements SchemeFactory {
      public GetProcessStatus_resultTupleScheme getScheme() {
        return new GetProcessStatus_resultTupleScheme();
      }
    }

    private static class GetProcessStatus_resultTupleScheme extends TupleScheme<GetProcessStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetProcessStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetProcessStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ProcessTaskExecutionStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetConfigurationDifferences_args implements org.apache.thrift.TBase<GetConfigurationDifferences_args, GetConfigurationDifferences_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetConfigurationDifferences_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetConfigurationDifferences_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_VERSION_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("configurationVersionSource", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_VERSION_DESTINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configurationVersionDestination", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetConfigurationDifferences_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetConfigurationDifferences_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configurationVersionSource; // required
    public ConfigurationVersion configurationVersionDestination; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION_VERSION_SOURCE((short)2, "configurationVersionSource"),
      CONFIGURATION_VERSION_DESTINATION((short)3, "configurationVersionDestination");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION_VERSION_SOURCE
            return CONFIGURATION_VERSION_SOURCE;
          case 3: // CONFIGURATION_VERSION_DESTINATION
            return CONFIGURATION_VERSION_DESTINATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION_VERSION_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("configurationVersionSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.CONFIGURATION_VERSION_DESTINATION, new org.apache.thrift.meta_data.FieldMetaData("configurationVersionDestination", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetConfigurationDifferences_args.class, metaDataMap);
    }

    public GetConfigurationDifferences_args() {
    }

    public GetConfigurationDifferences_args(
      Authentication authentication,
      ConfigurationVersion configurationVersionSource,
      ConfigurationVersion configurationVersionDestination)
    {
      this();
      this.authentication = authentication;
      this.configurationVersionSource = configurationVersionSource;
      this.configurationVersionDestination = configurationVersionDestination;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetConfigurationDifferences_args(GetConfigurationDifferences_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfigurationVersionSource()) {
        this.configurationVersionSource = new ConfigurationVersion(other.configurationVersionSource);
      }
      if (other.isSetConfigurationVersionDestination()) {
        this.configurationVersionDestination = new ConfigurationVersion(other.configurationVersionDestination);
      }
    }

    public GetConfigurationDifferences_args deepCopy() {
      return new GetConfigurationDifferences_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configurationVersionSource = null;
      this.configurationVersionDestination = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetConfigurationDifferences_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfigurationVersionSource() {
      return this.configurationVersionSource;
    }

    public GetConfigurationDifferences_args setConfigurationVersionSource(ConfigurationVersion configurationVersionSource) {
      this.configurationVersionSource = configurationVersionSource;
      return this;
    }

    public void unsetConfigurationVersionSource() {
      this.configurationVersionSource = null;
    }

    /** Returns true if field configurationVersionSource is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigurationVersionSource() {
      return this.configurationVersionSource != null;
    }

    public void setConfigurationVersionSourceIsSet(boolean value) {
      if (!value) {
        this.configurationVersionSource = null;
      }
    }

    public ConfigurationVersion getConfigurationVersionDestination() {
      return this.configurationVersionDestination;
    }

    public GetConfigurationDifferences_args setConfigurationVersionDestination(ConfigurationVersion configurationVersionDestination) {
      this.configurationVersionDestination = configurationVersionDestination;
      return this;
    }

    public void unsetConfigurationVersionDestination() {
      this.configurationVersionDestination = null;
    }

    /** Returns true if field configurationVersionDestination is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigurationVersionDestination() {
      return this.configurationVersionDestination != null;
    }

    public void setConfigurationVersionDestinationIsSet(boolean value) {
      if (!value) {
        this.configurationVersionDestination = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION_VERSION_SOURCE:
        if (value == null) {
          unsetConfigurationVersionSource();
        } else {
          setConfigurationVersionSource((ConfigurationVersion)value);
        }
        break;

      case CONFIGURATION_VERSION_DESTINATION:
        if (value == null) {
          unsetConfigurationVersionDestination();
        } else {
          setConfigurationVersionDestination((ConfigurationVersion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION_VERSION_SOURCE:
        return getConfigurationVersionSource();

      case CONFIGURATION_VERSION_DESTINATION:
        return getConfigurationVersionDestination();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION_VERSION_SOURCE:
        return isSetConfigurationVersionSource();
      case CONFIGURATION_VERSION_DESTINATION:
        return isSetConfigurationVersionDestination();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetConfigurationDifferences_args)
        return this.equals((GetConfigurationDifferences_args)that);
      return false;
    }

    public boolean equals(GetConfigurationDifferences_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configurationVersionSource = true && this.isSetConfigurationVersionSource();
      boolean that_present_configurationVersionSource = true && that.isSetConfigurationVersionSource();
      if (this_present_configurationVersionSource || that_present_configurationVersionSource) {
        if (!(this_present_configurationVersionSource && that_present_configurationVersionSource))
          return false;
        if (!this.configurationVersionSource.equals(that.configurationVersionSource))
          return false;
      }

      boolean this_present_configurationVersionDestination = true && this.isSetConfigurationVersionDestination();
      boolean that_present_configurationVersionDestination = true && that.isSetConfigurationVersionDestination();
      if (this_present_configurationVersionDestination || that_present_configurationVersionDestination) {
        if (!(this_present_configurationVersionDestination && that_present_configurationVersionDestination))
          return false;
        if (!this.configurationVersionDestination.equals(that.configurationVersionDestination))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configurationVersionSource = true && (isSetConfigurationVersionSource());
      list.add(present_configurationVersionSource);
      if (present_configurationVersionSource)
        list.add(configurationVersionSource);

      boolean present_configurationVersionDestination = true && (isSetConfigurationVersionDestination());
      list.add(present_configurationVersionDestination);
      if (present_configurationVersionDestination)
        list.add(configurationVersionDestination);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetConfigurationDifferences_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfigurationVersionSource()).compareTo(other.isSetConfigurationVersionSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigurationVersionSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configurationVersionSource, other.configurationVersionSource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfigurationVersionDestination()).compareTo(other.isSetConfigurationVersionDestination());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigurationVersionDestination()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configurationVersionDestination, other.configurationVersionDestination);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetConfigurationDifferences_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configurationVersionSource:");
      if (this.configurationVersionSource == null) {
        sb.append("null");
      } else {
        sb.append(this.configurationVersionSource);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configurationVersionDestination:");
      if (this.configurationVersionDestination == null) {
        sb.append("null");
      } else {
        sb.append(this.configurationVersionDestination);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configurationVersionSource != null) {
        configurationVersionSource.validate();
      }
      if (configurationVersionDestination != null) {
        configurationVersionDestination.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetConfigurationDifferences_argsStandardSchemeFactory implements SchemeFactory {
      public GetConfigurationDifferences_argsStandardScheme getScheme() {
        return new GetConfigurationDifferences_argsStandardScheme();
      }
    }

    private static class GetConfigurationDifferences_argsStandardScheme extends StandardScheme<GetConfigurationDifferences_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetConfigurationDifferences_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION_VERSION_SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configurationVersionSource = new ConfigurationVersion();
                struct.configurationVersionSource.read(iprot);
                struct.setConfigurationVersionSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONFIGURATION_VERSION_DESTINATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configurationVersionDestination = new ConfigurationVersion();
                struct.configurationVersionDestination.read(iprot);
                struct.setConfigurationVersionDestinationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetConfigurationDifferences_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configurationVersionSource != null) {
          oprot.writeFieldBegin(CONFIGURATION_VERSION_SOURCE_FIELD_DESC);
          struct.configurationVersionSource.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configurationVersionDestination != null) {
          oprot.writeFieldBegin(CONFIGURATION_VERSION_DESTINATION_FIELD_DESC);
          struct.configurationVersionDestination.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetConfigurationDifferences_argsTupleSchemeFactory implements SchemeFactory {
      public GetConfigurationDifferences_argsTupleScheme getScheme() {
        return new GetConfigurationDifferences_argsTupleScheme();
      }
    }

    private static class GetConfigurationDifferences_argsTupleScheme extends TupleScheme<GetConfigurationDifferences_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetConfigurationDifferences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfigurationVersionSource()) {
          optionals.set(1);
        }
        if (struct.isSetConfigurationVersionDestination()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfigurationVersionSource()) {
          struct.configurationVersionSource.write(oprot);
        }
        if (struct.isSetConfigurationVersionDestination()) {
          struct.configurationVersionDestination.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetConfigurationDifferences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configurationVersionSource = new ConfigurationVersion();
          struct.configurationVersionSource.read(iprot);
          struct.setConfigurationVersionSourceIsSet(true);
        }
        if (incoming.get(2)) {
          struct.configurationVersionDestination = new ConfigurationVersion();
          struct.configurationVersionDestination.read(iprot);
          struct.setConfigurationVersionDestinationIsSet(true);
        }
      }
    }

  }

  public static class GetConfigurationDifferences_result implements org.apache.thrift.TBase<GetConfigurationDifferences_result, GetConfigurationDifferences_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetConfigurationDifferences_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetConfigurationDifferences_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetConfigurationDifferences_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetConfigurationDifferences_resultTupleSchemeFactory());
    }

    public List<ConfigurationDifference> success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationDifference.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetConfigurationDifferences_result.class, metaDataMap);
    }

    public GetConfigurationDifferences_result() {
    }

    public GetConfigurationDifferences_result(
      List<ConfigurationDifference> success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetConfigurationDifferences_result(GetConfigurationDifferences_result other) {
      if (other.isSetSuccess()) {
        List<ConfigurationDifference> __this__success = new ArrayList<ConfigurationDifference>(other.success.size());
        for (ConfigurationDifference other_element : other.success) {
          __this__success.add(new ConfigurationDifference(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetConfigurationDifferences_result deepCopy() {
      return new GetConfigurationDifferences_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ConfigurationDifference> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ConfigurationDifference elem) {
      if (this.success == null) {
        this.success = new ArrayList<ConfigurationDifference>();
      }
      this.success.add(elem);
    }

    public List<ConfigurationDifference> getSuccess() {
      return this.success;
    }

    public GetConfigurationDifferences_result setSuccess(List<ConfigurationDifference> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetConfigurationDifferences_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ConfigurationDifference>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetConfigurationDifferences_result)
        return this.equals((GetConfigurationDifferences_result)that);
      return false;
    }

    public boolean equals(GetConfigurationDifferences_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetConfigurationDifferences_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetConfigurationDifferences_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetConfigurationDifferences_resultStandardSchemeFactory implements SchemeFactory {
      public GetConfigurationDifferences_resultStandardScheme getScheme() {
        return new GetConfigurationDifferences_resultStandardScheme();
      }
    }

    private static class GetConfigurationDifferences_resultStandardScheme extends StandardScheme<GetConfigurationDifferences_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetConfigurationDifferences_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list348 = iprot.readListBegin();
                  struct.success = new ArrayList<ConfigurationDifference>(_list348.size);
                  ConfigurationDifference _elem349;
                  for (int _i350 = 0; _i350 < _list348.size; ++_i350)
                  {
                    _elem349 = new ConfigurationDifference();
                    _elem349.read(iprot);
                    struct.success.add(_elem349);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetConfigurationDifferences_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ConfigurationDifference _iter351 : struct.success)
            {
              _iter351.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetConfigurationDifferences_resultTupleSchemeFactory implements SchemeFactory {
      public GetConfigurationDifferences_resultTupleScheme getScheme() {
        return new GetConfigurationDifferences_resultTupleScheme();
      }
    }

    private static class GetConfigurationDifferences_resultTupleScheme extends TupleScheme<GetConfigurationDifferences_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetConfigurationDifferences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ConfigurationDifference _iter352 : struct.success)
            {
              _iter352.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetConfigurationDifferences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list353 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ConfigurationDifference>(_list353.size);
            ConfigurationDifference _elem354;
            for (int _i355 = 0; _i355 < _list353.size; ++_i355)
            {
              _elem354 = new ConfigurationDifference();
              _elem354.read(iprot);
              struct.success.add(_elem354);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class PublishConfiguration_args implements org.apache.thrift.TBase<PublishConfiguration_args, PublishConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<PublishConfiguration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PublishConfiguration_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new PublishConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new PublishConfiguration_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PublishConfiguration_args.class, metaDataMap);
    }

    public PublishConfiguration_args() {
    }

    public PublishConfiguration_args(
      Authentication authentication,
      ConfigurationVersion configuration)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PublishConfiguration_args(PublishConfiguration_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
    }

    public PublishConfiguration_args deepCopy() {
      return new PublishConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public PublishConfiguration_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public PublishConfiguration_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof PublishConfiguration_args)
        return this.equals((PublishConfiguration_args)that);
      return false;
    }

    public boolean equals(PublishConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      return list.hashCode();
    }

    @Override
    public int compareTo(PublishConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PublishConfiguration_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PublishConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public PublishConfiguration_argsStandardScheme getScheme() {
        return new PublishConfiguration_argsStandardScheme();
      }
    }

    private static class PublishConfiguration_argsStandardScheme extends StandardScheme<PublishConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PublishConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PublishConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PublishConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public PublishConfiguration_argsTupleScheme getScheme() {
        return new PublishConfiguration_argsTupleScheme();
      }
    }

    private static class PublishConfiguration_argsTupleScheme extends TupleScheme<PublishConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PublishConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PublishConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
      }
    }

  }

  public static class PublishConfiguration_result implements org.apache.thrift.TBase<PublishConfiguration_result, PublishConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<PublishConfiguration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PublishConfiguration_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new PublishConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new PublishConfiguration_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PublishConfiguration_result.class, metaDataMap);
    }

    public PublishConfiguration_result() {
    }

    public PublishConfiguration_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PublishConfiguration_result(PublishConfiguration_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public PublishConfiguration_result deepCopy() {
      return new PublishConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public PublishConfiguration_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof PublishConfiguration_result)
        return this.equals((PublishConfiguration_result)that);
      return false;
    }

    public boolean equals(PublishConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(PublishConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PublishConfiguration_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PublishConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public PublishConfiguration_resultStandardScheme getScheme() {
        return new PublishConfiguration_resultStandardScheme();
      }
    }

    private static class PublishConfiguration_resultStandardScheme extends StandardScheme<PublishConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PublishConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PublishConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PublishConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public PublishConfiguration_resultTupleScheme getScheme() {
        return new PublishConfiguration_resultTupleScheme();
      }
    }

    private static class PublishConfiguration_resultTupleScheme extends TupleScheme<PublishConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PublishConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PublishConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class CloneConfiguration_args implements org.apache.thrift.TBase<CloneConfiguration_args, CloneConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<CloneConfiguration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CloneConfiguration_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CloneConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CloneConfiguration_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CloneConfiguration_args.class, metaDataMap);
    }

    public CloneConfiguration_args() {
    }

    public CloneConfiguration_args(
      Authentication authentication,
      ConfigurationVersion configuration)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CloneConfiguration_args(CloneConfiguration_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
    }

    public CloneConfiguration_args deepCopy() {
      return new CloneConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public CloneConfiguration_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public CloneConfiguration_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CloneConfiguration_args)
        return this.equals((CloneConfiguration_args)that);
      return false;
    }

    public boolean equals(CloneConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      return list.hashCode();
    }

    @Override
    public int compareTo(CloneConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CloneConfiguration_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CloneConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public CloneConfiguration_argsStandardScheme getScheme() {
        return new CloneConfiguration_argsStandardScheme();
      }
    }

    private static class CloneConfiguration_argsStandardScheme extends StandardScheme<CloneConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CloneConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CloneConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CloneConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public CloneConfiguration_argsTupleScheme getScheme() {
        return new CloneConfiguration_argsTupleScheme();
      }
    }

    private static class CloneConfiguration_argsTupleScheme extends TupleScheme<CloneConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CloneConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CloneConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
      }
    }

  }

  public static class CloneConfiguration_result implements org.apache.thrift.TBase<CloneConfiguration_result, CloneConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<CloneConfiguration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CloneConfiguration_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CloneConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CloneConfiguration_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CloneConfiguration_result.class, metaDataMap);
    }

    public CloneConfiguration_result() {
    }

    public CloneConfiguration_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CloneConfiguration_result(CloneConfiguration_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public CloneConfiguration_result deepCopy() {
      return new CloneConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public CloneConfiguration_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CloneConfiguration_result)
        return this.equals((CloneConfiguration_result)that);
      return false;
    }

    public boolean equals(CloneConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(CloneConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CloneConfiguration_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CloneConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public CloneConfiguration_resultStandardScheme getScheme() {
        return new CloneConfiguration_resultStandardScheme();
      }
    }

    private static class CloneConfiguration_resultStandardScheme extends StandardScheme<CloneConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CloneConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CloneConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CloneConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public CloneConfiguration_resultTupleScheme getScheme() {
        return new CloneConfiguration_resultTupleScheme();
      }
    }

    private static class CloneConfiguration_resultTupleScheme extends TupleScheme<CloneConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CloneConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CloneConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class CreateReferenceCSVFile_args implements org.apache.thrift.TBase<CreateReferenceCSVFile_args, CreateReferenceCSVFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateReferenceCSVFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateReferenceCSVFile_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_DESCRIPTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("fileDescriptor", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateReferenceCSVFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateReferenceCSVFile_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public ReferenceCSVFileDescriptor fileDescriptor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      FILE_DESCRIPTOR((short)3, "fileDescriptor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // FILE_DESCRIPTOR
            return FILE_DESCRIPTOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.FILE_DESCRIPTOR, new org.apache.thrift.meta_data.FieldMetaData("fileDescriptor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReferenceCSVFileDescriptor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateReferenceCSVFile_args.class, metaDataMap);
    }

    public CreateReferenceCSVFile_args() {
    }

    public CreateReferenceCSVFile_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      ReferenceCSVFileDescriptor fileDescriptor)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.fileDescriptor = fileDescriptor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateReferenceCSVFile_args(CreateReferenceCSVFile_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetFileDescriptor()) {
        this.fileDescriptor = new ReferenceCSVFileDescriptor(other.fileDescriptor);
      }
    }

    public CreateReferenceCSVFile_args deepCopy() {
      return new CreateReferenceCSVFile_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.fileDescriptor = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public CreateReferenceCSVFile_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public CreateReferenceCSVFile_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public ReferenceCSVFileDescriptor getFileDescriptor() {
      return this.fileDescriptor;
    }

    public CreateReferenceCSVFile_args setFileDescriptor(ReferenceCSVFileDescriptor fileDescriptor) {
      this.fileDescriptor = fileDescriptor;
      return this;
    }

    public void unsetFileDescriptor() {
      this.fileDescriptor = null;
    }

    /** Returns true if field fileDescriptor is set (has been assigned a value) and false otherwise */
    public boolean isSetFileDescriptor() {
      return this.fileDescriptor != null;
    }

    public void setFileDescriptorIsSet(boolean value) {
      if (!value) {
        this.fileDescriptor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case FILE_DESCRIPTOR:
        if (value == null) {
          unsetFileDescriptor();
        } else {
          setFileDescriptor((ReferenceCSVFileDescriptor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case FILE_DESCRIPTOR:
        return getFileDescriptor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case FILE_DESCRIPTOR:
        return isSetFileDescriptor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateReferenceCSVFile_args)
        return this.equals((CreateReferenceCSVFile_args)that);
      return false;
    }

    public boolean equals(CreateReferenceCSVFile_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_fileDescriptor = true && this.isSetFileDescriptor();
      boolean that_present_fileDescriptor = true && that.isSetFileDescriptor();
      if (this_present_fileDescriptor || that_present_fileDescriptor) {
        if (!(this_present_fileDescriptor && that_present_fileDescriptor))
          return false;
        if (!this.fileDescriptor.equals(that.fileDescriptor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_fileDescriptor = true && (isSetFileDescriptor());
      list.add(present_fileDescriptor);
      if (present_fileDescriptor)
        list.add(fileDescriptor);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateReferenceCSVFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileDescriptor()).compareTo(other.isSetFileDescriptor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileDescriptor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileDescriptor, other.fileDescriptor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateReferenceCSVFile_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileDescriptor:");
      if (this.fileDescriptor == null) {
        sb.append("null");
      } else {
        sb.append(this.fileDescriptor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (fileDescriptor != null) {
        fileDescriptor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateReferenceCSVFile_argsStandardSchemeFactory implements SchemeFactory {
      public CreateReferenceCSVFile_argsStandardScheme getScheme() {
        return new CreateReferenceCSVFile_argsStandardScheme();
      }
    }

    private static class CreateReferenceCSVFile_argsStandardScheme extends StandardScheme<CreateReferenceCSVFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_DESCRIPTOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fileDescriptor = new ReferenceCSVFileDescriptor();
                struct.fileDescriptor.read(iprot);
                struct.setFileDescriptorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fileDescriptor != null) {
          oprot.writeFieldBegin(FILE_DESCRIPTOR_FIELD_DESC);
          struct.fileDescriptor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateReferenceCSVFile_argsTupleSchemeFactory implements SchemeFactory {
      public CreateReferenceCSVFile_argsTupleScheme getScheme() {
        return new CreateReferenceCSVFile_argsTupleScheme();
      }
    }

    private static class CreateReferenceCSVFile_argsTupleScheme extends TupleScheme<CreateReferenceCSVFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetFileDescriptor()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetFileDescriptor()) {
          struct.fileDescriptor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileDescriptor = new ReferenceCSVFileDescriptor();
          struct.fileDescriptor.read(iprot);
          struct.setFileDescriptorIsSet(true);
        }
      }
    }

  }

  public static class CreateReferenceCSVFile_result implements org.apache.thrift.TBase<CreateReferenceCSVFile_result, CreateReferenceCSVFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateReferenceCSVFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateReferenceCSVFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateReferenceCSVFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateReferenceCSVFile_resultTupleSchemeFactory());
    }

    public ReferenceCSVFileDescriptor success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReferenceCSVFileDescriptor.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateReferenceCSVFile_result.class, metaDataMap);
    }

    public CreateReferenceCSVFile_result() {
    }

    public CreateReferenceCSVFile_result(
      ReferenceCSVFileDescriptor success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateReferenceCSVFile_result(CreateReferenceCSVFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReferenceCSVFileDescriptor(other.success);
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public CreateReferenceCSVFile_result deepCopy() {
      return new CreateReferenceCSVFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ReferenceCSVFileDescriptor getSuccess() {
      return this.success;
    }

    public CreateReferenceCSVFile_result setSuccess(ReferenceCSVFileDescriptor success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public CreateReferenceCSVFile_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReferenceCSVFileDescriptor)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateReferenceCSVFile_result)
        return this.equals((CreateReferenceCSVFile_result)that);
      return false;
    }

    public boolean equals(CreateReferenceCSVFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateReferenceCSVFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateReferenceCSVFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateReferenceCSVFile_resultStandardSchemeFactory implements SchemeFactory {
      public CreateReferenceCSVFile_resultStandardScheme getScheme() {
        return new CreateReferenceCSVFile_resultStandardScheme();
      }
    }

    private static class CreateReferenceCSVFile_resultStandardScheme extends StandardScheme<CreateReferenceCSVFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReferenceCSVFileDescriptor();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateReferenceCSVFile_resultTupleSchemeFactory implements SchemeFactory {
      public CreateReferenceCSVFile_resultTupleScheme getScheme() {
        return new CreateReferenceCSVFile_resultTupleScheme();
      }
    }

    private static class CreateReferenceCSVFile_resultTupleScheme extends TupleScheme<CreateReferenceCSVFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ReferenceCSVFileDescriptor();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class UpdateReferenceCSVFile_args implements org.apache.thrift.TBase<UpdateReferenceCSVFile_args, UpdateReferenceCSVFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateReferenceCSVFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateReferenceCSVFile_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_DESCRIPTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("fileDescriptor", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateReferenceCSVFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateReferenceCSVFile_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public ReferenceCSVFileDescriptor fileDescriptor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      FILE_DESCRIPTOR((short)3, "fileDescriptor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // FILE_DESCRIPTOR
            return FILE_DESCRIPTOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.FILE_DESCRIPTOR, new org.apache.thrift.meta_data.FieldMetaData("fileDescriptor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReferenceCSVFileDescriptor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateReferenceCSVFile_args.class, metaDataMap);
    }

    public UpdateReferenceCSVFile_args() {
    }

    public UpdateReferenceCSVFile_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      ReferenceCSVFileDescriptor fileDescriptor)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.fileDescriptor = fileDescriptor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateReferenceCSVFile_args(UpdateReferenceCSVFile_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetFileDescriptor()) {
        this.fileDescriptor = new ReferenceCSVFileDescriptor(other.fileDescriptor);
      }
    }

    public UpdateReferenceCSVFile_args deepCopy() {
      return new UpdateReferenceCSVFile_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.fileDescriptor = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public UpdateReferenceCSVFile_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public UpdateReferenceCSVFile_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public ReferenceCSVFileDescriptor getFileDescriptor() {
      return this.fileDescriptor;
    }

    public UpdateReferenceCSVFile_args setFileDescriptor(ReferenceCSVFileDescriptor fileDescriptor) {
      this.fileDescriptor = fileDescriptor;
      return this;
    }

    public void unsetFileDescriptor() {
      this.fileDescriptor = null;
    }

    /** Returns true if field fileDescriptor is set (has been assigned a value) and false otherwise */
    public boolean isSetFileDescriptor() {
      return this.fileDescriptor != null;
    }

    public void setFileDescriptorIsSet(boolean value) {
      if (!value) {
        this.fileDescriptor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case FILE_DESCRIPTOR:
        if (value == null) {
          unsetFileDescriptor();
        } else {
          setFileDescriptor((ReferenceCSVFileDescriptor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case FILE_DESCRIPTOR:
        return getFileDescriptor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case FILE_DESCRIPTOR:
        return isSetFileDescriptor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateReferenceCSVFile_args)
        return this.equals((UpdateReferenceCSVFile_args)that);
      return false;
    }

    public boolean equals(UpdateReferenceCSVFile_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_fileDescriptor = true && this.isSetFileDescriptor();
      boolean that_present_fileDescriptor = true && that.isSetFileDescriptor();
      if (this_present_fileDescriptor || that_present_fileDescriptor) {
        if (!(this_present_fileDescriptor && that_present_fileDescriptor))
          return false;
        if (!this.fileDescriptor.equals(that.fileDescriptor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_fileDescriptor = true && (isSetFileDescriptor());
      list.add(present_fileDescriptor);
      if (present_fileDescriptor)
        list.add(fileDescriptor);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateReferenceCSVFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileDescriptor()).compareTo(other.isSetFileDescriptor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileDescriptor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileDescriptor, other.fileDescriptor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateReferenceCSVFile_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileDescriptor:");
      if (this.fileDescriptor == null) {
        sb.append("null");
      } else {
        sb.append(this.fileDescriptor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (fileDescriptor != null) {
        fileDescriptor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateReferenceCSVFile_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateReferenceCSVFile_argsStandardScheme getScheme() {
        return new UpdateReferenceCSVFile_argsStandardScheme();
      }
    }

    private static class UpdateReferenceCSVFile_argsStandardScheme extends StandardScheme<UpdateReferenceCSVFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_DESCRIPTOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fileDescriptor = new ReferenceCSVFileDescriptor();
                struct.fileDescriptor.read(iprot);
                struct.setFileDescriptorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fileDescriptor != null) {
          oprot.writeFieldBegin(FILE_DESCRIPTOR_FIELD_DESC);
          struct.fileDescriptor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateReferenceCSVFile_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateReferenceCSVFile_argsTupleScheme getScheme() {
        return new UpdateReferenceCSVFile_argsTupleScheme();
      }
    }

    private static class UpdateReferenceCSVFile_argsTupleScheme extends TupleScheme<UpdateReferenceCSVFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetFileDescriptor()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetFileDescriptor()) {
          struct.fileDescriptor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileDescriptor = new ReferenceCSVFileDescriptor();
          struct.fileDescriptor.read(iprot);
          struct.setFileDescriptorIsSet(true);
        }
      }
    }

  }

  public static class UpdateReferenceCSVFile_result implements org.apache.thrift.TBase<UpdateReferenceCSVFile_result, UpdateReferenceCSVFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateReferenceCSVFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateReferenceCSVFile_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateReferenceCSVFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateReferenceCSVFile_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateReferenceCSVFile_result.class, metaDataMap);
    }

    public UpdateReferenceCSVFile_result() {
    }

    public UpdateReferenceCSVFile_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateReferenceCSVFile_result(UpdateReferenceCSVFile_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public UpdateReferenceCSVFile_result deepCopy() {
      return new UpdateReferenceCSVFile_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public UpdateReferenceCSVFile_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateReferenceCSVFile_result)
        return this.equals((UpdateReferenceCSVFile_result)that);
      return false;
    }

    public boolean equals(UpdateReferenceCSVFile_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateReferenceCSVFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateReferenceCSVFile_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateReferenceCSVFile_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateReferenceCSVFile_resultStandardScheme getScheme() {
        return new UpdateReferenceCSVFile_resultStandardScheme();
      }
    }

    private static class UpdateReferenceCSVFile_resultStandardScheme extends StandardScheme<UpdateReferenceCSVFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateReferenceCSVFile_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateReferenceCSVFile_resultTupleScheme getScheme() {
        return new UpdateReferenceCSVFile_resultTupleScheme();
      }
    }

    private static class UpdateReferenceCSVFile_resultTupleScheme extends TupleScheme<UpdateReferenceCSVFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class DeleteReferenceCSVFile_args implements org.apache.thrift.TBase<DeleteReferenceCSVFile_args, DeleteReferenceCSVFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteReferenceCSVFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteReferenceCSVFile_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_DESCRIPTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("fileDescriptor", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteReferenceCSVFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteReferenceCSVFile_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public ReferenceCSVFileDescriptor fileDescriptor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      FILE_DESCRIPTOR((short)3, "fileDescriptor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // FILE_DESCRIPTOR
            return FILE_DESCRIPTOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.FILE_DESCRIPTOR, new org.apache.thrift.meta_data.FieldMetaData("fileDescriptor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReferenceCSVFileDescriptor.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteReferenceCSVFile_args.class, metaDataMap);
    }

    public DeleteReferenceCSVFile_args() {
    }

    public DeleteReferenceCSVFile_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      ReferenceCSVFileDescriptor fileDescriptor)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.fileDescriptor = fileDescriptor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteReferenceCSVFile_args(DeleteReferenceCSVFile_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetFileDescriptor()) {
        this.fileDescriptor = new ReferenceCSVFileDescriptor(other.fileDescriptor);
      }
    }

    public DeleteReferenceCSVFile_args deepCopy() {
      return new DeleteReferenceCSVFile_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.fileDescriptor = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public DeleteReferenceCSVFile_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public DeleteReferenceCSVFile_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public ReferenceCSVFileDescriptor getFileDescriptor() {
      return this.fileDescriptor;
    }

    public DeleteReferenceCSVFile_args setFileDescriptor(ReferenceCSVFileDescriptor fileDescriptor) {
      this.fileDescriptor = fileDescriptor;
      return this;
    }

    public void unsetFileDescriptor() {
      this.fileDescriptor = null;
    }

    /** Returns true if field fileDescriptor is set (has been assigned a value) and false otherwise */
    public boolean isSetFileDescriptor() {
      return this.fileDescriptor != null;
    }

    public void setFileDescriptorIsSet(boolean value) {
      if (!value) {
        this.fileDescriptor = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case FILE_DESCRIPTOR:
        if (value == null) {
          unsetFileDescriptor();
        } else {
          setFileDescriptor((ReferenceCSVFileDescriptor)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case FILE_DESCRIPTOR:
        return getFileDescriptor();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case FILE_DESCRIPTOR:
        return isSetFileDescriptor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteReferenceCSVFile_args)
        return this.equals((DeleteReferenceCSVFile_args)that);
      return false;
    }

    public boolean equals(DeleteReferenceCSVFile_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_fileDescriptor = true && this.isSetFileDescriptor();
      boolean that_present_fileDescriptor = true && that.isSetFileDescriptor();
      if (this_present_fileDescriptor || that_present_fileDescriptor) {
        if (!(this_present_fileDescriptor && that_present_fileDescriptor))
          return false;
        if (!this.fileDescriptor.equals(that.fileDescriptor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_fileDescriptor = true && (isSetFileDescriptor());
      list.add(present_fileDescriptor);
      if (present_fileDescriptor)
        list.add(fileDescriptor);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteReferenceCSVFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileDescriptor()).compareTo(other.isSetFileDescriptor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileDescriptor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileDescriptor, other.fileDescriptor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteReferenceCSVFile_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileDescriptor:");
      if (this.fileDescriptor == null) {
        sb.append("null");
      } else {
        sb.append(this.fileDescriptor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (fileDescriptor != null) {
        fileDescriptor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteReferenceCSVFile_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteReferenceCSVFile_argsStandardScheme getScheme() {
        return new DeleteReferenceCSVFile_argsStandardScheme();
      }
    }

    private static class DeleteReferenceCSVFile_argsStandardScheme extends StandardScheme<DeleteReferenceCSVFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_DESCRIPTOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fileDescriptor = new ReferenceCSVFileDescriptor();
                struct.fileDescriptor.read(iprot);
                struct.setFileDescriptorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fileDescriptor != null) {
          oprot.writeFieldBegin(FILE_DESCRIPTOR_FIELD_DESC);
          struct.fileDescriptor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteReferenceCSVFile_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteReferenceCSVFile_argsTupleScheme getScheme() {
        return new DeleteReferenceCSVFile_argsTupleScheme();
      }
    }

    private static class DeleteReferenceCSVFile_argsTupleScheme extends TupleScheme<DeleteReferenceCSVFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetFileDescriptor()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetFileDescriptor()) {
          struct.fileDescriptor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileDescriptor = new ReferenceCSVFileDescriptor();
          struct.fileDescriptor.read(iprot);
          struct.setFileDescriptorIsSet(true);
        }
      }
    }

  }

  public static class DeleteReferenceCSVFile_result implements org.apache.thrift.TBase<DeleteReferenceCSVFile_result, DeleteReferenceCSVFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteReferenceCSVFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteReferenceCSVFile_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteReferenceCSVFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteReferenceCSVFile_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteReferenceCSVFile_result.class, metaDataMap);
    }

    public DeleteReferenceCSVFile_result() {
    }

    public DeleteReferenceCSVFile_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteReferenceCSVFile_result(DeleteReferenceCSVFile_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public DeleteReferenceCSVFile_result deepCopy() {
      return new DeleteReferenceCSVFile_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public DeleteReferenceCSVFile_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteReferenceCSVFile_result)
        return this.equals((DeleteReferenceCSVFile_result)that);
      return false;
    }

    public boolean equals(DeleteReferenceCSVFile_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteReferenceCSVFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteReferenceCSVFile_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteReferenceCSVFile_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteReferenceCSVFile_resultStandardScheme getScheme() {
        return new DeleteReferenceCSVFile_resultStandardScheme();
      }
    }

    private static class DeleteReferenceCSVFile_resultStandardScheme extends StandardScheme<DeleteReferenceCSVFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteReferenceCSVFile_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteReferenceCSVFile_resultTupleScheme getScheme() {
        return new DeleteReferenceCSVFile_resultTupleScheme();
      }
    }

    private static class DeleteReferenceCSVFile_resultTupleScheme extends TupleScheme<DeleteReferenceCSVFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetAllReferenceCSVFiles_args implements org.apache.thrift.TBase<GetAllReferenceCSVFiles_args, GetAllReferenceCSVFiles_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAllReferenceCSVFiles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllReferenceCSVFiles_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAllReferenceCSVFiles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAllReferenceCSVFiles_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllReferenceCSVFiles_args.class, metaDataMap);
    }

    public GetAllReferenceCSVFiles_args() {
    }

    public GetAllReferenceCSVFiles_args(
      Authentication authentication,
      ConfigurationVersion configuration)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAllReferenceCSVFiles_args(GetAllReferenceCSVFiles_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
    }

    public GetAllReferenceCSVFiles_args deepCopy() {
      return new GetAllReferenceCSVFiles_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetAllReferenceCSVFiles_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetAllReferenceCSVFiles_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAllReferenceCSVFiles_args)
        return this.equals((GetAllReferenceCSVFiles_args)that);
      return false;
    }

    public boolean equals(GetAllReferenceCSVFiles_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAllReferenceCSVFiles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAllReferenceCSVFiles_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAllReferenceCSVFiles_argsStandardSchemeFactory implements SchemeFactory {
      public GetAllReferenceCSVFiles_argsStandardScheme getScheme() {
        return new GetAllReferenceCSVFiles_argsStandardScheme();
      }
    }

    private static class GetAllReferenceCSVFiles_argsStandardScheme extends StandardScheme<GetAllReferenceCSVFiles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllReferenceCSVFiles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllReferenceCSVFiles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAllReferenceCSVFiles_argsTupleSchemeFactory implements SchemeFactory {
      public GetAllReferenceCSVFiles_argsTupleScheme getScheme() {
        return new GetAllReferenceCSVFiles_argsTupleScheme();
      }
    }

    private static class GetAllReferenceCSVFiles_argsTupleScheme extends TupleScheme<GetAllReferenceCSVFiles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAllReferenceCSVFiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAllReferenceCSVFiles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
      }
    }

  }

  public static class GetAllReferenceCSVFiles_result implements org.apache.thrift.TBase<GetAllReferenceCSVFiles_result, GetAllReferenceCSVFiles_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAllReferenceCSVFiles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllReferenceCSVFiles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAllReferenceCSVFiles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAllReferenceCSVFiles_resultTupleSchemeFactory());
    }

    public List<ReferenceCSVFileDescriptor> success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReferenceCSVFileDescriptor.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllReferenceCSVFiles_result.class, metaDataMap);
    }

    public GetAllReferenceCSVFiles_result() {
    }

    public GetAllReferenceCSVFiles_result(
      List<ReferenceCSVFileDescriptor> success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAllReferenceCSVFiles_result(GetAllReferenceCSVFiles_result other) {
      if (other.isSetSuccess()) {
        List<ReferenceCSVFileDescriptor> __this__success = new ArrayList<ReferenceCSVFileDescriptor>(other.success.size());
        for (ReferenceCSVFileDescriptor other_element : other.success) {
          __this__success.add(new ReferenceCSVFileDescriptor(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetAllReferenceCSVFiles_result deepCopy() {
      return new GetAllReferenceCSVFiles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ReferenceCSVFileDescriptor> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ReferenceCSVFileDescriptor elem) {
      if (this.success == null) {
        this.success = new ArrayList<ReferenceCSVFileDescriptor>();
      }
      this.success.add(elem);
    }

    public List<ReferenceCSVFileDescriptor> getSuccess() {
      return this.success;
    }

    public GetAllReferenceCSVFiles_result setSuccess(List<ReferenceCSVFileDescriptor> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetAllReferenceCSVFiles_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ReferenceCSVFileDescriptor>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAllReferenceCSVFiles_result)
        return this.equals((GetAllReferenceCSVFiles_result)that);
      return false;
    }

    public boolean equals(GetAllReferenceCSVFiles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAllReferenceCSVFiles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAllReferenceCSVFiles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAllReferenceCSVFiles_resultStandardSchemeFactory implements SchemeFactory {
      public GetAllReferenceCSVFiles_resultStandardScheme getScheme() {
        return new GetAllReferenceCSVFiles_resultStandardScheme();
      }
    }

    private static class GetAllReferenceCSVFiles_resultStandardScheme extends StandardScheme<GetAllReferenceCSVFiles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllReferenceCSVFiles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list356 = iprot.readListBegin();
                  struct.success = new ArrayList<ReferenceCSVFileDescriptor>(_list356.size);
                  ReferenceCSVFileDescriptor _elem357;
                  for (int _i358 = 0; _i358 < _list356.size; ++_i358)
                  {
                    _elem357 = new ReferenceCSVFileDescriptor();
                    _elem357.read(iprot);
                    struct.success.add(_elem357);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllReferenceCSVFiles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ReferenceCSVFileDescriptor _iter359 : struct.success)
            {
              _iter359.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAllReferenceCSVFiles_resultTupleSchemeFactory implements SchemeFactory {
      public GetAllReferenceCSVFiles_resultTupleScheme getScheme() {
        return new GetAllReferenceCSVFiles_resultTupleScheme();
      }
    }

    private static class GetAllReferenceCSVFiles_resultTupleScheme extends TupleScheme<GetAllReferenceCSVFiles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAllReferenceCSVFiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ReferenceCSVFileDescriptor _iter360 : struct.success)
            {
              _iter360.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAllReferenceCSVFiles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list361 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ReferenceCSVFileDescriptor>(_list361.size);
            ReferenceCSVFileDescriptor _elem362;
            for (int _i363 = 0; _i363 < _list361.size; ++_i363)
            {
              _elem362 = new ReferenceCSVFileDescriptor();
              _elem362.read(iprot);
              struct.success.add(_elem362);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class CreateFieldsFromReferenceCSVFile_args implements org.apache.thrift.TBase<CreateFieldsFromReferenceCSVFile_args, CreateFieldsFromReferenceCSVFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateFieldsFromReferenceCSVFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateFieldsFromReferenceCSVFile_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("configurationVersion", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FIELDS_CONFIGURATION_XML_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldsConfigurationXML", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateFieldsFromReferenceCSVFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateFieldsFromReferenceCSVFile_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configurationVersion; // required
    public String fieldsConfigurationXML; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION_VERSION((short)2, "configurationVersion"),
      FIELDS_CONFIGURATION_XML((short)3, "fieldsConfigurationXML");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION_VERSION
            return CONFIGURATION_VERSION;
          case 3: // FIELDS_CONFIGURATION_XML
            return FIELDS_CONFIGURATION_XML;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION_VERSION, new org.apache.thrift.meta_data.FieldMetaData("configurationVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.FIELDS_CONFIGURATION_XML, new org.apache.thrift.meta_data.FieldMetaData("fieldsConfigurationXML", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateFieldsFromReferenceCSVFile_args.class, metaDataMap);
    }

    public CreateFieldsFromReferenceCSVFile_args() {
    }

    public CreateFieldsFromReferenceCSVFile_args(
      Authentication authentication,
      ConfigurationVersion configurationVersion,
      String fieldsConfigurationXML)
    {
      this();
      this.authentication = authentication;
      this.configurationVersion = configurationVersion;
      this.fieldsConfigurationXML = fieldsConfigurationXML;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateFieldsFromReferenceCSVFile_args(CreateFieldsFromReferenceCSVFile_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfigurationVersion()) {
        this.configurationVersion = new ConfigurationVersion(other.configurationVersion);
      }
      if (other.isSetFieldsConfigurationXML()) {
        this.fieldsConfigurationXML = other.fieldsConfigurationXML;
      }
    }

    public CreateFieldsFromReferenceCSVFile_args deepCopy() {
      return new CreateFieldsFromReferenceCSVFile_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configurationVersion = null;
      this.fieldsConfigurationXML = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public CreateFieldsFromReferenceCSVFile_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfigurationVersion() {
      return this.configurationVersion;
    }

    public CreateFieldsFromReferenceCSVFile_args setConfigurationVersion(ConfigurationVersion configurationVersion) {
      this.configurationVersion = configurationVersion;
      return this;
    }

    public void unsetConfigurationVersion() {
      this.configurationVersion = null;
    }

    /** Returns true if field configurationVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigurationVersion() {
      return this.configurationVersion != null;
    }

    public void setConfigurationVersionIsSet(boolean value) {
      if (!value) {
        this.configurationVersion = null;
      }
    }

    public String getFieldsConfigurationXML() {
      return this.fieldsConfigurationXML;
    }

    public CreateFieldsFromReferenceCSVFile_args setFieldsConfigurationXML(String fieldsConfigurationXML) {
      this.fieldsConfigurationXML = fieldsConfigurationXML;
      return this;
    }

    public void unsetFieldsConfigurationXML() {
      this.fieldsConfigurationXML = null;
    }

    /** Returns true if field fieldsConfigurationXML is set (has been assigned a value) and false otherwise */
    public boolean isSetFieldsConfigurationXML() {
      return this.fieldsConfigurationXML != null;
    }

    public void setFieldsConfigurationXMLIsSet(boolean value) {
      if (!value) {
        this.fieldsConfigurationXML = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION_VERSION:
        if (value == null) {
          unsetConfigurationVersion();
        } else {
          setConfigurationVersion((ConfigurationVersion)value);
        }
        break;

      case FIELDS_CONFIGURATION_XML:
        if (value == null) {
          unsetFieldsConfigurationXML();
        } else {
          setFieldsConfigurationXML((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION_VERSION:
        return getConfigurationVersion();

      case FIELDS_CONFIGURATION_XML:
        return getFieldsConfigurationXML();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION_VERSION:
        return isSetConfigurationVersion();
      case FIELDS_CONFIGURATION_XML:
        return isSetFieldsConfigurationXML();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateFieldsFromReferenceCSVFile_args)
        return this.equals((CreateFieldsFromReferenceCSVFile_args)that);
      return false;
    }

    public boolean equals(CreateFieldsFromReferenceCSVFile_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configurationVersion = true && this.isSetConfigurationVersion();
      boolean that_present_configurationVersion = true && that.isSetConfigurationVersion();
      if (this_present_configurationVersion || that_present_configurationVersion) {
        if (!(this_present_configurationVersion && that_present_configurationVersion))
          return false;
        if (!this.configurationVersion.equals(that.configurationVersion))
          return false;
      }

      boolean this_present_fieldsConfigurationXML = true && this.isSetFieldsConfigurationXML();
      boolean that_present_fieldsConfigurationXML = true && that.isSetFieldsConfigurationXML();
      if (this_present_fieldsConfigurationXML || that_present_fieldsConfigurationXML) {
        if (!(this_present_fieldsConfigurationXML && that_present_fieldsConfigurationXML))
          return false;
        if (!this.fieldsConfigurationXML.equals(that.fieldsConfigurationXML))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configurationVersion = true && (isSetConfigurationVersion());
      list.add(present_configurationVersion);
      if (present_configurationVersion)
        list.add(configurationVersion);

      boolean present_fieldsConfigurationXML = true && (isSetFieldsConfigurationXML());
      list.add(present_fieldsConfigurationXML);
      if (present_fieldsConfigurationXML)
        list.add(fieldsConfigurationXML);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateFieldsFromReferenceCSVFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfigurationVersion()).compareTo(other.isSetConfigurationVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigurationVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configurationVersion, other.configurationVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFieldsConfigurationXML()).compareTo(other.isSetFieldsConfigurationXML());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFieldsConfigurationXML()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldsConfigurationXML, other.fieldsConfigurationXML);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateFieldsFromReferenceCSVFile_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configurationVersion:");
      if (this.configurationVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.configurationVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fieldsConfigurationXML:");
      if (this.fieldsConfigurationXML == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldsConfigurationXML);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configurationVersion != null) {
        configurationVersion.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateFieldsFromReferenceCSVFile_argsStandardSchemeFactory implements SchemeFactory {
      public CreateFieldsFromReferenceCSVFile_argsStandardScheme getScheme() {
        return new CreateFieldsFromReferenceCSVFile_argsStandardScheme();
      }
    }

    private static class CreateFieldsFromReferenceCSVFile_argsStandardScheme extends StandardScheme<CreateFieldsFromReferenceCSVFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateFieldsFromReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configurationVersion = new ConfigurationVersion();
                struct.configurationVersion.read(iprot);
                struct.setConfigurationVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FIELDS_CONFIGURATION_XML
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fieldsConfigurationXML = iprot.readString();
                struct.setFieldsConfigurationXMLIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateFieldsFromReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configurationVersion != null) {
          oprot.writeFieldBegin(CONFIGURATION_VERSION_FIELD_DESC);
          struct.configurationVersion.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fieldsConfigurationXML != null) {
          oprot.writeFieldBegin(FIELDS_CONFIGURATION_XML_FIELD_DESC);
          oprot.writeString(struct.fieldsConfigurationXML);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateFieldsFromReferenceCSVFile_argsTupleSchemeFactory implements SchemeFactory {
      public CreateFieldsFromReferenceCSVFile_argsTupleScheme getScheme() {
        return new CreateFieldsFromReferenceCSVFile_argsTupleScheme();
      }
    }

    private static class CreateFieldsFromReferenceCSVFile_argsTupleScheme extends TupleScheme<CreateFieldsFromReferenceCSVFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateFieldsFromReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfigurationVersion()) {
          optionals.set(1);
        }
        if (struct.isSetFieldsConfigurationXML()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfigurationVersion()) {
          struct.configurationVersion.write(oprot);
        }
        if (struct.isSetFieldsConfigurationXML()) {
          oprot.writeString(struct.fieldsConfigurationXML);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateFieldsFromReferenceCSVFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configurationVersion = new ConfigurationVersion();
          struct.configurationVersion.read(iprot);
          struct.setConfigurationVersionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fieldsConfigurationXML = iprot.readString();
          struct.setFieldsConfigurationXMLIsSet(true);
        }
      }
    }

  }

  public static class CreateFieldsFromReferenceCSVFile_result implements org.apache.thrift.TBase<CreateFieldsFromReferenceCSVFile_result, CreateFieldsFromReferenceCSVFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateFieldsFromReferenceCSVFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateFieldsFromReferenceCSVFile_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateFieldsFromReferenceCSVFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateFieldsFromReferenceCSVFile_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateFieldsFromReferenceCSVFile_result.class, metaDataMap);
    }

    public CreateFieldsFromReferenceCSVFile_result() {
    }

    public CreateFieldsFromReferenceCSVFile_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateFieldsFromReferenceCSVFile_result(CreateFieldsFromReferenceCSVFile_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public CreateFieldsFromReferenceCSVFile_result deepCopy() {
      return new CreateFieldsFromReferenceCSVFile_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public CreateFieldsFromReferenceCSVFile_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateFieldsFromReferenceCSVFile_result)
        return this.equals((CreateFieldsFromReferenceCSVFile_result)that);
      return false;
    }

    public boolean equals(CreateFieldsFromReferenceCSVFile_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateFieldsFromReferenceCSVFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateFieldsFromReferenceCSVFile_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateFieldsFromReferenceCSVFile_resultStandardSchemeFactory implements SchemeFactory {
      public CreateFieldsFromReferenceCSVFile_resultStandardScheme getScheme() {
        return new CreateFieldsFromReferenceCSVFile_resultStandardScheme();
      }
    }

    private static class CreateFieldsFromReferenceCSVFile_resultStandardScheme extends StandardScheme<CreateFieldsFromReferenceCSVFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateFieldsFromReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateFieldsFromReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateFieldsFromReferenceCSVFile_resultTupleSchemeFactory implements SchemeFactory {
      public CreateFieldsFromReferenceCSVFile_resultTupleScheme getScheme() {
        return new CreateFieldsFromReferenceCSVFile_resultTupleScheme();
      }
    }

    private static class CreateFieldsFromReferenceCSVFile_resultTupleScheme extends TupleScheme<CreateFieldsFromReferenceCSVFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateFieldsFromReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateFieldsFromReferenceCSVFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetSchedulings_args implements org.apache.thrift.TBase<GetSchedulings_args, GetSchedulings_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetSchedulings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSchedulings_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSchedulings_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSchedulings_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSchedulings_args.class, metaDataMap);
    }

    public GetSchedulings_args() {
    }

    public GetSchedulings_args(
      Authentication authentication,
      ConfigurationVersion configuration)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSchedulings_args(GetSchedulings_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
    }

    public GetSchedulings_args deepCopy() {
      return new GetSchedulings_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetSchedulings_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetSchedulings_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSchedulings_args)
        return this.equals((GetSchedulings_args)that);
      return false;
    }

    public boolean equals(GetSchedulings_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetSchedulings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSchedulings_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSchedulings_argsStandardSchemeFactory implements SchemeFactory {
      public GetSchedulings_argsStandardScheme getScheme() {
        return new GetSchedulings_argsStandardScheme();
      }
    }

    private static class GetSchedulings_argsStandardScheme extends StandardScheme<GetSchedulings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSchedulings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSchedulings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSchedulings_argsTupleSchemeFactory implements SchemeFactory {
      public GetSchedulings_argsTupleScheme getScheme() {
        return new GetSchedulings_argsTupleScheme();
      }
    }

    private static class GetSchedulings_argsTupleScheme extends TupleScheme<GetSchedulings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSchedulings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSchedulings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
      }
    }

  }

  public static class GetSchedulings_result implements org.apache.thrift.TBase<GetSchedulings_result, GetSchedulings_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetSchedulings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSchedulings_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSchedulings_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSchedulings_resultTupleSchemeFactory());
    }

    public Map<String,Scheduling> success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Scheduling.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSchedulings_result.class, metaDataMap);
    }

    public GetSchedulings_result() {
    }

    public GetSchedulings_result(
      Map<String,Scheduling> success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSchedulings_result(GetSchedulings_result other) {
      if (other.isSetSuccess()) {
        Map<String,Scheduling> __this__success = new HashMap<String,Scheduling>(other.success.size());
        for (Map.Entry<String, Scheduling> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Scheduling other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Scheduling __this__success_copy_value = new Scheduling(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetSchedulings_result deepCopy() {
      return new GetSchedulings_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Scheduling val) {
      if (this.success == null) {
        this.success = new HashMap<String,Scheduling>();
      }
      this.success.put(key, val);
    }

    public Map<String,Scheduling> getSuccess() {
      return this.success;
    }

    public GetSchedulings_result setSuccess(Map<String,Scheduling> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetSchedulings_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Scheduling>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSchedulings_result)
        return this.equals((GetSchedulings_result)that);
      return false;
    }

    public boolean equals(GetSchedulings_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetSchedulings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSchedulings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSchedulings_resultStandardSchemeFactory implements SchemeFactory {
      public GetSchedulings_resultStandardScheme getScheme() {
        return new GetSchedulings_resultStandardScheme();
      }
    }

    private static class GetSchedulings_resultStandardScheme extends StandardScheme<GetSchedulings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSchedulings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map364 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Scheduling>(2*_map364.size);
                  String _key365;
                  Scheduling _val366;
                  for (int _i367 = 0; _i367 < _map364.size; ++_i367)
                  {
                    _key365 = iprot.readString();
                    _val366 = new Scheduling();
                    _val366.read(iprot);
                    struct.success.put(_key365, _val366);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSchedulings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, Scheduling> _iter368 : struct.success.entrySet())
            {
              oprot.writeString(_iter368.getKey());
              _iter368.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSchedulings_resultTupleSchemeFactory implements SchemeFactory {
      public GetSchedulings_resultTupleScheme getScheme() {
        return new GetSchedulings_resultTupleScheme();
      }
    }

    private static class GetSchedulings_resultTupleScheme extends TupleScheme<GetSchedulings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSchedulings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Scheduling> _iter369 : struct.success.entrySet())
            {
              oprot.writeString(_iter369.getKey());
              _iter369.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSchedulings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map370 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,Scheduling>(2*_map370.size);
            String _key371;
            Scheduling _val372;
            for (int _i373 = 0; _i373 < _map370.size; ++_i373)
            {
              _key371 = iprot.readString();
              _val372 = new Scheduling();
              _val372.read(iprot);
              struct.success.put(_key371, _val372);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class CreateScheduling_args implements org.apache.thrift.TBase<CreateScheduling_args, CreateScheduling_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateScheduling_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateScheduling_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SCHEDULING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schedulingId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateScheduling_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateScheduling_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String schedulingId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      SCHEDULING_ID((short)3, "schedulingId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // SCHEDULING_ID
            return SCHEDULING_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.SCHEDULING_ID, new org.apache.thrift.meta_data.FieldMetaData("schedulingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateScheduling_args.class, metaDataMap);
    }

    public CreateScheduling_args() {
    }

    public CreateScheduling_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String schedulingId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.schedulingId = schedulingId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateScheduling_args(CreateScheduling_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetSchedulingId()) {
        this.schedulingId = other.schedulingId;
      }
    }

    public CreateScheduling_args deepCopy() {
      return new CreateScheduling_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.schedulingId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public CreateScheduling_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public CreateScheduling_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getSchedulingId() {
      return this.schedulingId;
    }

    public CreateScheduling_args setSchedulingId(String schedulingId) {
      this.schedulingId = schedulingId;
      return this;
    }

    public void unsetSchedulingId() {
      this.schedulingId = null;
    }

    /** Returns true if field schedulingId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchedulingId() {
      return this.schedulingId != null;
    }

    public void setSchedulingIdIsSet(boolean value) {
      if (!value) {
        this.schedulingId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case SCHEDULING_ID:
        if (value == null) {
          unsetSchedulingId();
        } else {
          setSchedulingId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case SCHEDULING_ID:
        return getSchedulingId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case SCHEDULING_ID:
        return isSetSchedulingId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateScheduling_args)
        return this.equals((CreateScheduling_args)that);
      return false;
    }

    public boolean equals(CreateScheduling_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_schedulingId = true && this.isSetSchedulingId();
      boolean that_present_schedulingId = true && that.isSetSchedulingId();
      if (this_present_schedulingId || that_present_schedulingId) {
        if (!(this_present_schedulingId && that_present_schedulingId))
          return false;
        if (!this.schedulingId.equals(that.schedulingId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_schedulingId = true && (isSetSchedulingId());
      list.add(present_schedulingId);
      if (present_schedulingId)
        list.add(schedulingId);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateScheduling_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSchedulingId()).compareTo(other.isSetSchedulingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchedulingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedulingId, other.schedulingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateScheduling_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schedulingId:");
      if (this.schedulingId == null) {
        sb.append("null");
      } else {
        sb.append(this.schedulingId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateScheduling_argsStandardSchemeFactory implements SchemeFactory {
      public CreateScheduling_argsStandardScheme getScheme() {
        return new CreateScheduling_argsStandardScheme();
      }
    }

    private static class CreateScheduling_argsStandardScheme extends StandardScheme<CreateScheduling_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateScheduling_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCHEDULING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schedulingId = iprot.readString();
                struct.setSchedulingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateScheduling_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.schedulingId != null) {
          oprot.writeFieldBegin(SCHEDULING_ID_FIELD_DESC);
          oprot.writeString(struct.schedulingId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateScheduling_argsTupleSchemeFactory implements SchemeFactory {
      public CreateScheduling_argsTupleScheme getScheme() {
        return new CreateScheduling_argsTupleScheme();
      }
    }

    private static class CreateScheduling_argsTupleScheme extends TupleScheme<CreateScheduling_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateScheduling_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetSchedulingId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetSchedulingId()) {
          oprot.writeString(struct.schedulingId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateScheduling_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.schedulingId = iprot.readString();
          struct.setSchedulingIdIsSet(true);
        }
      }
    }

  }

  public static class CreateScheduling_result implements org.apache.thrift.TBase<CreateScheduling_result, CreateScheduling_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateScheduling_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateScheduling_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateScheduling_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateScheduling_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateScheduling_result.class, metaDataMap);
    }

    public CreateScheduling_result() {
    }

    public CreateScheduling_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateScheduling_result(CreateScheduling_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public CreateScheduling_result deepCopy() {
      return new CreateScheduling_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public CreateScheduling_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateScheduling_result)
        return this.equals((CreateScheduling_result)that);
      return false;
    }

    public boolean equals(CreateScheduling_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateScheduling_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateScheduling_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateScheduling_resultStandardSchemeFactory implements SchemeFactory {
      public CreateScheduling_resultStandardScheme getScheme() {
        return new CreateScheduling_resultStandardScheme();
      }
    }

    private static class CreateScheduling_resultStandardScheme extends StandardScheme<CreateScheduling_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateScheduling_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateScheduling_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateScheduling_resultTupleSchemeFactory implements SchemeFactory {
      public CreateScheduling_resultTupleScheme getScheme() {
        return new CreateScheduling_resultTupleScheme();
      }
    }

    private static class CreateScheduling_resultTupleScheme extends TupleScheme<CreateScheduling_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateScheduling_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateScheduling_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class UpdateScheduling_args implements org.apache.thrift.TBase<UpdateScheduling_args, UpdateScheduling_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateScheduling_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateScheduling_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SCHEDULING_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduling", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateScheduling_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateScheduling_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public Scheduling scheduling; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      SCHEDULING((short)3, "scheduling");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // SCHEDULING
            return SCHEDULING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.SCHEDULING, new org.apache.thrift.meta_data.FieldMetaData("scheduling", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Scheduling.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateScheduling_args.class, metaDataMap);
    }

    public UpdateScheduling_args() {
    }

    public UpdateScheduling_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      Scheduling scheduling)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.scheduling = scheduling;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateScheduling_args(UpdateScheduling_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetScheduling()) {
        this.scheduling = new Scheduling(other.scheduling);
      }
    }

    public UpdateScheduling_args deepCopy() {
      return new UpdateScheduling_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.scheduling = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public UpdateScheduling_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public UpdateScheduling_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public Scheduling getScheduling() {
      return this.scheduling;
    }

    public UpdateScheduling_args setScheduling(Scheduling scheduling) {
      this.scheduling = scheduling;
      return this;
    }

    public void unsetScheduling() {
      this.scheduling = null;
    }

    /** Returns true if field scheduling is set (has been assigned a value) and false otherwise */
    public boolean isSetScheduling() {
      return this.scheduling != null;
    }

    public void setSchedulingIsSet(boolean value) {
      if (!value) {
        this.scheduling = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case SCHEDULING:
        if (value == null) {
          unsetScheduling();
        } else {
          setScheduling((Scheduling)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case SCHEDULING:
        return getScheduling();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case SCHEDULING:
        return isSetScheduling();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateScheduling_args)
        return this.equals((UpdateScheduling_args)that);
      return false;
    }

    public boolean equals(UpdateScheduling_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_scheduling = true && this.isSetScheduling();
      boolean that_present_scheduling = true && that.isSetScheduling();
      if (this_present_scheduling || that_present_scheduling) {
        if (!(this_present_scheduling && that_present_scheduling))
          return false;
        if (!this.scheduling.equals(that.scheduling))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_scheduling = true && (isSetScheduling());
      list.add(present_scheduling);
      if (present_scheduling)
        list.add(scheduling);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateScheduling_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScheduling()).compareTo(other.isSetScheduling());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScheduling()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduling, other.scheduling);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateScheduling_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scheduling:");
      if (this.scheduling == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduling);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (scheduling != null) {
        scheduling.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateScheduling_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateScheduling_argsStandardScheme getScheme() {
        return new UpdateScheduling_argsStandardScheme();
      }
    }

    private static class UpdateScheduling_argsStandardScheme extends StandardScheme<UpdateScheduling_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateScheduling_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCHEDULING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.scheduling = new Scheduling();
                struct.scheduling.read(iprot);
                struct.setSchedulingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateScheduling_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.scheduling != null) {
          oprot.writeFieldBegin(SCHEDULING_FIELD_DESC);
          struct.scheduling.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateScheduling_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateScheduling_argsTupleScheme getScheme() {
        return new UpdateScheduling_argsTupleScheme();
      }
    }

    private static class UpdateScheduling_argsTupleScheme extends TupleScheme<UpdateScheduling_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateScheduling_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetScheduling()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetScheduling()) {
          struct.scheduling.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateScheduling_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.scheduling = new Scheduling();
          struct.scheduling.read(iprot);
          struct.setSchedulingIsSet(true);
        }
      }
    }

  }

  public static class UpdateScheduling_result implements org.apache.thrift.TBase<UpdateScheduling_result, UpdateScheduling_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateScheduling_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateScheduling_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateScheduling_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateScheduling_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateScheduling_result.class, metaDataMap);
    }

    public UpdateScheduling_result() {
    }

    public UpdateScheduling_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateScheduling_result(UpdateScheduling_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public UpdateScheduling_result deepCopy() {
      return new UpdateScheduling_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public UpdateScheduling_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateScheduling_result)
        return this.equals((UpdateScheduling_result)that);
      return false;
    }

    public boolean equals(UpdateScheduling_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateScheduling_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateScheduling_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateScheduling_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateScheduling_resultStandardScheme getScheme() {
        return new UpdateScheduling_resultStandardScheme();
      }
    }

    private static class UpdateScheduling_resultStandardScheme extends StandardScheme<UpdateScheduling_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateScheduling_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateScheduling_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateScheduling_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateScheduling_resultTupleScheme getScheme() {
        return new UpdateScheduling_resultTupleScheme();
      }
    }

    private static class UpdateScheduling_resultTupleScheme extends TupleScheme<UpdateScheduling_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateScheduling_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateScheduling_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class DeleteScheduling_args implements org.apache.thrift.TBase<DeleteScheduling_args, DeleteScheduling_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteScheduling_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteScheduling_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SCHEDULING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("schedulingId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteScheduling_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteScheduling_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String schedulingId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      SCHEDULING_ID((short)3, "schedulingId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // SCHEDULING_ID
            return SCHEDULING_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.SCHEDULING_ID, new org.apache.thrift.meta_data.FieldMetaData("schedulingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteScheduling_args.class, metaDataMap);
    }

    public DeleteScheduling_args() {
    }

    public DeleteScheduling_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String schedulingId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.schedulingId = schedulingId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteScheduling_args(DeleteScheduling_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetSchedulingId()) {
        this.schedulingId = other.schedulingId;
      }
    }

    public DeleteScheduling_args deepCopy() {
      return new DeleteScheduling_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.schedulingId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public DeleteScheduling_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public DeleteScheduling_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getSchedulingId() {
      return this.schedulingId;
    }

    public DeleteScheduling_args setSchedulingId(String schedulingId) {
      this.schedulingId = schedulingId;
      return this;
    }

    public void unsetSchedulingId() {
      this.schedulingId = null;
    }

    /** Returns true if field schedulingId is set (has been assigned a value) and false otherwise */
    public boolean isSetSchedulingId() {
      return this.schedulingId != null;
    }

    public void setSchedulingIdIsSet(boolean value) {
      if (!value) {
        this.schedulingId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case SCHEDULING_ID:
        if (value == null) {
          unsetSchedulingId();
        } else {
          setSchedulingId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case SCHEDULING_ID:
        return getSchedulingId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case SCHEDULING_ID:
        return isSetSchedulingId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteScheduling_args)
        return this.equals((DeleteScheduling_args)that);
      return false;
    }

    public boolean equals(DeleteScheduling_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_schedulingId = true && this.isSetSchedulingId();
      boolean that_present_schedulingId = true && that.isSetSchedulingId();
      if (this_present_schedulingId || that_present_schedulingId) {
        if (!(this_present_schedulingId && that_present_schedulingId))
          return false;
        if (!this.schedulingId.equals(that.schedulingId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_schedulingId = true && (isSetSchedulingId());
      list.add(present_schedulingId);
      if (present_schedulingId)
        list.add(schedulingId);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteScheduling_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSchedulingId()).compareTo(other.isSetSchedulingId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchedulingId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedulingId, other.schedulingId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteScheduling_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schedulingId:");
      if (this.schedulingId == null) {
        sb.append("null");
      } else {
        sb.append(this.schedulingId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteScheduling_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteScheduling_argsStandardScheme getScheme() {
        return new DeleteScheduling_argsStandardScheme();
      }
    }

    private static class DeleteScheduling_argsStandardScheme extends StandardScheme<DeleteScheduling_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteScheduling_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCHEDULING_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schedulingId = iprot.readString();
                struct.setSchedulingIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteScheduling_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.schedulingId != null) {
          oprot.writeFieldBegin(SCHEDULING_ID_FIELD_DESC);
          oprot.writeString(struct.schedulingId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteScheduling_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteScheduling_argsTupleScheme getScheme() {
        return new DeleteScheduling_argsTupleScheme();
      }
    }

    private static class DeleteScheduling_argsTupleScheme extends TupleScheme<DeleteScheduling_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteScheduling_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetSchedulingId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetSchedulingId()) {
          oprot.writeString(struct.schedulingId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteScheduling_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.schedulingId = iprot.readString();
          struct.setSchedulingIdIsSet(true);
        }
      }
    }

  }

  public static class DeleteScheduling_result implements org.apache.thrift.TBase<DeleteScheduling_result, DeleteScheduling_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteScheduling_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteScheduling_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteScheduling_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteScheduling_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteScheduling_result.class, metaDataMap);
    }

    public DeleteScheduling_result() {
    }

    public DeleteScheduling_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteScheduling_result(DeleteScheduling_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public DeleteScheduling_result deepCopy() {
      return new DeleteScheduling_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public DeleteScheduling_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteScheduling_result)
        return this.equals((DeleteScheduling_result)that);
      return false;
    }

    public boolean equals(DeleteScheduling_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteScheduling_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteScheduling_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteScheduling_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteScheduling_resultStandardScheme getScheme() {
        return new DeleteScheduling_resultStandardScheme();
      }
    }

    private static class DeleteScheduling_resultStandardScheme extends StandardScheme<DeleteScheduling_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteScheduling_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteScheduling_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteScheduling_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteScheduling_resultTupleScheme getScheme() {
        return new DeleteScheduling_resultTupleScheme();
      }
    }

    private static class DeleteScheduling_resultTupleScheme extends TupleScheme<DeleteScheduling_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteScheduling_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteScheduling_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class RunScheduling_args implements org.apache.thrift.TBase<RunScheduling_args, RunScheduling_args._Fields>, java.io.Serializable, Cloneable, Comparable<RunScheduling_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunScheduling_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RunScheduling_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RunScheduling_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public SchedulingExecutionParameters parameters; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      PARAMETERS((short)3, "parameters");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // PARAMETERS
            return PARAMETERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SchedulingExecutionParameters.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RunScheduling_args.class, metaDataMap);
    }

    public RunScheduling_args() {
    }

    public RunScheduling_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      SchedulingExecutionParameters parameters)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.parameters = parameters;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RunScheduling_args(RunScheduling_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetParameters()) {
        this.parameters = new SchedulingExecutionParameters(other.parameters);
      }
    }

    public RunScheduling_args deepCopy() {
      return new RunScheduling_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.parameters = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public RunScheduling_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public RunScheduling_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public SchedulingExecutionParameters getParameters() {
      return this.parameters;
    }

    public RunScheduling_args setParameters(SchedulingExecutionParameters parameters) {
      this.parameters = parameters;
      return this;
    }

    public void unsetParameters() {
      this.parameters = null;
    }

    /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
    public boolean isSetParameters() {
      return this.parameters != null;
    }

    public void setParametersIsSet(boolean value) {
      if (!value) {
        this.parameters = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case PARAMETERS:
        if (value == null) {
          unsetParameters();
        } else {
          setParameters((SchedulingExecutionParameters)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case PARAMETERS:
        return getParameters();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case PARAMETERS:
        return isSetParameters();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RunScheduling_args)
        return this.equals((RunScheduling_args)that);
      return false;
    }

    public boolean equals(RunScheduling_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_parameters = true && this.isSetParameters();
      boolean that_present_parameters = true && that.isSetParameters();
      if (this_present_parameters || that_present_parameters) {
        if (!(this_present_parameters && that_present_parameters))
          return false;
        if (!this.parameters.equals(that.parameters))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_parameters = true && (isSetParameters());
      list.add(present_parameters);
      if (present_parameters)
        list.add(parameters);

      return list.hashCode();
    }

    @Override
    public int compareTo(RunScheduling_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParameters()).compareTo(other.isSetParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, other.parameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RunScheduling_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameters:");
      if (this.parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.parameters);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (parameters != null) {
        parameters.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RunScheduling_argsStandardSchemeFactory implements SchemeFactory {
      public RunScheduling_argsStandardScheme getScheme() {
        return new RunScheduling_argsStandardScheme();
      }
    }

    private static class RunScheduling_argsStandardScheme extends StandardScheme<RunScheduling_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RunScheduling_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAMETERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.parameters = new SchedulingExecutionParameters();
                struct.parameters.read(iprot);
                struct.setParametersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RunScheduling_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.parameters != null) {
          oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
          struct.parameters.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RunScheduling_argsTupleSchemeFactory implements SchemeFactory {
      public RunScheduling_argsTupleScheme getScheme() {
        return new RunScheduling_argsTupleScheme();
      }
    }

    private static class RunScheduling_argsTupleScheme extends TupleScheme<RunScheduling_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RunScheduling_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetParameters()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetParameters()) {
          struct.parameters.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RunScheduling_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.parameters = new SchedulingExecutionParameters();
          struct.parameters.read(iprot);
          struct.setParametersIsSet(true);
        }
      }
    }

  }

  public static class RunScheduling_result implements org.apache.thrift.TBase<RunScheduling_result, RunScheduling_result._Fields>, java.io.Serializable, Cloneable, Comparable<RunScheduling_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunScheduling_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RunScheduling_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RunScheduling_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RunScheduling_result.class, metaDataMap);
    }

    public RunScheduling_result() {
    }

    public RunScheduling_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RunScheduling_result(RunScheduling_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public RunScheduling_result deepCopy() {
      return new RunScheduling_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public RunScheduling_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RunScheduling_result)
        return this.equals((RunScheduling_result)that);
      return false;
    }

    public boolean equals(RunScheduling_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(RunScheduling_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RunScheduling_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RunScheduling_resultStandardSchemeFactory implements SchemeFactory {
      public RunScheduling_resultStandardScheme getScheme() {
        return new RunScheduling_resultStandardScheme();
      }
    }

    private static class RunScheduling_resultStandardScheme extends StandardScheme<RunScheduling_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RunScheduling_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RunScheduling_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RunScheduling_resultTupleSchemeFactory implements SchemeFactory {
      public RunScheduling_resultTupleScheme getScheme() {
        return new RunScheduling_resultTupleScheme();
      }
    }

    private static class RunScheduling_resultTupleScheme extends TupleScheme<RunScheduling_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RunScheduling_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RunScheduling_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetRecommendationBlocks_args implements org.apache.thrift.TBase<GetRecommendationBlocks_args, GetRecommendationBlocks_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetRecommendationBlocks_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetRecommendationBlocks_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetRecommendationBlocks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetRecommendationBlocks_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetRecommendationBlocks_args.class, metaDataMap);
    }

    public GetRecommendationBlocks_args() {
    }

    public GetRecommendationBlocks_args(
      Authentication authentication,
      ConfigurationVersion configuration)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetRecommendationBlocks_args(GetRecommendationBlocks_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
    }

    public GetRecommendationBlocks_args deepCopy() {
      return new GetRecommendationBlocks_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetRecommendationBlocks_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetRecommendationBlocks_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetRecommendationBlocks_args)
        return this.equals((GetRecommendationBlocks_args)that);
      return false;
    }

    public boolean equals(GetRecommendationBlocks_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetRecommendationBlocks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetRecommendationBlocks_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetRecommendationBlocks_argsStandardSchemeFactory implements SchemeFactory {
      public GetRecommendationBlocks_argsStandardScheme getScheme() {
        return new GetRecommendationBlocks_argsStandardScheme();
      }
    }

    private static class GetRecommendationBlocks_argsStandardScheme extends StandardScheme<GetRecommendationBlocks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetRecommendationBlocks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetRecommendationBlocks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetRecommendationBlocks_argsTupleSchemeFactory implements SchemeFactory {
      public GetRecommendationBlocks_argsTupleScheme getScheme() {
        return new GetRecommendationBlocks_argsTupleScheme();
      }
    }

    private static class GetRecommendationBlocks_argsTupleScheme extends TupleScheme<GetRecommendationBlocks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetRecommendationBlocks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetRecommendationBlocks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
      }
    }

  }

  public static class GetRecommendationBlocks_result implements org.apache.thrift.TBase<GetRecommendationBlocks_result, GetRecommendationBlocks_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetRecommendationBlocks_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetRecommendationBlocks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetRecommendationBlocks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetRecommendationBlocks_resultTupleSchemeFactory());
    }

    public Map<String,RecommendationBlock> success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecommendationBlock.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetRecommendationBlocks_result.class, metaDataMap);
    }

    public GetRecommendationBlocks_result() {
    }

    public GetRecommendationBlocks_result(
      Map<String,RecommendationBlock> success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetRecommendationBlocks_result(GetRecommendationBlocks_result other) {
      if (other.isSetSuccess()) {
        Map<String,RecommendationBlock> __this__success = new HashMap<String,RecommendationBlock>(other.success.size());
        for (Map.Entry<String, RecommendationBlock> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          RecommendationBlock other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          RecommendationBlock __this__success_copy_value = new RecommendationBlock(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetRecommendationBlocks_result deepCopy() {
      return new GetRecommendationBlocks_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, RecommendationBlock val) {
      if (this.success == null) {
        this.success = new HashMap<String,RecommendationBlock>();
      }
      this.success.put(key, val);
    }

    public Map<String,RecommendationBlock> getSuccess() {
      return this.success;
    }

    public GetRecommendationBlocks_result setSuccess(Map<String,RecommendationBlock> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetRecommendationBlocks_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,RecommendationBlock>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetRecommendationBlocks_result)
        return this.equals((GetRecommendationBlocks_result)that);
      return false;
    }

    public boolean equals(GetRecommendationBlocks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetRecommendationBlocks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetRecommendationBlocks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetRecommendationBlocks_resultStandardSchemeFactory implements SchemeFactory {
      public GetRecommendationBlocks_resultStandardScheme getScheme() {
        return new GetRecommendationBlocks_resultStandardScheme();
      }
    }

    private static class GetRecommendationBlocks_resultStandardScheme extends StandardScheme<GetRecommendationBlocks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetRecommendationBlocks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map374 = iprot.readMapBegin();
                  struct.success = new HashMap<String,RecommendationBlock>(2*_map374.size);
                  String _key375;
                  RecommendationBlock _val376;
                  for (int _i377 = 0; _i377 < _map374.size; ++_i377)
                  {
                    _key375 = iprot.readString();
                    _val376 = new RecommendationBlock();
                    _val376.read(iprot);
                    struct.success.put(_key375, _val376);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetRecommendationBlocks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, RecommendationBlock> _iter378 : struct.success.entrySet())
            {
              oprot.writeString(_iter378.getKey());
              _iter378.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetRecommendationBlocks_resultTupleSchemeFactory implements SchemeFactory {
      public GetRecommendationBlocks_resultTupleScheme getScheme() {
        return new GetRecommendationBlocks_resultTupleScheme();
      }
    }

    private static class GetRecommendationBlocks_resultTupleScheme extends TupleScheme<GetRecommendationBlocks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetRecommendationBlocks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, RecommendationBlock> _iter379 : struct.success.entrySet())
            {
              oprot.writeString(_iter379.getKey());
              _iter379.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetRecommendationBlocks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map380 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,RecommendationBlock>(2*_map380.size);
            String _key381;
            RecommendationBlock _val382;
            for (int _i383 = 0; _i383 < _map380.size; ++_i383)
            {
              _key381 = iprot.readString();
              _val382 = new RecommendationBlock();
              _val382.read(iprot);
              struct.success.put(_key381, _val382);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class CreateRecommendationBlock_args implements org.apache.thrift.TBase<CreateRecommendationBlock_args, CreateRecommendationBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateRecommendationBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateRecommendationBlock_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RECOMMENDATION_BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendationBlockId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateRecommendationBlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateRecommendationBlock_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String recommendationBlockId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      RECOMMENDATION_BLOCK_ID((short)3, "recommendationBlockId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // RECOMMENDATION_BLOCK_ID
            return RECOMMENDATION_BLOCK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.RECOMMENDATION_BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("recommendationBlockId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateRecommendationBlock_args.class, metaDataMap);
    }

    public CreateRecommendationBlock_args() {
    }

    public CreateRecommendationBlock_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String recommendationBlockId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.recommendationBlockId = recommendationBlockId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateRecommendationBlock_args(CreateRecommendationBlock_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetRecommendationBlockId()) {
        this.recommendationBlockId = other.recommendationBlockId;
      }
    }

    public CreateRecommendationBlock_args deepCopy() {
      return new CreateRecommendationBlock_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.recommendationBlockId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public CreateRecommendationBlock_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public CreateRecommendationBlock_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getRecommendationBlockId() {
      return this.recommendationBlockId;
    }

    public CreateRecommendationBlock_args setRecommendationBlockId(String recommendationBlockId) {
      this.recommendationBlockId = recommendationBlockId;
      return this;
    }

    public void unsetRecommendationBlockId() {
      this.recommendationBlockId = null;
    }

    /** Returns true if field recommendationBlockId is set (has been assigned a value) and false otherwise */
    public boolean isSetRecommendationBlockId() {
      return this.recommendationBlockId != null;
    }

    public void setRecommendationBlockIdIsSet(boolean value) {
      if (!value) {
        this.recommendationBlockId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case RECOMMENDATION_BLOCK_ID:
        if (value == null) {
          unsetRecommendationBlockId();
        } else {
          setRecommendationBlockId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case RECOMMENDATION_BLOCK_ID:
        return getRecommendationBlockId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case RECOMMENDATION_BLOCK_ID:
        return isSetRecommendationBlockId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateRecommendationBlock_args)
        return this.equals((CreateRecommendationBlock_args)that);
      return false;
    }

    public boolean equals(CreateRecommendationBlock_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_recommendationBlockId = true && this.isSetRecommendationBlockId();
      boolean that_present_recommendationBlockId = true && that.isSetRecommendationBlockId();
      if (this_present_recommendationBlockId || that_present_recommendationBlockId) {
        if (!(this_present_recommendationBlockId && that_present_recommendationBlockId))
          return false;
        if (!this.recommendationBlockId.equals(that.recommendationBlockId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_recommendationBlockId = true && (isSetRecommendationBlockId());
      list.add(present_recommendationBlockId);
      if (present_recommendationBlockId)
        list.add(recommendationBlockId);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateRecommendationBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecommendationBlockId()).compareTo(other.isSetRecommendationBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecommendationBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendationBlockId, other.recommendationBlockId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateRecommendationBlock_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("recommendationBlockId:");
      if (this.recommendationBlockId == null) {
        sb.append("null");
      } else {
        sb.append(this.recommendationBlockId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateRecommendationBlock_argsStandardSchemeFactory implements SchemeFactory {
      public CreateRecommendationBlock_argsStandardScheme getScheme() {
        return new CreateRecommendationBlock_argsStandardScheme();
      }
    }

    private static class CreateRecommendationBlock_argsStandardScheme extends StandardScheme<CreateRecommendationBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateRecommendationBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RECOMMENDATION_BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.recommendationBlockId = iprot.readString();
                struct.setRecommendationBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateRecommendationBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.recommendationBlockId != null) {
          oprot.writeFieldBegin(RECOMMENDATION_BLOCK_ID_FIELD_DESC);
          oprot.writeString(struct.recommendationBlockId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateRecommendationBlock_argsTupleSchemeFactory implements SchemeFactory {
      public CreateRecommendationBlock_argsTupleScheme getScheme() {
        return new CreateRecommendationBlock_argsTupleScheme();
      }
    }

    private static class CreateRecommendationBlock_argsTupleScheme extends TupleScheme<CreateRecommendationBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateRecommendationBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetRecommendationBlockId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetRecommendationBlockId()) {
          oprot.writeString(struct.recommendationBlockId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateRecommendationBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.recommendationBlockId = iprot.readString();
          struct.setRecommendationBlockIdIsSet(true);
        }
      }
    }

  }

  public static class CreateRecommendationBlock_result implements org.apache.thrift.TBase<CreateRecommendationBlock_result, CreateRecommendationBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateRecommendationBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateRecommendationBlock_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateRecommendationBlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateRecommendationBlock_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateRecommendationBlock_result.class, metaDataMap);
    }

    public CreateRecommendationBlock_result() {
    }

    public CreateRecommendationBlock_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateRecommendationBlock_result(CreateRecommendationBlock_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public CreateRecommendationBlock_result deepCopy() {
      return new CreateRecommendationBlock_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public CreateRecommendationBlock_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateRecommendationBlock_result)
        return this.equals((CreateRecommendationBlock_result)that);
      return false;
    }

    public boolean equals(CreateRecommendationBlock_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateRecommendationBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateRecommendationBlock_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateRecommendationBlock_resultStandardSchemeFactory implements SchemeFactory {
      public CreateRecommendationBlock_resultStandardScheme getScheme() {
        return new CreateRecommendationBlock_resultStandardScheme();
      }
    }

    private static class CreateRecommendationBlock_resultStandardScheme extends StandardScheme<CreateRecommendationBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateRecommendationBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateRecommendationBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateRecommendationBlock_resultTupleSchemeFactory implements SchemeFactory {
      public CreateRecommendationBlock_resultTupleScheme getScheme() {
        return new CreateRecommendationBlock_resultTupleScheme();
      }
    }

    private static class CreateRecommendationBlock_resultTupleScheme extends TupleScheme<CreateRecommendationBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateRecommendationBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateRecommendationBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class UpdateRecommendationBlock_args implements org.apache.thrift.TBase<UpdateRecommendationBlock_args, UpdateRecommendationBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateRecommendationBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateRecommendationBlock_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RECOMMENDATION_BLOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendationBlock", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateRecommendationBlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateRecommendationBlock_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public RecommendationBlock recommendationBlock; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      RECOMMENDATION_BLOCK((short)3, "recommendationBlock");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // RECOMMENDATION_BLOCK
            return RECOMMENDATION_BLOCK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.RECOMMENDATION_BLOCK, new org.apache.thrift.meta_data.FieldMetaData("recommendationBlock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecommendationBlock.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateRecommendationBlock_args.class, metaDataMap);
    }

    public UpdateRecommendationBlock_args() {
    }

    public UpdateRecommendationBlock_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      RecommendationBlock recommendationBlock)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.recommendationBlock = recommendationBlock;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateRecommendationBlock_args(UpdateRecommendationBlock_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetRecommendationBlock()) {
        this.recommendationBlock = new RecommendationBlock(other.recommendationBlock);
      }
    }

    public UpdateRecommendationBlock_args deepCopy() {
      return new UpdateRecommendationBlock_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.recommendationBlock = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public UpdateRecommendationBlock_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public UpdateRecommendationBlock_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public RecommendationBlock getRecommendationBlock() {
      return this.recommendationBlock;
    }

    public UpdateRecommendationBlock_args setRecommendationBlock(RecommendationBlock recommendationBlock) {
      this.recommendationBlock = recommendationBlock;
      return this;
    }

    public void unsetRecommendationBlock() {
      this.recommendationBlock = null;
    }

    /** Returns true if field recommendationBlock is set (has been assigned a value) and false otherwise */
    public boolean isSetRecommendationBlock() {
      return this.recommendationBlock != null;
    }

    public void setRecommendationBlockIsSet(boolean value) {
      if (!value) {
        this.recommendationBlock = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case RECOMMENDATION_BLOCK:
        if (value == null) {
          unsetRecommendationBlock();
        } else {
          setRecommendationBlock((RecommendationBlock)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case RECOMMENDATION_BLOCK:
        return getRecommendationBlock();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case RECOMMENDATION_BLOCK:
        return isSetRecommendationBlock();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateRecommendationBlock_args)
        return this.equals((UpdateRecommendationBlock_args)that);
      return false;
    }

    public boolean equals(UpdateRecommendationBlock_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_recommendationBlock = true && this.isSetRecommendationBlock();
      boolean that_present_recommendationBlock = true && that.isSetRecommendationBlock();
      if (this_present_recommendationBlock || that_present_recommendationBlock) {
        if (!(this_present_recommendationBlock && that_present_recommendationBlock))
          return false;
        if (!this.recommendationBlock.equals(that.recommendationBlock))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_recommendationBlock = true && (isSetRecommendationBlock());
      list.add(present_recommendationBlock);
      if (present_recommendationBlock)
        list.add(recommendationBlock);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateRecommendationBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecommendationBlock()).compareTo(other.isSetRecommendationBlock());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecommendationBlock()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendationBlock, other.recommendationBlock);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateRecommendationBlock_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("recommendationBlock:");
      if (this.recommendationBlock == null) {
        sb.append("null");
      } else {
        sb.append(this.recommendationBlock);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (recommendationBlock != null) {
        recommendationBlock.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateRecommendationBlock_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateRecommendationBlock_argsStandardScheme getScheme() {
        return new UpdateRecommendationBlock_argsStandardScheme();
      }
    }

    private static class UpdateRecommendationBlock_argsStandardScheme extends StandardScheme<UpdateRecommendationBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateRecommendationBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RECOMMENDATION_BLOCK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.recommendationBlock = new RecommendationBlock();
                struct.recommendationBlock.read(iprot);
                struct.setRecommendationBlockIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateRecommendationBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.recommendationBlock != null) {
          oprot.writeFieldBegin(RECOMMENDATION_BLOCK_FIELD_DESC);
          struct.recommendationBlock.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateRecommendationBlock_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateRecommendationBlock_argsTupleScheme getScheme() {
        return new UpdateRecommendationBlock_argsTupleScheme();
      }
    }

    private static class UpdateRecommendationBlock_argsTupleScheme extends TupleScheme<UpdateRecommendationBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateRecommendationBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetRecommendationBlock()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetRecommendationBlock()) {
          struct.recommendationBlock.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateRecommendationBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.recommendationBlock = new RecommendationBlock();
          struct.recommendationBlock.read(iprot);
          struct.setRecommendationBlockIsSet(true);
        }
      }
    }

  }

  public static class UpdateRecommendationBlock_result implements org.apache.thrift.TBase<UpdateRecommendationBlock_result, UpdateRecommendationBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateRecommendationBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateRecommendationBlock_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateRecommendationBlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateRecommendationBlock_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateRecommendationBlock_result.class, metaDataMap);
    }

    public UpdateRecommendationBlock_result() {
    }

    public UpdateRecommendationBlock_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateRecommendationBlock_result(UpdateRecommendationBlock_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public UpdateRecommendationBlock_result deepCopy() {
      return new UpdateRecommendationBlock_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public UpdateRecommendationBlock_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateRecommendationBlock_result)
        return this.equals((UpdateRecommendationBlock_result)that);
      return false;
    }

    public boolean equals(UpdateRecommendationBlock_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateRecommendationBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateRecommendationBlock_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateRecommendationBlock_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateRecommendationBlock_resultStandardScheme getScheme() {
        return new UpdateRecommendationBlock_resultStandardScheme();
      }
    }

    private static class UpdateRecommendationBlock_resultStandardScheme extends StandardScheme<UpdateRecommendationBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateRecommendationBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateRecommendationBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateRecommendationBlock_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateRecommendationBlock_resultTupleScheme getScheme() {
        return new UpdateRecommendationBlock_resultTupleScheme();
      }
    }

    private static class UpdateRecommendationBlock_resultTupleScheme extends TupleScheme<UpdateRecommendationBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateRecommendationBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateRecommendationBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class DeleteRecommendationBlock_args implements org.apache.thrift.TBase<DeleteRecommendationBlock_args, DeleteRecommendationBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteRecommendationBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteRecommendationBlock_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RECOMMENDATION_BLOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recommendationBlockId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteRecommendationBlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteRecommendationBlock_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String recommendationBlockId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      RECOMMENDATION_BLOCK_ID((short)3, "recommendationBlockId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // RECOMMENDATION_BLOCK_ID
            return RECOMMENDATION_BLOCK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.RECOMMENDATION_BLOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("recommendationBlockId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteRecommendationBlock_args.class, metaDataMap);
    }

    public DeleteRecommendationBlock_args() {
    }

    public DeleteRecommendationBlock_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String recommendationBlockId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.recommendationBlockId = recommendationBlockId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteRecommendationBlock_args(DeleteRecommendationBlock_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetRecommendationBlockId()) {
        this.recommendationBlockId = other.recommendationBlockId;
      }
    }

    public DeleteRecommendationBlock_args deepCopy() {
      return new DeleteRecommendationBlock_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.recommendationBlockId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public DeleteRecommendationBlock_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public DeleteRecommendationBlock_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getRecommendationBlockId() {
      return this.recommendationBlockId;
    }

    public DeleteRecommendationBlock_args setRecommendationBlockId(String recommendationBlockId) {
      this.recommendationBlockId = recommendationBlockId;
      return this;
    }

    public void unsetRecommendationBlockId() {
      this.recommendationBlockId = null;
    }

    /** Returns true if field recommendationBlockId is set (has been assigned a value) and false otherwise */
    public boolean isSetRecommendationBlockId() {
      return this.recommendationBlockId != null;
    }

    public void setRecommendationBlockIdIsSet(boolean value) {
      if (!value) {
        this.recommendationBlockId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case RECOMMENDATION_BLOCK_ID:
        if (value == null) {
          unsetRecommendationBlockId();
        } else {
          setRecommendationBlockId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case RECOMMENDATION_BLOCK_ID:
        return getRecommendationBlockId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case RECOMMENDATION_BLOCK_ID:
        return isSetRecommendationBlockId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteRecommendationBlock_args)
        return this.equals((DeleteRecommendationBlock_args)that);
      return false;
    }

    public boolean equals(DeleteRecommendationBlock_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_recommendationBlockId = true && this.isSetRecommendationBlockId();
      boolean that_present_recommendationBlockId = true && that.isSetRecommendationBlockId();
      if (this_present_recommendationBlockId || that_present_recommendationBlockId) {
        if (!(this_present_recommendationBlockId && that_present_recommendationBlockId))
          return false;
        if (!this.recommendationBlockId.equals(that.recommendationBlockId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_recommendationBlockId = true && (isSetRecommendationBlockId());
      list.add(present_recommendationBlockId);
      if (present_recommendationBlockId)
        list.add(recommendationBlockId);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteRecommendationBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecommendationBlockId()).compareTo(other.isSetRecommendationBlockId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecommendationBlockId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recommendationBlockId, other.recommendationBlockId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteRecommendationBlock_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("recommendationBlockId:");
      if (this.recommendationBlockId == null) {
        sb.append("null");
      } else {
        sb.append(this.recommendationBlockId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteRecommendationBlock_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteRecommendationBlock_argsStandardScheme getScheme() {
        return new DeleteRecommendationBlock_argsStandardScheme();
      }
    }

    private static class DeleteRecommendationBlock_argsStandardScheme extends StandardScheme<DeleteRecommendationBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteRecommendationBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RECOMMENDATION_BLOCK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.recommendationBlockId = iprot.readString();
                struct.setRecommendationBlockIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteRecommendationBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.recommendationBlockId != null) {
          oprot.writeFieldBegin(RECOMMENDATION_BLOCK_ID_FIELD_DESC);
          oprot.writeString(struct.recommendationBlockId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteRecommendationBlock_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteRecommendationBlock_argsTupleScheme getScheme() {
        return new DeleteRecommendationBlock_argsTupleScheme();
      }
    }

    private static class DeleteRecommendationBlock_argsTupleScheme extends TupleScheme<DeleteRecommendationBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteRecommendationBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetRecommendationBlockId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetRecommendationBlockId()) {
          oprot.writeString(struct.recommendationBlockId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteRecommendationBlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.recommendationBlockId = iprot.readString();
          struct.setRecommendationBlockIdIsSet(true);
        }
      }
    }

  }

  public static class DeleteRecommendationBlock_result implements org.apache.thrift.TBase<DeleteRecommendationBlock_result, DeleteRecommendationBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteRecommendationBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteRecommendationBlock_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteRecommendationBlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteRecommendationBlock_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteRecommendationBlock_result.class, metaDataMap);
    }

    public DeleteRecommendationBlock_result() {
    }

    public DeleteRecommendationBlock_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteRecommendationBlock_result(DeleteRecommendationBlock_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public DeleteRecommendationBlock_result deepCopy() {
      return new DeleteRecommendationBlock_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public DeleteRecommendationBlock_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteRecommendationBlock_result)
        return this.equals((DeleteRecommendationBlock_result)that);
      return false;
    }

    public boolean equals(DeleteRecommendationBlock_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteRecommendationBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteRecommendationBlock_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteRecommendationBlock_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteRecommendationBlock_resultStandardScheme getScheme() {
        return new DeleteRecommendationBlock_resultStandardScheme();
      }
    }

    private static class DeleteRecommendationBlock_resultStandardScheme extends StandardScheme<DeleteRecommendationBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteRecommendationBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteRecommendationBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteRecommendationBlock_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteRecommendationBlock_resultTupleScheme getScheme() {
        return new DeleteRecommendationBlock_resultTupleScheme();
      }
    }

    private static class DeleteRecommendationBlock_resultTupleScheme extends TupleScheme<DeleteRecommendationBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteRecommendationBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteRecommendationBlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetDataSources_args implements org.apache.thrift.TBase<GetDataSources_args, GetDataSources_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetDataSources_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetDataSources_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetDataSources_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetDataSources_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetDataSources_args.class, metaDataMap);
    }

    public GetDataSources_args() {
    }

    public GetDataSources_args(
      Authentication authentication,
      ConfigurationVersion configuration)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetDataSources_args(GetDataSources_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
    }

    public GetDataSources_args deepCopy() {
      return new GetDataSources_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetDataSources_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetDataSources_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetDataSources_args)
        return this.equals((GetDataSources_args)that);
      return false;
    }

    public boolean equals(GetDataSources_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetDataSources_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetDataSources_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetDataSources_argsStandardSchemeFactory implements SchemeFactory {
      public GetDataSources_argsStandardScheme getScheme() {
        return new GetDataSources_argsStandardScheme();
      }
    }

    private static class GetDataSources_argsStandardScheme extends StandardScheme<GetDataSources_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetDataSources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetDataSources_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetDataSources_argsTupleSchemeFactory implements SchemeFactory {
      public GetDataSources_argsTupleScheme getScheme() {
        return new GetDataSources_argsTupleScheme();
      }
    }

    private static class GetDataSources_argsTupleScheme extends TupleScheme<GetDataSources_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetDataSources_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetDataSources_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
      }
    }

  }

  public static class GetDataSources_result implements org.apache.thrift.TBase<GetDataSources_result, GetDataSources_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetDataSources_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetDataSources_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetDataSources_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetDataSources_resultTupleSchemeFactory());
    }

    public Map<String,DataSource> success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSource.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetDataSources_result.class, metaDataMap);
    }

    public GetDataSources_result() {
    }

    public GetDataSources_result(
      Map<String,DataSource> success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetDataSources_result(GetDataSources_result other) {
      if (other.isSetSuccess()) {
        Map<String,DataSource> __this__success = new HashMap<String,DataSource>(other.success.size());
        for (Map.Entry<String, DataSource> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          DataSource other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          DataSource __this__success_copy_value = new DataSource(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetDataSources_result deepCopy() {
      return new GetDataSources_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, DataSource val) {
      if (this.success == null) {
        this.success = new HashMap<String,DataSource>();
      }
      this.success.put(key, val);
    }

    public Map<String,DataSource> getSuccess() {
      return this.success;
    }

    public GetDataSources_result setSuccess(Map<String,DataSource> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetDataSources_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,DataSource>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetDataSources_result)
        return this.equals((GetDataSources_result)that);
      return false;
    }

    public boolean equals(GetDataSources_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetDataSources_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetDataSources_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetDataSources_resultStandardSchemeFactory implements SchemeFactory {
      public GetDataSources_resultStandardScheme getScheme() {
        return new GetDataSources_resultStandardScheme();
      }
    }

    private static class GetDataSources_resultStandardScheme extends StandardScheme<GetDataSources_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetDataSources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map384 = iprot.readMapBegin();
                  struct.success = new HashMap<String,DataSource>(2*_map384.size);
                  String _key385;
                  DataSource _val386;
                  for (int _i387 = 0; _i387 < _map384.size; ++_i387)
                  {
                    _key385 = iprot.readString();
                    _val386 = new DataSource();
                    _val386.read(iprot);
                    struct.success.put(_key385, _val386);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetDataSources_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, DataSource> _iter388 : struct.success.entrySet())
            {
              oprot.writeString(_iter388.getKey());
              _iter388.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetDataSources_resultTupleSchemeFactory implements SchemeFactory {
      public GetDataSources_resultTupleScheme getScheme() {
        return new GetDataSources_resultTupleScheme();
      }
    }

    private static class GetDataSources_resultTupleScheme extends TupleScheme<GetDataSources_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetDataSources_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, DataSource> _iter389 : struct.success.entrySet())
            {
              oprot.writeString(_iter389.getKey());
              _iter389.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetDataSources_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map390 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,DataSource>(2*_map390.size);
            String _key391;
            DataSource _val392;
            for (int _i393 = 0; _i393 < _map390.size; ++_i393)
            {
              _key391 = iprot.readString();
              _val392 = new DataSource();
              _val392.read(iprot);
              struct.success.put(_key391, _val392);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class CreateDataSource_args implements org.apache.thrift.TBase<CreateDataSource_args, CreateDataSource_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateDataSource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateDataSource_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSourceId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateDataSource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateDataSource_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String dataSourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      DATA_SOURCE_ID((short)3, "dataSourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // DATA_SOURCE_ID
            return DATA_SOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.DATA_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("dataSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateDataSource_args.class, metaDataMap);
    }

    public CreateDataSource_args() {
    }

    public CreateDataSource_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String dataSourceId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.dataSourceId = dataSourceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateDataSource_args(CreateDataSource_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetDataSourceId()) {
        this.dataSourceId = other.dataSourceId;
      }
    }

    public CreateDataSource_args deepCopy() {
      return new CreateDataSource_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.dataSourceId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public CreateDataSource_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public CreateDataSource_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getDataSourceId() {
      return this.dataSourceId;
    }

    public CreateDataSource_args setDataSourceId(String dataSourceId) {
      this.dataSourceId = dataSourceId;
      return this;
    }

    public void unsetDataSourceId() {
      this.dataSourceId = null;
    }

    /** Returns true if field dataSourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDataSourceId() {
      return this.dataSourceId != null;
    }

    public void setDataSourceIdIsSet(boolean value) {
      if (!value) {
        this.dataSourceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case DATA_SOURCE_ID:
        if (value == null) {
          unsetDataSourceId();
        } else {
          setDataSourceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case DATA_SOURCE_ID:
        return getDataSourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case DATA_SOURCE_ID:
        return isSetDataSourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateDataSource_args)
        return this.equals((CreateDataSource_args)that);
      return false;
    }

    public boolean equals(CreateDataSource_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_dataSourceId = true && this.isSetDataSourceId();
      boolean that_present_dataSourceId = true && that.isSetDataSourceId();
      if (this_present_dataSourceId || that_present_dataSourceId) {
        if (!(this_present_dataSourceId && that_present_dataSourceId))
          return false;
        if (!this.dataSourceId.equals(that.dataSourceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_dataSourceId = true && (isSetDataSourceId());
      list.add(present_dataSourceId);
      if (present_dataSourceId)
        list.add(dataSourceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateDataSource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataSourceId()).compareTo(other.isSetDataSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSourceId, other.dataSourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateDataSource_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataSourceId:");
      if (this.dataSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.dataSourceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateDataSource_argsStandardSchemeFactory implements SchemeFactory {
      public CreateDataSource_argsStandardScheme getScheme() {
        return new CreateDataSource_argsStandardScheme();
      }
    }

    private static class CreateDataSource_argsStandardScheme extends StandardScheme<CreateDataSource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateDataSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA_SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataSourceId = iprot.readString();
                struct.setDataSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateDataSource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataSourceId != null) {
          oprot.writeFieldBegin(DATA_SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.dataSourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateDataSource_argsTupleSchemeFactory implements SchemeFactory {
      public CreateDataSource_argsTupleScheme getScheme() {
        return new CreateDataSource_argsTupleScheme();
      }
    }

    private static class CreateDataSource_argsTupleScheme extends TupleScheme<CreateDataSource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateDataSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetDataSourceId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetDataSourceId()) {
          oprot.writeString(struct.dataSourceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateDataSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dataSourceId = iprot.readString();
          struct.setDataSourceIdIsSet(true);
        }
      }
    }

  }

  public static class CreateDataSource_result implements org.apache.thrift.TBase<CreateDataSource_result, CreateDataSource_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateDataSource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateDataSource_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateDataSource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateDataSource_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateDataSource_result.class, metaDataMap);
    }

    public CreateDataSource_result() {
    }

    public CreateDataSource_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateDataSource_result(CreateDataSource_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public CreateDataSource_result deepCopy() {
      return new CreateDataSource_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public CreateDataSource_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateDataSource_result)
        return this.equals((CreateDataSource_result)that);
      return false;
    }

    public boolean equals(CreateDataSource_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateDataSource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateDataSource_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateDataSource_resultStandardSchemeFactory implements SchemeFactory {
      public CreateDataSource_resultStandardScheme getScheme() {
        return new CreateDataSource_resultStandardScheme();
      }
    }

    private static class CreateDataSource_resultStandardScheme extends StandardScheme<CreateDataSource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateDataSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateDataSource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateDataSource_resultTupleSchemeFactory implements SchemeFactory {
      public CreateDataSource_resultTupleScheme getScheme() {
        return new CreateDataSource_resultTupleScheme();
      }
    }

    private static class CreateDataSource_resultTupleScheme extends TupleScheme<CreateDataSource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateDataSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateDataSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class UpdateDataSource_args implements org.apache.thrift.TBase<UpdateDataSource_args, UpdateDataSource_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateDataSource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateDataSource_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSource", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateDataSource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateDataSource_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public DataSource dataSource; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      DATA_SOURCE((short)3, "dataSource");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // DATA_SOURCE
            return DATA_SOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.DATA_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("dataSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataSource.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateDataSource_args.class, metaDataMap);
    }

    public UpdateDataSource_args() {
    }

    public UpdateDataSource_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      DataSource dataSource)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.dataSource = dataSource;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateDataSource_args(UpdateDataSource_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetDataSource()) {
        this.dataSource = new DataSource(other.dataSource);
      }
    }

    public UpdateDataSource_args deepCopy() {
      return new UpdateDataSource_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.dataSource = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public UpdateDataSource_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public UpdateDataSource_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public DataSource getDataSource() {
      return this.dataSource;
    }

    public UpdateDataSource_args setDataSource(DataSource dataSource) {
      this.dataSource = dataSource;
      return this;
    }

    public void unsetDataSource() {
      this.dataSource = null;
    }

    /** Returns true if field dataSource is set (has been assigned a value) and false otherwise */
    public boolean isSetDataSource() {
      return this.dataSource != null;
    }

    public void setDataSourceIsSet(boolean value) {
      if (!value) {
        this.dataSource = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case DATA_SOURCE:
        if (value == null) {
          unsetDataSource();
        } else {
          setDataSource((DataSource)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case DATA_SOURCE:
        return getDataSource();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case DATA_SOURCE:
        return isSetDataSource();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateDataSource_args)
        return this.equals((UpdateDataSource_args)that);
      return false;
    }

    public boolean equals(UpdateDataSource_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_dataSource = true && this.isSetDataSource();
      boolean that_present_dataSource = true && that.isSetDataSource();
      if (this_present_dataSource || that_present_dataSource) {
        if (!(this_present_dataSource && that_present_dataSource))
          return false;
        if (!this.dataSource.equals(that.dataSource))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_dataSource = true && (isSetDataSource());
      list.add(present_dataSource);
      if (present_dataSource)
        list.add(dataSource);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateDataSource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataSource()).compareTo(other.isSetDataSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSource, other.dataSource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateDataSource_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataSource:");
      if (this.dataSource == null) {
        sb.append("null");
      } else {
        sb.append(this.dataSource);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (dataSource != null) {
        dataSource.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateDataSource_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateDataSource_argsStandardScheme getScheme() {
        return new UpdateDataSource_argsStandardScheme();
      }
    }

    private static class UpdateDataSource_argsStandardScheme extends StandardScheme<UpdateDataSource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateDataSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA_SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataSource = new DataSource();
                struct.dataSource.read(iprot);
                struct.setDataSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateDataSource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataSource != null) {
          oprot.writeFieldBegin(DATA_SOURCE_FIELD_DESC);
          struct.dataSource.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateDataSource_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateDataSource_argsTupleScheme getScheme() {
        return new UpdateDataSource_argsTupleScheme();
      }
    }

    private static class UpdateDataSource_argsTupleScheme extends TupleScheme<UpdateDataSource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateDataSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetDataSource()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetDataSource()) {
          struct.dataSource.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateDataSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dataSource = new DataSource();
          struct.dataSource.read(iprot);
          struct.setDataSourceIsSet(true);
        }
      }
    }

  }

  public static class UpdateDataSource_result implements org.apache.thrift.TBase<UpdateDataSource_result, UpdateDataSource_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateDataSource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateDataSource_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateDataSource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateDataSource_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateDataSource_result.class, metaDataMap);
    }

    public UpdateDataSource_result() {
    }

    public UpdateDataSource_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateDataSource_result(UpdateDataSource_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public UpdateDataSource_result deepCopy() {
      return new UpdateDataSource_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public UpdateDataSource_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateDataSource_result)
        return this.equals((UpdateDataSource_result)that);
      return false;
    }

    public boolean equals(UpdateDataSource_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateDataSource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateDataSource_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateDataSource_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateDataSource_resultStandardScheme getScheme() {
        return new UpdateDataSource_resultStandardScheme();
      }
    }

    private static class UpdateDataSource_resultStandardScheme extends StandardScheme<UpdateDataSource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateDataSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateDataSource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateDataSource_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateDataSource_resultTupleScheme getScheme() {
        return new UpdateDataSource_resultTupleScheme();
      }
    }

    private static class UpdateDataSource_resultTupleScheme extends TupleScheme<UpdateDataSource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateDataSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateDataSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class DeleteDataSource_args implements org.apache.thrift.TBase<DeleteDataSource_args, DeleteDataSource_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteDataSource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteDataSource_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSourceId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteDataSource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteDataSource_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String dataSourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      DATA_SOURCE_ID((short)3, "dataSourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // DATA_SOURCE_ID
            return DATA_SOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.DATA_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("dataSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteDataSource_args.class, metaDataMap);
    }

    public DeleteDataSource_args() {
    }

    public DeleteDataSource_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String dataSourceId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.dataSourceId = dataSourceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteDataSource_args(DeleteDataSource_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetDataSourceId()) {
        this.dataSourceId = other.dataSourceId;
      }
    }

    public DeleteDataSource_args deepCopy() {
      return new DeleteDataSource_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.dataSourceId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public DeleteDataSource_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public DeleteDataSource_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getDataSourceId() {
      return this.dataSourceId;
    }

    public DeleteDataSource_args setDataSourceId(String dataSourceId) {
      this.dataSourceId = dataSourceId;
      return this;
    }

    public void unsetDataSourceId() {
      this.dataSourceId = null;
    }

    /** Returns true if field dataSourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDataSourceId() {
      return this.dataSourceId != null;
    }

    public void setDataSourceIdIsSet(boolean value) {
      if (!value) {
        this.dataSourceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case DATA_SOURCE_ID:
        if (value == null) {
          unsetDataSourceId();
        } else {
          setDataSourceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case DATA_SOURCE_ID:
        return getDataSourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case DATA_SOURCE_ID:
        return isSetDataSourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteDataSource_args)
        return this.equals((DeleteDataSource_args)that);
      return false;
    }

    public boolean equals(DeleteDataSource_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_dataSourceId = true && this.isSetDataSourceId();
      boolean that_present_dataSourceId = true && that.isSetDataSourceId();
      if (this_present_dataSourceId || that_present_dataSourceId) {
        if (!(this_present_dataSourceId && that_present_dataSourceId))
          return false;
        if (!this.dataSourceId.equals(that.dataSourceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_dataSourceId = true && (isSetDataSourceId());
      list.add(present_dataSourceId);
      if (present_dataSourceId)
        list.add(dataSourceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteDataSource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataSourceId()).compareTo(other.isSetDataSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSourceId, other.dataSourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteDataSource_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataSourceId:");
      if (this.dataSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.dataSourceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteDataSource_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteDataSource_argsStandardScheme getScheme() {
        return new DeleteDataSource_argsStandardScheme();
      }
    }

    private static class DeleteDataSource_argsStandardScheme extends StandardScheme<DeleteDataSource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteDataSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA_SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataSourceId = iprot.readString();
                struct.setDataSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteDataSource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataSourceId != null) {
          oprot.writeFieldBegin(DATA_SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.dataSourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteDataSource_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteDataSource_argsTupleScheme getScheme() {
        return new DeleteDataSource_argsTupleScheme();
      }
    }

    private static class DeleteDataSource_argsTupleScheme extends TupleScheme<DeleteDataSource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteDataSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetDataSourceId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetDataSourceId()) {
          oprot.writeString(struct.dataSourceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteDataSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dataSourceId = iprot.readString();
          struct.setDataSourceIdIsSet(true);
        }
      }
    }

  }

  public static class DeleteDataSource_result implements org.apache.thrift.TBase<DeleteDataSource_result, DeleteDataSource_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteDataSource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteDataSource_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteDataSource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteDataSource_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteDataSource_result.class, metaDataMap);
    }

    public DeleteDataSource_result() {
    }

    public DeleteDataSource_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteDataSource_result(DeleteDataSource_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public DeleteDataSource_result deepCopy() {
      return new DeleteDataSource_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public DeleteDataSource_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteDataSource_result)
        return this.equals((DeleteDataSource_result)that);
      return false;
    }

    public boolean equals(DeleteDataSource_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteDataSource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteDataSource_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteDataSource_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteDataSource_resultStandardScheme getScheme() {
        return new DeleteDataSource_resultStandardScheme();
      }
    }

    private static class DeleteDataSource_resultStandardScheme extends StandardScheme<DeleteDataSource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteDataSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteDataSource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteDataSource_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteDataSource_resultTupleScheme getScheme() {
        return new DeleteDataSource_resultTupleScheme();
      }
    }

    private static class DeleteDataSource_resultTupleScheme extends TupleScheme<DeleteDataSource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteDataSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteDataSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetDataExports_args implements org.apache.thrift.TBase<GetDataExports_args, GetDataExports_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetDataExports_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetDataExports_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetDataExports_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetDataExports_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetDataExports_args.class, metaDataMap);
    }

    public GetDataExports_args() {
    }

    public GetDataExports_args(
      Authentication authentication,
      ConfigurationVersion configuration)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetDataExports_args(GetDataExports_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
    }

    public GetDataExports_args deepCopy() {
      return new GetDataExports_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetDataExports_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetDataExports_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetDataExports_args)
        return this.equals((GetDataExports_args)that);
      return false;
    }

    public boolean equals(GetDataExports_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetDataExports_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetDataExports_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetDataExports_argsStandardSchemeFactory implements SchemeFactory {
      public GetDataExports_argsStandardScheme getScheme() {
        return new GetDataExports_argsStandardScheme();
      }
    }

    private static class GetDataExports_argsStandardScheme extends StandardScheme<GetDataExports_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetDataExports_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetDataExports_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetDataExports_argsTupleSchemeFactory implements SchemeFactory {
      public GetDataExports_argsTupleScheme getScheme() {
        return new GetDataExports_argsTupleScheme();
      }
    }

    private static class GetDataExports_argsTupleScheme extends TupleScheme<GetDataExports_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetDataExports_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetDataExports_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
      }
    }

  }

  public static class GetDataExports_result implements org.apache.thrift.TBase<GetDataExports_result, GetDataExports_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetDataExports_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetDataExports_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetDataExports_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetDataExports_resultTupleSchemeFactory());
    }

    public Map<String,DataExport> success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataExport.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetDataExports_result.class, metaDataMap);
    }

    public GetDataExports_result() {
    }

    public GetDataExports_result(
      Map<String,DataExport> success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetDataExports_result(GetDataExports_result other) {
      if (other.isSetSuccess()) {
        Map<String,DataExport> __this__success = new HashMap<String,DataExport>(other.success.size());
        for (Map.Entry<String, DataExport> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          DataExport other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          DataExport __this__success_copy_value = new DataExport(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetDataExports_result deepCopy() {
      return new GetDataExports_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, DataExport val) {
      if (this.success == null) {
        this.success = new HashMap<String,DataExport>();
      }
      this.success.put(key, val);
    }

    public Map<String,DataExport> getSuccess() {
      return this.success;
    }

    public GetDataExports_result setSuccess(Map<String,DataExport> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetDataExports_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,DataExport>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetDataExports_result)
        return this.equals((GetDataExports_result)that);
      return false;
    }

    public boolean equals(GetDataExports_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetDataExports_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetDataExports_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetDataExports_resultStandardSchemeFactory implements SchemeFactory {
      public GetDataExports_resultStandardScheme getScheme() {
        return new GetDataExports_resultStandardScheme();
      }
    }

    private static class GetDataExports_resultStandardScheme extends StandardScheme<GetDataExports_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetDataExports_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map394 = iprot.readMapBegin();
                  struct.success = new HashMap<String,DataExport>(2*_map394.size);
                  String _key395;
                  DataExport _val396;
                  for (int _i397 = 0; _i397 < _map394.size; ++_i397)
                  {
                    _key395 = iprot.readString();
                    _val396 = new DataExport();
                    _val396.read(iprot);
                    struct.success.put(_key395, _val396);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetDataExports_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, DataExport> _iter398 : struct.success.entrySet())
            {
              oprot.writeString(_iter398.getKey());
              _iter398.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetDataExports_resultTupleSchemeFactory implements SchemeFactory {
      public GetDataExports_resultTupleScheme getScheme() {
        return new GetDataExports_resultTupleScheme();
      }
    }

    private static class GetDataExports_resultTupleScheme extends TupleScheme<GetDataExports_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetDataExports_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, DataExport> _iter399 : struct.success.entrySet())
            {
              oprot.writeString(_iter399.getKey());
              _iter399.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetDataExports_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map400 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,DataExport>(2*_map400.size);
            String _key401;
            DataExport _val402;
            for (int _i403 = 0; _i403 < _map400.size; ++_i403)
            {
              _key401 = iprot.readString();
              _val402 = new DataExport();
              _val402.read(iprot);
              struct.success.put(_key401, _val402);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class CreateDataExport_args implements org.apache.thrift.TBase<CreateDataExport_args, CreateDataExport_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateDataExport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateDataExport_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_EXPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataExportId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateDataExport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateDataExport_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String dataExportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      DATA_EXPORT_ID((short)3, "dataExportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // DATA_EXPORT_ID
            return DATA_EXPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.DATA_EXPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("dataExportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateDataExport_args.class, metaDataMap);
    }

    public CreateDataExport_args() {
    }

    public CreateDataExport_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String dataExportId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.dataExportId = dataExportId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateDataExport_args(CreateDataExport_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetDataExportId()) {
        this.dataExportId = other.dataExportId;
      }
    }

    public CreateDataExport_args deepCopy() {
      return new CreateDataExport_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.dataExportId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public CreateDataExport_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public CreateDataExport_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getDataExportId() {
      return this.dataExportId;
    }

    public CreateDataExport_args setDataExportId(String dataExportId) {
      this.dataExportId = dataExportId;
      return this;
    }

    public void unsetDataExportId() {
      this.dataExportId = null;
    }

    /** Returns true if field dataExportId is set (has been assigned a value) and false otherwise */
    public boolean isSetDataExportId() {
      return this.dataExportId != null;
    }

    public void setDataExportIdIsSet(boolean value) {
      if (!value) {
        this.dataExportId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case DATA_EXPORT_ID:
        if (value == null) {
          unsetDataExportId();
        } else {
          setDataExportId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case DATA_EXPORT_ID:
        return getDataExportId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case DATA_EXPORT_ID:
        return isSetDataExportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateDataExport_args)
        return this.equals((CreateDataExport_args)that);
      return false;
    }

    public boolean equals(CreateDataExport_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_dataExportId = true && this.isSetDataExportId();
      boolean that_present_dataExportId = true && that.isSetDataExportId();
      if (this_present_dataExportId || that_present_dataExportId) {
        if (!(this_present_dataExportId && that_present_dataExportId))
          return false;
        if (!this.dataExportId.equals(that.dataExportId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_dataExportId = true && (isSetDataExportId());
      list.add(present_dataExportId);
      if (present_dataExportId)
        list.add(dataExportId);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateDataExport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataExportId()).compareTo(other.isSetDataExportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataExportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataExportId, other.dataExportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateDataExport_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataExportId:");
      if (this.dataExportId == null) {
        sb.append("null");
      } else {
        sb.append(this.dataExportId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateDataExport_argsStandardSchemeFactory implements SchemeFactory {
      public CreateDataExport_argsStandardScheme getScheme() {
        return new CreateDataExport_argsStandardScheme();
      }
    }

    private static class CreateDataExport_argsStandardScheme extends StandardScheme<CreateDataExport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateDataExport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA_EXPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataExportId = iprot.readString();
                struct.setDataExportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateDataExport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataExportId != null) {
          oprot.writeFieldBegin(DATA_EXPORT_ID_FIELD_DESC);
          oprot.writeString(struct.dataExportId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateDataExport_argsTupleSchemeFactory implements SchemeFactory {
      public CreateDataExport_argsTupleScheme getScheme() {
        return new CreateDataExport_argsTupleScheme();
      }
    }

    private static class CreateDataExport_argsTupleScheme extends TupleScheme<CreateDataExport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateDataExport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetDataExportId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetDataExportId()) {
          oprot.writeString(struct.dataExportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateDataExport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dataExportId = iprot.readString();
          struct.setDataExportIdIsSet(true);
        }
      }
    }

  }

  public static class CreateDataExport_result implements org.apache.thrift.TBase<CreateDataExport_result, CreateDataExport_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateDataExport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateDataExport_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateDataExport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateDataExport_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateDataExport_result.class, metaDataMap);
    }

    public CreateDataExport_result() {
    }

    public CreateDataExport_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateDataExport_result(CreateDataExport_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public CreateDataExport_result deepCopy() {
      return new CreateDataExport_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public CreateDataExport_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateDataExport_result)
        return this.equals((CreateDataExport_result)that);
      return false;
    }

    public boolean equals(CreateDataExport_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateDataExport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateDataExport_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateDataExport_resultStandardSchemeFactory implements SchemeFactory {
      public CreateDataExport_resultStandardScheme getScheme() {
        return new CreateDataExport_resultStandardScheme();
      }
    }

    private static class CreateDataExport_resultStandardScheme extends StandardScheme<CreateDataExport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateDataExport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateDataExport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateDataExport_resultTupleSchemeFactory implements SchemeFactory {
      public CreateDataExport_resultTupleScheme getScheme() {
        return new CreateDataExport_resultTupleScheme();
      }
    }

    private static class CreateDataExport_resultTupleScheme extends TupleScheme<CreateDataExport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateDataExport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateDataExport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class UpdateDataExport_args implements org.apache.thrift.TBase<UpdateDataExport_args, UpdateDataExport_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateDataExport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateDataExport_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_EXPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("dataExport", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateDataExport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateDataExport_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public DataExport dataExport; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      DATA_EXPORT((short)3, "dataExport");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // DATA_EXPORT
            return DATA_EXPORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.DATA_EXPORT, new org.apache.thrift.meta_data.FieldMetaData("dataExport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataExport.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateDataExport_args.class, metaDataMap);
    }

    public UpdateDataExport_args() {
    }

    public UpdateDataExport_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      DataExport dataExport)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.dataExport = dataExport;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateDataExport_args(UpdateDataExport_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetDataExport()) {
        this.dataExport = new DataExport(other.dataExport);
      }
    }

    public UpdateDataExport_args deepCopy() {
      return new UpdateDataExport_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.dataExport = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public UpdateDataExport_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public UpdateDataExport_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public DataExport getDataExport() {
      return this.dataExport;
    }

    public UpdateDataExport_args setDataExport(DataExport dataExport) {
      this.dataExport = dataExport;
      return this;
    }

    public void unsetDataExport() {
      this.dataExport = null;
    }

    /** Returns true if field dataExport is set (has been assigned a value) and false otherwise */
    public boolean isSetDataExport() {
      return this.dataExport != null;
    }

    public void setDataExportIsSet(boolean value) {
      if (!value) {
        this.dataExport = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case DATA_EXPORT:
        if (value == null) {
          unsetDataExport();
        } else {
          setDataExport((DataExport)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case DATA_EXPORT:
        return getDataExport();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case DATA_EXPORT:
        return isSetDataExport();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateDataExport_args)
        return this.equals((UpdateDataExport_args)that);
      return false;
    }

    public boolean equals(UpdateDataExport_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_dataExport = true && this.isSetDataExport();
      boolean that_present_dataExport = true && that.isSetDataExport();
      if (this_present_dataExport || that_present_dataExport) {
        if (!(this_present_dataExport && that_present_dataExport))
          return false;
        if (!this.dataExport.equals(that.dataExport))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_dataExport = true && (isSetDataExport());
      list.add(present_dataExport);
      if (present_dataExport)
        list.add(dataExport);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateDataExport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataExport()).compareTo(other.isSetDataExport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataExport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataExport, other.dataExport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateDataExport_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataExport:");
      if (this.dataExport == null) {
        sb.append("null");
      } else {
        sb.append(this.dataExport);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (dataExport != null) {
        dataExport.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateDataExport_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateDataExport_argsStandardScheme getScheme() {
        return new UpdateDataExport_argsStandardScheme();
      }
    }

    private static class UpdateDataExport_argsStandardScheme extends StandardScheme<UpdateDataExport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateDataExport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA_EXPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataExport = new DataExport();
                struct.dataExport.read(iprot);
                struct.setDataExportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateDataExport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataExport != null) {
          oprot.writeFieldBegin(DATA_EXPORT_FIELD_DESC);
          struct.dataExport.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateDataExport_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateDataExport_argsTupleScheme getScheme() {
        return new UpdateDataExport_argsTupleScheme();
      }
    }

    private static class UpdateDataExport_argsTupleScheme extends TupleScheme<UpdateDataExport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateDataExport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetDataExport()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetDataExport()) {
          struct.dataExport.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateDataExport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dataExport = new DataExport();
          struct.dataExport.read(iprot);
          struct.setDataExportIsSet(true);
        }
      }
    }

  }

  public static class UpdateDataExport_result implements org.apache.thrift.TBase<UpdateDataExport_result, UpdateDataExport_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateDataExport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateDataExport_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateDataExport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateDataExport_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateDataExport_result.class, metaDataMap);
    }

    public UpdateDataExport_result() {
    }

    public UpdateDataExport_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateDataExport_result(UpdateDataExport_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public UpdateDataExport_result deepCopy() {
      return new UpdateDataExport_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public UpdateDataExport_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateDataExport_result)
        return this.equals((UpdateDataExport_result)that);
      return false;
    }

    public boolean equals(UpdateDataExport_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateDataExport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateDataExport_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateDataExport_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateDataExport_resultStandardScheme getScheme() {
        return new UpdateDataExport_resultStandardScheme();
      }
    }

    private static class UpdateDataExport_resultStandardScheme extends StandardScheme<UpdateDataExport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateDataExport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateDataExport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateDataExport_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateDataExport_resultTupleScheme getScheme() {
        return new UpdateDataExport_resultTupleScheme();
      }
    }

    private static class UpdateDataExport_resultTupleScheme extends TupleScheme<UpdateDataExport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateDataExport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateDataExport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class DeleteDataExport_args implements org.apache.thrift.TBase<DeleteDataExport_args, DeleteDataExport_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteDataExport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteDataExport_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_EXPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataExportId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteDataExport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteDataExport_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String dataExportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      DATA_EXPORT_ID((short)3, "dataExportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // DATA_EXPORT_ID
            return DATA_EXPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.DATA_EXPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("dataExportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteDataExport_args.class, metaDataMap);
    }

    public DeleteDataExport_args() {
    }

    public DeleteDataExport_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String dataExportId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.dataExportId = dataExportId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteDataExport_args(DeleteDataExport_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetDataExportId()) {
        this.dataExportId = other.dataExportId;
      }
    }

    public DeleteDataExport_args deepCopy() {
      return new DeleteDataExport_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.dataExportId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public DeleteDataExport_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public DeleteDataExport_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getDataExportId() {
      return this.dataExportId;
    }

    public DeleteDataExport_args setDataExportId(String dataExportId) {
      this.dataExportId = dataExportId;
      return this;
    }

    public void unsetDataExportId() {
      this.dataExportId = null;
    }

    /** Returns true if field dataExportId is set (has been assigned a value) and false otherwise */
    public boolean isSetDataExportId() {
      return this.dataExportId != null;
    }

    public void setDataExportIdIsSet(boolean value) {
      if (!value) {
        this.dataExportId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case DATA_EXPORT_ID:
        if (value == null) {
          unsetDataExportId();
        } else {
          setDataExportId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case DATA_EXPORT_ID:
        return getDataExportId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case DATA_EXPORT_ID:
        return isSetDataExportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteDataExport_args)
        return this.equals((DeleteDataExport_args)that);
      return false;
    }

    public boolean equals(DeleteDataExport_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_dataExportId = true && this.isSetDataExportId();
      boolean that_present_dataExportId = true && that.isSetDataExportId();
      if (this_present_dataExportId || that_present_dataExportId) {
        if (!(this_present_dataExportId && that_present_dataExportId))
          return false;
        if (!this.dataExportId.equals(that.dataExportId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_dataExportId = true && (isSetDataExportId());
      list.add(present_dataExportId);
      if (present_dataExportId)
        list.add(dataExportId);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteDataExport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataExportId()).compareTo(other.isSetDataExportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataExportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataExportId, other.dataExportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteDataExport_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataExportId:");
      if (this.dataExportId == null) {
        sb.append("null");
      } else {
        sb.append(this.dataExportId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteDataExport_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteDataExport_argsStandardScheme getScheme() {
        return new DeleteDataExport_argsStandardScheme();
      }
    }

    private static class DeleteDataExport_argsStandardScheme extends StandardScheme<DeleteDataExport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteDataExport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA_EXPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataExportId = iprot.readString();
                struct.setDataExportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteDataExport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataExportId != null) {
          oprot.writeFieldBegin(DATA_EXPORT_ID_FIELD_DESC);
          oprot.writeString(struct.dataExportId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteDataExport_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteDataExport_argsTupleScheme getScheme() {
        return new DeleteDataExport_argsTupleScheme();
      }
    }

    private static class DeleteDataExport_argsTupleScheme extends TupleScheme<DeleteDataExport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteDataExport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetDataExportId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetDataExportId()) {
          oprot.writeString(struct.dataExportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteDataExport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dataExportId = iprot.readString();
          struct.setDataExportIdIsSet(true);
        }
      }
    }

  }

  public static class DeleteDataExport_result implements org.apache.thrift.TBase<DeleteDataExport_result, DeleteDataExport_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteDataExport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteDataExport_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteDataExport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteDataExport_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteDataExport_result.class, metaDataMap);
    }

    public DeleteDataExport_result() {
    }

    public DeleteDataExport_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteDataExport_result(DeleteDataExport_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public DeleteDataExport_result deepCopy() {
      return new DeleteDataExport_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public DeleteDataExport_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteDataExport_result)
        return this.equals((DeleteDataExport_result)that);
      return false;
    }

    public boolean equals(DeleteDataExport_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteDataExport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteDataExport_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteDataExport_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteDataExport_resultStandardScheme getScheme() {
        return new DeleteDataExport_resultStandardScheme();
      }
    }

    private static class DeleteDataExport_resultStandardScheme extends StandardScheme<DeleteDataExport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteDataExport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteDataExport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteDataExport_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteDataExport_resultTupleScheme getScheme() {
        return new DeleteDataExport_resultTupleScheme();
      }
    }

    private static class DeleteDataExport_resultTupleScheme extends TupleScheme<DeleteDataExport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteDataExport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteDataExport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetReferenceCSVFileDataSources_args implements org.apache.thrift.TBase<GetReferenceCSVFileDataSources_args, GetReferenceCSVFileDataSources_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetReferenceCSVFileDataSources_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetReferenceCSVFileDataSources_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetReferenceCSVFileDataSources_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetReferenceCSVFileDataSources_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetReferenceCSVFileDataSources_args.class, metaDataMap);
    }

    public GetReferenceCSVFileDataSources_args() {
    }

    public GetReferenceCSVFileDataSources_args(
      Authentication authentication,
      ConfigurationVersion configuration)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetReferenceCSVFileDataSources_args(GetReferenceCSVFileDataSources_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
    }

    public GetReferenceCSVFileDataSources_args deepCopy() {
      return new GetReferenceCSVFileDataSources_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetReferenceCSVFileDataSources_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetReferenceCSVFileDataSources_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetReferenceCSVFileDataSources_args)
        return this.equals((GetReferenceCSVFileDataSources_args)that);
      return false;
    }

    public boolean equals(GetReferenceCSVFileDataSources_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetReferenceCSVFileDataSources_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetReferenceCSVFileDataSources_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetReferenceCSVFileDataSources_argsStandardSchemeFactory implements SchemeFactory {
      public GetReferenceCSVFileDataSources_argsStandardScheme getScheme() {
        return new GetReferenceCSVFileDataSources_argsStandardScheme();
      }
    }

    private static class GetReferenceCSVFileDataSources_argsStandardScheme extends StandardScheme<GetReferenceCSVFileDataSources_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetReferenceCSVFileDataSources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetReferenceCSVFileDataSources_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetReferenceCSVFileDataSources_argsTupleSchemeFactory implements SchemeFactory {
      public GetReferenceCSVFileDataSources_argsTupleScheme getScheme() {
        return new GetReferenceCSVFileDataSources_argsTupleScheme();
      }
    }

    private static class GetReferenceCSVFileDataSources_argsTupleScheme extends TupleScheme<GetReferenceCSVFileDataSources_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetReferenceCSVFileDataSources_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetReferenceCSVFileDataSources_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
      }
    }

  }

  public static class GetReferenceCSVFileDataSources_result implements org.apache.thrift.TBase<GetReferenceCSVFileDataSources_result, GetReferenceCSVFileDataSources_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetReferenceCSVFileDataSources_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetReferenceCSVFileDataSources_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetReferenceCSVFileDataSources_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetReferenceCSVFileDataSources_resultTupleSchemeFactory());
    }

    public Map<String,ReferenceCSVDataSource> success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReferenceCSVDataSource.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetReferenceCSVFileDataSources_result.class, metaDataMap);
    }

    public GetReferenceCSVFileDataSources_result() {
    }

    public GetReferenceCSVFileDataSources_result(
      Map<String,ReferenceCSVDataSource> success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetReferenceCSVFileDataSources_result(GetReferenceCSVFileDataSources_result other) {
      if (other.isSetSuccess()) {
        Map<String,ReferenceCSVDataSource> __this__success = new HashMap<String,ReferenceCSVDataSource>(other.success.size());
        for (Map.Entry<String, ReferenceCSVDataSource> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          ReferenceCSVDataSource other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          ReferenceCSVDataSource __this__success_copy_value = new ReferenceCSVDataSource(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetReferenceCSVFileDataSources_result deepCopy() {
      return new GetReferenceCSVFileDataSources_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, ReferenceCSVDataSource val) {
      if (this.success == null) {
        this.success = new HashMap<String,ReferenceCSVDataSource>();
      }
      this.success.put(key, val);
    }

    public Map<String,ReferenceCSVDataSource> getSuccess() {
      return this.success;
    }

    public GetReferenceCSVFileDataSources_result setSuccess(Map<String,ReferenceCSVDataSource> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetReferenceCSVFileDataSources_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,ReferenceCSVDataSource>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetReferenceCSVFileDataSources_result)
        return this.equals((GetReferenceCSVFileDataSources_result)that);
      return false;
    }

    public boolean equals(GetReferenceCSVFileDataSources_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetReferenceCSVFileDataSources_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetReferenceCSVFileDataSources_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetReferenceCSVFileDataSources_resultStandardSchemeFactory implements SchemeFactory {
      public GetReferenceCSVFileDataSources_resultStandardScheme getScheme() {
        return new GetReferenceCSVFileDataSources_resultStandardScheme();
      }
    }

    private static class GetReferenceCSVFileDataSources_resultStandardScheme extends StandardScheme<GetReferenceCSVFileDataSources_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetReferenceCSVFileDataSources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map404 = iprot.readMapBegin();
                  struct.success = new HashMap<String,ReferenceCSVDataSource>(2*_map404.size);
                  String _key405;
                  ReferenceCSVDataSource _val406;
                  for (int _i407 = 0; _i407 < _map404.size; ++_i407)
                  {
                    _key405 = iprot.readString();
                    _val406 = new ReferenceCSVDataSource();
                    _val406.read(iprot);
                    struct.success.put(_key405, _val406);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetReferenceCSVFileDataSources_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, ReferenceCSVDataSource> _iter408 : struct.success.entrySet())
            {
              oprot.writeString(_iter408.getKey());
              _iter408.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetReferenceCSVFileDataSources_resultTupleSchemeFactory implements SchemeFactory {
      public GetReferenceCSVFileDataSources_resultTupleScheme getScheme() {
        return new GetReferenceCSVFileDataSources_resultTupleScheme();
      }
    }

    private static class GetReferenceCSVFileDataSources_resultTupleScheme extends TupleScheme<GetReferenceCSVFileDataSources_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetReferenceCSVFileDataSources_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, ReferenceCSVDataSource> _iter409 : struct.success.entrySet())
            {
              oprot.writeString(_iter409.getKey());
              _iter409.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetReferenceCSVFileDataSources_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map410 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,ReferenceCSVDataSource>(2*_map410.size);
            String _key411;
            ReferenceCSVDataSource _val412;
            for (int _i413 = 0; _i413 < _map410.size; ++_i413)
            {
              _key411 = iprot.readString();
              _val412 = new ReferenceCSVDataSource();
              _val412.read(iprot);
              struct.success.put(_key411, _val412);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class CreateReferenceCSVDataSource_args implements org.apache.thrift.TBase<CreateReferenceCSVDataSource_args, CreateReferenceCSVDataSource_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateReferenceCSVDataSource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateReferenceCSVDataSource_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSourceId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateReferenceCSVDataSource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateReferenceCSVDataSource_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String dataSourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      DATA_SOURCE_ID((short)3, "dataSourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // DATA_SOURCE_ID
            return DATA_SOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.DATA_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("dataSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateReferenceCSVDataSource_args.class, metaDataMap);
    }

    public CreateReferenceCSVDataSource_args() {
    }

    public CreateReferenceCSVDataSource_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String dataSourceId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.dataSourceId = dataSourceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateReferenceCSVDataSource_args(CreateReferenceCSVDataSource_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetDataSourceId()) {
        this.dataSourceId = other.dataSourceId;
      }
    }

    public CreateReferenceCSVDataSource_args deepCopy() {
      return new CreateReferenceCSVDataSource_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.dataSourceId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public CreateReferenceCSVDataSource_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public CreateReferenceCSVDataSource_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getDataSourceId() {
      return this.dataSourceId;
    }

    public CreateReferenceCSVDataSource_args setDataSourceId(String dataSourceId) {
      this.dataSourceId = dataSourceId;
      return this;
    }

    public void unsetDataSourceId() {
      this.dataSourceId = null;
    }

    /** Returns true if field dataSourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDataSourceId() {
      return this.dataSourceId != null;
    }

    public void setDataSourceIdIsSet(boolean value) {
      if (!value) {
        this.dataSourceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case DATA_SOURCE_ID:
        if (value == null) {
          unsetDataSourceId();
        } else {
          setDataSourceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case DATA_SOURCE_ID:
        return getDataSourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case DATA_SOURCE_ID:
        return isSetDataSourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateReferenceCSVDataSource_args)
        return this.equals((CreateReferenceCSVDataSource_args)that);
      return false;
    }

    public boolean equals(CreateReferenceCSVDataSource_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_dataSourceId = true && this.isSetDataSourceId();
      boolean that_present_dataSourceId = true && that.isSetDataSourceId();
      if (this_present_dataSourceId || that_present_dataSourceId) {
        if (!(this_present_dataSourceId && that_present_dataSourceId))
          return false;
        if (!this.dataSourceId.equals(that.dataSourceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_dataSourceId = true && (isSetDataSourceId());
      list.add(present_dataSourceId);
      if (present_dataSourceId)
        list.add(dataSourceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateReferenceCSVDataSource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataSourceId()).compareTo(other.isSetDataSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSourceId, other.dataSourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateReferenceCSVDataSource_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataSourceId:");
      if (this.dataSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.dataSourceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateReferenceCSVDataSource_argsStandardSchemeFactory implements SchemeFactory {
      public CreateReferenceCSVDataSource_argsStandardScheme getScheme() {
        return new CreateReferenceCSVDataSource_argsStandardScheme();
      }
    }

    private static class CreateReferenceCSVDataSource_argsStandardScheme extends StandardScheme<CreateReferenceCSVDataSource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateReferenceCSVDataSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA_SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataSourceId = iprot.readString();
                struct.setDataSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateReferenceCSVDataSource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataSourceId != null) {
          oprot.writeFieldBegin(DATA_SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.dataSourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateReferenceCSVDataSource_argsTupleSchemeFactory implements SchemeFactory {
      public CreateReferenceCSVDataSource_argsTupleScheme getScheme() {
        return new CreateReferenceCSVDataSource_argsTupleScheme();
      }
    }

    private static class CreateReferenceCSVDataSource_argsTupleScheme extends TupleScheme<CreateReferenceCSVDataSource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateReferenceCSVDataSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetDataSourceId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetDataSourceId()) {
          oprot.writeString(struct.dataSourceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateReferenceCSVDataSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dataSourceId = iprot.readString();
          struct.setDataSourceIdIsSet(true);
        }
      }
    }

  }

  public static class CreateReferenceCSVDataSource_result implements org.apache.thrift.TBase<CreateReferenceCSVDataSource_result, CreateReferenceCSVDataSource_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateReferenceCSVDataSource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateReferenceCSVDataSource_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateReferenceCSVDataSource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateReferenceCSVDataSource_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateReferenceCSVDataSource_result.class, metaDataMap);
    }

    public CreateReferenceCSVDataSource_result() {
    }

    public CreateReferenceCSVDataSource_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateReferenceCSVDataSource_result(CreateReferenceCSVDataSource_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public CreateReferenceCSVDataSource_result deepCopy() {
      return new CreateReferenceCSVDataSource_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public CreateReferenceCSVDataSource_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateReferenceCSVDataSource_result)
        return this.equals((CreateReferenceCSVDataSource_result)that);
      return false;
    }

    public boolean equals(CreateReferenceCSVDataSource_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateReferenceCSVDataSource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateReferenceCSVDataSource_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateReferenceCSVDataSource_resultStandardSchemeFactory implements SchemeFactory {
      public CreateReferenceCSVDataSource_resultStandardScheme getScheme() {
        return new CreateReferenceCSVDataSource_resultStandardScheme();
      }
    }

    private static class CreateReferenceCSVDataSource_resultStandardScheme extends StandardScheme<CreateReferenceCSVDataSource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateReferenceCSVDataSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateReferenceCSVDataSource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateReferenceCSVDataSource_resultTupleSchemeFactory implements SchemeFactory {
      public CreateReferenceCSVDataSource_resultTupleScheme getScheme() {
        return new CreateReferenceCSVDataSource_resultTupleScheme();
      }
    }

    private static class CreateReferenceCSVDataSource_resultTupleScheme extends TupleScheme<CreateReferenceCSVDataSource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateReferenceCSVDataSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateReferenceCSVDataSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class UpdateReferenceCSVDataSource_args implements org.apache.thrift.TBase<UpdateReferenceCSVDataSource_args, UpdateReferenceCSVDataSource_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateReferenceCSVDataSource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateReferenceCSVDataSource_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSource", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateReferenceCSVDataSource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateReferenceCSVDataSource_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public ReferenceCSVDataSource dataSource; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      DATA_SOURCE((short)3, "dataSource");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // DATA_SOURCE
            return DATA_SOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.DATA_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("dataSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReferenceCSVDataSource.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateReferenceCSVDataSource_args.class, metaDataMap);
    }

    public UpdateReferenceCSVDataSource_args() {
    }

    public UpdateReferenceCSVDataSource_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      ReferenceCSVDataSource dataSource)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.dataSource = dataSource;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateReferenceCSVDataSource_args(UpdateReferenceCSVDataSource_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetDataSource()) {
        this.dataSource = new ReferenceCSVDataSource(other.dataSource);
      }
    }

    public UpdateReferenceCSVDataSource_args deepCopy() {
      return new UpdateReferenceCSVDataSource_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.dataSource = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public UpdateReferenceCSVDataSource_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public UpdateReferenceCSVDataSource_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public ReferenceCSVDataSource getDataSource() {
      return this.dataSource;
    }

    public UpdateReferenceCSVDataSource_args setDataSource(ReferenceCSVDataSource dataSource) {
      this.dataSource = dataSource;
      return this;
    }

    public void unsetDataSource() {
      this.dataSource = null;
    }

    /** Returns true if field dataSource is set (has been assigned a value) and false otherwise */
    public boolean isSetDataSource() {
      return this.dataSource != null;
    }

    public void setDataSourceIsSet(boolean value) {
      if (!value) {
        this.dataSource = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case DATA_SOURCE:
        if (value == null) {
          unsetDataSource();
        } else {
          setDataSource((ReferenceCSVDataSource)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case DATA_SOURCE:
        return getDataSource();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case DATA_SOURCE:
        return isSetDataSource();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateReferenceCSVDataSource_args)
        return this.equals((UpdateReferenceCSVDataSource_args)that);
      return false;
    }

    public boolean equals(UpdateReferenceCSVDataSource_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_dataSource = true && this.isSetDataSource();
      boolean that_present_dataSource = true && that.isSetDataSource();
      if (this_present_dataSource || that_present_dataSource) {
        if (!(this_present_dataSource && that_present_dataSource))
          return false;
        if (!this.dataSource.equals(that.dataSource))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_dataSource = true && (isSetDataSource());
      list.add(present_dataSource);
      if (present_dataSource)
        list.add(dataSource);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateReferenceCSVDataSource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataSource()).compareTo(other.isSetDataSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSource, other.dataSource);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateReferenceCSVDataSource_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataSource:");
      if (this.dataSource == null) {
        sb.append("null");
      } else {
        sb.append(this.dataSource);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (dataSource != null) {
        dataSource.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateReferenceCSVDataSource_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateReferenceCSVDataSource_argsStandardScheme getScheme() {
        return new UpdateReferenceCSVDataSource_argsStandardScheme();
      }
    }

    private static class UpdateReferenceCSVDataSource_argsStandardScheme extends StandardScheme<UpdateReferenceCSVDataSource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateReferenceCSVDataSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA_SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataSource = new ReferenceCSVDataSource();
                struct.dataSource.read(iprot);
                struct.setDataSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateReferenceCSVDataSource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataSource != null) {
          oprot.writeFieldBegin(DATA_SOURCE_FIELD_DESC);
          struct.dataSource.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateReferenceCSVDataSource_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateReferenceCSVDataSource_argsTupleScheme getScheme() {
        return new UpdateReferenceCSVDataSource_argsTupleScheme();
      }
    }

    private static class UpdateReferenceCSVDataSource_argsTupleScheme extends TupleScheme<UpdateReferenceCSVDataSource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateReferenceCSVDataSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetDataSource()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetDataSource()) {
          struct.dataSource.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateReferenceCSVDataSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dataSource = new ReferenceCSVDataSource();
          struct.dataSource.read(iprot);
          struct.setDataSourceIsSet(true);
        }
      }
    }

  }

  public static class UpdateReferenceCSVDataSource_result implements org.apache.thrift.TBase<UpdateReferenceCSVDataSource_result, UpdateReferenceCSVDataSource_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateReferenceCSVDataSource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateReferenceCSVDataSource_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateReferenceCSVDataSource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateReferenceCSVDataSource_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateReferenceCSVDataSource_result.class, metaDataMap);
    }

    public UpdateReferenceCSVDataSource_result() {
    }

    public UpdateReferenceCSVDataSource_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateReferenceCSVDataSource_result(UpdateReferenceCSVDataSource_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public UpdateReferenceCSVDataSource_result deepCopy() {
      return new UpdateReferenceCSVDataSource_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public UpdateReferenceCSVDataSource_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateReferenceCSVDataSource_result)
        return this.equals((UpdateReferenceCSVDataSource_result)that);
      return false;
    }

    public boolean equals(UpdateReferenceCSVDataSource_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateReferenceCSVDataSource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateReferenceCSVDataSource_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateReferenceCSVDataSource_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateReferenceCSVDataSource_resultStandardScheme getScheme() {
        return new UpdateReferenceCSVDataSource_resultStandardScheme();
      }
    }

    private static class UpdateReferenceCSVDataSource_resultStandardScheme extends StandardScheme<UpdateReferenceCSVDataSource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateReferenceCSVDataSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateReferenceCSVDataSource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateReferenceCSVDataSource_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateReferenceCSVDataSource_resultTupleScheme getScheme() {
        return new UpdateReferenceCSVDataSource_resultTupleScheme();
      }
    }

    private static class UpdateReferenceCSVDataSource_resultTupleScheme extends TupleScheme<UpdateReferenceCSVDataSource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateReferenceCSVDataSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateReferenceCSVDataSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class DeleteReferenceCSVDataSource_args implements org.apache.thrift.TBase<DeleteReferenceCSVDataSource_args, DeleteReferenceCSVDataSource_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteReferenceCSVDataSource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteReferenceCSVDataSource_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSourceId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteReferenceCSVDataSource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteReferenceCSVDataSource_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public String dataSourceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      DATA_SOURCE_ID((short)3, "dataSourceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // DATA_SOURCE_ID
            return DATA_SOURCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.DATA_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("dataSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteReferenceCSVDataSource_args.class, metaDataMap);
    }

    public DeleteReferenceCSVDataSource_args() {
    }

    public DeleteReferenceCSVDataSource_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      String dataSourceId)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.dataSourceId = dataSourceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteReferenceCSVDataSource_args(DeleteReferenceCSVDataSource_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetDataSourceId()) {
        this.dataSourceId = other.dataSourceId;
      }
    }

    public DeleteReferenceCSVDataSource_args deepCopy() {
      return new DeleteReferenceCSVDataSource_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.dataSourceId = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public DeleteReferenceCSVDataSource_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public DeleteReferenceCSVDataSource_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public String getDataSourceId() {
      return this.dataSourceId;
    }

    public DeleteReferenceCSVDataSource_args setDataSourceId(String dataSourceId) {
      this.dataSourceId = dataSourceId;
      return this;
    }

    public void unsetDataSourceId() {
      this.dataSourceId = null;
    }

    /** Returns true if field dataSourceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDataSourceId() {
      return this.dataSourceId != null;
    }

    public void setDataSourceIdIsSet(boolean value) {
      if (!value) {
        this.dataSourceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case DATA_SOURCE_ID:
        if (value == null) {
          unsetDataSourceId();
        } else {
          setDataSourceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case DATA_SOURCE_ID:
        return getDataSourceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case DATA_SOURCE_ID:
        return isSetDataSourceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteReferenceCSVDataSource_args)
        return this.equals((DeleteReferenceCSVDataSource_args)that);
      return false;
    }

    public boolean equals(DeleteReferenceCSVDataSource_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_dataSourceId = true && this.isSetDataSourceId();
      boolean that_present_dataSourceId = true && that.isSetDataSourceId();
      if (this_present_dataSourceId || that_present_dataSourceId) {
        if (!(this_present_dataSourceId && that_present_dataSourceId))
          return false;
        if (!this.dataSourceId.equals(that.dataSourceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_dataSourceId = true && (isSetDataSourceId());
      list.add(present_dataSourceId);
      if (present_dataSourceId)
        list.add(dataSourceId);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteReferenceCSVDataSource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataSourceId()).compareTo(other.isSetDataSourceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataSourceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSourceId, other.dataSourceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteReferenceCSVDataSource_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataSourceId:");
      if (this.dataSourceId == null) {
        sb.append("null");
      } else {
        sb.append(this.dataSourceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteReferenceCSVDataSource_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteReferenceCSVDataSource_argsStandardScheme getScheme() {
        return new DeleteReferenceCSVDataSource_argsStandardScheme();
      }
    }

    private static class DeleteReferenceCSVDataSource_argsStandardScheme extends StandardScheme<DeleteReferenceCSVDataSource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteReferenceCSVDataSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA_SOURCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataSourceId = iprot.readString();
                struct.setDataSourceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteReferenceCSVDataSource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dataSourceId != null) {
          oprot.writeFieldBegin(DATA_SOURCE_ID_FIELD_DESC);
          oprot.writeString(struct.dataSourceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteReferenceCSVDataSource_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteReferenceCSVDataSource_argsTupleScheme getScheme() {
        return new DeleteReferenceCSVDataSource_argsTupleScheme();
      }
    }

    private static class DeleteReferenceCSVDataSource_argsTupleScheme extends TupleScheme<DeleteReferenceCSVDataSource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteReferenceCSVDataSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetDataSourceId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetDataSourceId()) {
          oprot.writeString(struct.dataSourceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteReferenceCSVDataSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dataSourceId = iprot.readString();
          struct.setDataSourceIdIsSet(true);
        }
      }
    }

  }

  public static class DeleteReferenceCSVDataSource_result implements org.apache.thrift.TBase<DeleteReferenceCSVDataSource_result, DeleteReferenceCSVDataSource_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteReferenceCSVDataSource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteReferenceCSVDataSource_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteReferenceCSVDataSource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteReferenceCSVDataSource_resultTupleSchemeFactory());
    }

    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteReferenceCSVDataSource_result.class, metaDataMap);
    }

    public DeleteReferenceCSVDataSource_result() {
    }

    public DeleteReferenceCSVDataSource_result(
      DataIntelligenceServiceException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteReferenceCSVDataSource_result(DeleteReferenceCSVDataSource_result other) {
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public DeleteReferenceCSVDataSource_result deepCopy() {
      return new DeleteReferenceCSVDataSource_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public DeleteReferenceCSVDataSource_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteReferenceCSVDataSource_result)
        return this.equals((DeleteReferenceCSVDataSource_result)that);
      return false;
    }

    public boolean equals(DeleteReferenceCSVDataSource_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteReferenceCSVDataSource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteReferenceCSVDataSource_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteReferenceCSVDataSource_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteReferenceCSVDataSource_resultStandardScheme getScheme() {
        return new DeleteReferenceCSVDataSource_resultStandardScheme();
      }
    }

    private static class DeleteReferenceCSVDataSource_resultStandardScheme extends StandardScheme<DeleteReferenceCSVDataSource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteReferenceCSVDataSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteReferenceCSVDataSource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteReferenceCSVDataSource_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteReferenceCSVDataSource_resultTupleScheme getScheme() {
        return new DeleteReferenceCSVDataSource_resultTupleScheme();
      }
    }

    private static class DeleteReferenceCSVDataSource_resultTupleScheme extends TupleScheme<DeleteReferenceCSVDataSource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteReferenceCSVDataSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteReferenceCSVDataSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetLastTransactionID_args implements org.apache.thrift.TBase<GetLastTransactionID_args, GetLastTransactionID_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetLastTransactionID_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetLastTransactionID_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetLastTransactionID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetLastTransactionID_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLastTransactionID_args.class, metaDataMap);
    }

    public GetLastTransactionID_args() {
    }

    public GetLastTransactionID_args(
      Authentication authentication,
      ConfigurationVersion configuration)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetLastTransactionID_args(GetLastTransactionID_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
    }

    public GetLastTransactionID_args deepCopy() {
      return new GetLastTransactionID_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetLastTransactionID_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetLastTransactionID_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetLastTransactionID_args)
        return this.equals((GetLastTransactionID_args)that);
      return false;
    }

    public boolean equals(GetLastTransactionID_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetLastTransactionID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetLastTransactionID_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetLastTransactionID_argsStandardSchemeFactory implements SchemeFactory {
      public GetLastTransactionID_argsStandardScheme getScheme() {
        return new GetLastTransactionID_argsStandardScheme();
      }
    }

    private static class GetLastTransactionID_argsStandardScheme extends StandardScheme<GetLastTransactionID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetLastTransactionID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetLastTransactionID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetLastTransactionID_argsTupleSchemeFactory implements SchemeFactory {
      public GetLastTransactionID_argsTupleScheme getScheme() {
        return new GetLastTransactionID_argsTupleScheme();
      }
    }

    private static class GetLastTransactionID_argsTupleScheme extends TupleScheme<GetLastTransactionID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetLastTransactionID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetLastTransactionID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
      }
    }

  }

  public static class GetLastTransactionID_result implements org.apache.thrift.TBase<GetLastTransactionID_result, GetLastTransactionID_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetLastTransactionID_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetLastTransactionID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetLastTransactionID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetLastTransactionID_resultTupleSchemeFactory());
    }

    public String success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetLastTransactionID_result.class, metaDataMap);
    }

    public GetLastTransactionID_result() {
    }

    public GetLastTransactionID_result(
      String success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetLastTransactionID_result(GetLastTransactionID_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetLastTransactionID_result deepCopy() {
      return new GetLastTransactionID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public GetLastTransactionID_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetLastTransactionID_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetLastTransactionID_result)
        return this.equals((GetLastTransactionID_result)that);
      return false;
    }

    public boolean equals(GetLastTransactionID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetLastTransactionID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetLastTransactionID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetLastTransactionID_resultStandardSchemeFactory implements SchemeFactory {
      public GetLastTransactionID_resultStandardScheme getScheme() {
        return new GetLastTransactionID_resultStandardScheme();
      }
    }

    private static class GetLastTransactionID_resultStandardScheme extends StandardScheme<GetLastTransactionID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetLastTransactionID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetLastTransactionID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetLastTransactionID_resultTupleSchemeFactory implements SchemeFactory {
      public GetLastTransactionID_resultTupleScheme getScheme() {
        return new GetLastTransactionID_resultTupleScheme();
      }
    }

    private static class GetLastTransactionID_resultTupleScheme extends TupleScheme<GetLastTransactionID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetLastTransactionID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetLastTransactionID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetPageViews_args implements org.apache.thrift.TBase<GetPageViews_args, GetPageViews_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetPageViews_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetPageViews_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("precision", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetPageViews_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetPageViews_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public TimeRange range; // required
    /**
     * 
     * @see TimeRangePrecision
     */
    public TimeRangePrecision precision; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      RANGE((short)3, "range"),
      /**
       * 
       * @see TimeRangePrecision
       */
      PRECISION((short)4, "precision");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // RANGE
            return RANGE;
          case 4: // PRECISION
            return PRECISION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeRange.class)));
      tmpMap.put(_Fields.PRECISION, new org.apache.thrift.meta_data.FieldMetaData("precision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TimeRangePrecision.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPageViews_args.class, metaDataMap);
    }

    public GetPageViews_args() {
    }

    public GetPageViews_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      TimeRange range,
      TimeRangePrecision precision)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.range = range;
      this.precision = precision;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetPageViews_args(GetPageViews_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetRange()) {
        this.range = new TimeRange(other.range);
      }
      if (other.isSetPrecision()) {
        this.precision = other.precision;
      }
    }

    public GetPageViews_args deepCopy() {
      return new GetPageViews_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.range = null;
      this.precision = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetPageViews_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetPageViews_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public TimeRange getRange() {
      return this.range;
    }

    public GetPageViews_args setRange(TimeRange range) {
      this.range = range;
      return this;
    }

    public void unsetRange() {
      this.range = null;
    }

    /** Returns true if field range is set (has been assigned a value) and false otherwise */
    public boolean isSetRange() {
      return this.range != null;
    }

    public void setRangeIsSet(boolean value) {
      if (!value) {
        this.range = null;
      }
    }

    /**
     * 
     * @see TimeRangePrecision
     */
    public TimeRangePrecision getPrecision() {
      return this.precision;
    }

    /**
     * 
     * @see TimeRangePrecision
     */
    public GetPageViews_args setPrecision(TimeRangePrecision precision) {
      this.precision = precision;
      return this;
    }

    public void unsetPrecision() {
      this.precision = null;
    }

    /** Returns true if field precision is set (has been assigned a value) and false otherwise */
    public boolean isSetPrecision() {
      return this.precision != null;
    }

    public void setPrecisionIsSet(boolean value) {
      if (!value) {
        this.precision = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case RANGE:
        if (value == null) {
          unsetRange();
        } else {
          setRange((TimeRange)value);
        }
        break;

      case PRECISION:
        if (value == null) {
          unsetPrecision();
        } else {
          setPrecision((TimeRangePrecision)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case RANGE:
        return getRange();

      case PRECISION:
        return getPrecision();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case RANGE:
        return isSetRange();
      case PRECISION:
        return isSetPrecision();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetPageViews_args)
        return this.equals((GetPageViews_args)that);
      return false;
    }

    public boolean equals(GetPageViews_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_range = true && this.isSetRange();
      boolean that_present_range = true && that.isSetRange();
      if (this_present_range || that_present_range) {
        if (!(this_present_range && that_present_range))
          return false;
        if (!this.range.equals(that.range))
          return false;
      }

      boolean this_present_precision = true && this.isSetPrecision();
      boolean that_present_precision = true && that.isSetPrecision();
      if (this_present_precision || that_present_precision) {
        if (!(this_present_precision && that_present_precision))
          return false;
        if (!this.precision.equals(that.precision))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_range = true && (isSetRange());
      list.add(present_range);
      if (present_range)
        list.add(range);

      boolean present_precision = true && (isSetPrecision());
      list.add(present_precision);
      if (present_precision)
        list.add(precision.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(GetPageViews_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRange()).compareTo(other.isSetRange());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRange()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, other.range);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrecision()).compareTo(other.isSetPrecision());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrecision()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.precision, other.precision);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetPageViews_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("range:");
      if (this.range == null) {
        sb.append("null");
      } else {
        sb.append(this.range);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("precision:");
      if (this.precision == null) {
        sb.append("null");
      } else {
        sb.append(this.precision);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (range != null) {
        range.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetPageViews_argsStandardSchemeFactory implements SchemeFactory {
      public GetPageViews_argsStandardScheme getScheme() {
        return new GetPageViews_argsStandardScheme();
      }
    }

    private static class GetPageViews_argsStandardScheme extends StandardScheme<GetPageViews_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetPageViews_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RANGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.range = new TimeRange();
                struct.range.read(iprot);
                struct.setRangeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PRECISION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.precision = com.boxalino.dataintelligence.api.thrift.TimeRangePrecision.findByValue(iprot.readI32());
                struct.setPrecisionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetPageViews_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.range != null) {
          oprot.writeFieldBegin(RANGE_FIELD_DESC);
          struct.range.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.precision != null) {
          oprot.writeFieldBegin(PRECISION_FIELD_DESC);
          oprot.writeI32(struct.precision.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetPageViews_argsTupleSchemeFactory implements SchemeFactory {
      public GetPageViews_argsTupleScheme getScheme() {
        return new GetPageViews_argsTupleScheme();
      }
    }

    private static class GetPageViews_argsTupleScheme extends TupleScheme<GetPageViews_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetPageViews_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetRange()) {
          optionals.set(2);
        }
        if (struct.isSetPrecision()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetRange()) {
          struct.range.write(oprot);
        }
        if (struct.isSetPrecision()) {
          oprot.writeI32(struct.precision.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetPageViews_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.range = new TimeRange();
          struct.range.read(iprot);
          struct.setRangeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.precision = com.boxalino.dataintelligence.api.thrift.TimeRangePrecision.findByValue(iprot.readI32());
          struct.setPrecisionIsSet(true);
        }
      }
    }

  }

  public static class GetPageViews_result implements org.apache.thrift.TBase<GetPageViews_result, GetPageViews_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetPageViews_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetPageViews_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetPageViews_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetPageViews_resultTupleSchemeFactory());
    }

    public List<TimeRangeValue> success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeRangeValue.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPageViews_result.class, metaDataMap);
    }

    public GetPageViews_result() {
    }

    public GetPageViews_result(
      List<TimeRangeValue> success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetPageViews_result(GetPageViews_result other) {
      if (other.isSetSuccess()) {
        List<TimeRangeValue> __this__success = new ArrayList<TimeRangeValue>(other.success.size());
        for (TimeRangeValue other_element : other.success) {
          __this__success.add(new TimeRangeValue(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetPageViews_result deepCopy() {
      return new GetPageViews_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TimeRangeValue> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TimeRangeValue elem) {
      if (this.success == null) {
        this.success = new ArrayList<TimeRangeValue>();
      }
      this.success.add(elem);
    }

    public List<TimeRangeValue> getSuccess() {
      return this.success;
    }

    public GetPageViews_result setSuccess(List<TimeRangeValue> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetPageViews_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TimeRangeValue>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetPageViews_result)
        return this.equals((GetPageViews_result)that);
      return false;
    }

    public boolean equals(GetPageViews_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetPageViews_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetPageViews_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetPageViews_resultStandardSchemeFactory implements SchemeFactory {
      public GetPageViews_resultStandardScheme getScheme() {
        return new GetPageViews_resultStandardScheme();
      }
    }

    private static class GetPageViews_resultStandardScheme extends StandardScheme<GetPageViews_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetPageViews_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list414 = iprot.readListBegin();
                  struct.success = new ArrayList<TimeRangeValue>(_list414.size);
                  TimeRangeValue _elem415;
                  for (int _i416 = 0; _i416 < _list414.size; ++_i416)
                  {
                    _elem415 = new TimeRangeValue();
                    _elem415.read(iprot);
                    struct.success.add(_elem415);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetPageViews_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TimeRangeValue _iter417 : struct.success)
            {
              _iter417.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetPageViews_resultTupleSchemeFactory implements SchemeFactory {
      public GetPageViews_resultTupleScheme getScheme() {
        return new GetPageViews_resultTupleScheme();
      }
    }

    private static class GetPageViews_resultTupleScheme extends TupleScheme<GetPageViews_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetPageViews_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TimeRangeValue _iter418 : struct.success)
            {
              _iter418.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetPageViews_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list419 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TimeRangeValue>(_list419.size);
            TimeRangeValue _elem420;
            for (int _i421 = 0; _i421 < _list419.size; ++_i421)
            {
              _elem420 = new TimeRangeValue();
              _elem420.read(iprot);
              struct.success.add(_elem420);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetChoiceReport_args implements org.apache.thrift.TBase<GetChoiceReport_args, GetChoiceReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetChoiceReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetChoiceReport_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetChoiceReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetChoiceReport_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public ChoiceReportRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      REQUEST((short)3, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceReportRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChoiceReport_args.class, metaDataMap);
    }

    public GetChoiceReport_args() {
    }

    public GetChoiceReport_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      ChoiceReportRequest request)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetChoiceReport_args(GetChoiceReport_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetRequest()) {
        this.request = new ChoiceReportRequest(other.request);
      }
    }

    public GetChoiceReport_args deepCopy() {
      return new GetChoiceReport_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.request = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetChoiceReport_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetChoiceReport_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public ChoiceReportRequest getRequest() {
      return this.request;
    }

    public GetChoiceReport_args setRequest(ChoiceReportRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((ChoiceReportRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetChoiceReport_args)
        return this.equals((GetChoiceReport_args)that);
      return false;
    }

    public boolean equals(GetChoiceReport_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetChoiceReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetChoiceReport_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetChoiceReport_argsStandardSchemeFactory implements SchemeFactory {
      public GetChoiceReport_argsStandardScheme getScheme() {
        return new GetChoiceReport_argsStandardScheme();
      }
    }

    private static class GetChoiceReport_argsStandardScheme extends StandardScheme<GetChoiceReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetChoiceReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new ChoiceReportRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetChoiceReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetChoiceReport_argsTupleSchemeFactory implements SchemeFactory {
      public GetChoiceReport_argsTupleScheme getScheme() {
        return new GetChoiceReport_argsTupleScheme();
      }
    }

    private static class GetChoiceReport_argsTupleScheme extends TupleScheme<GetChoiceReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetChoiceReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetRequest()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetChoiceReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.request = new ChoiceReportRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class GetChoiceReport_result implements org.apache.thrift.TBase<GetChoiceReport_result, GetChoiceReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetChoiceReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetChoiceReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetChoiceReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetChoiceReport_resultTupleSchemeFactory());
    }

    public ChoiceReport success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChoiceReport.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChoiceReport_result.class, metaDataMap);
    }

    public GetChoiceReport_result() {
    }

    public GetChoiceReport_result(
      ChoiceReport success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetChoiceReport_result(GetChoiceReport_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChoiceReport(other.success);
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetChoiceReport_result deepCopy() {
      return new GetChoiceReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChoiceReport getSuccess() {
      return this.success;
    }

    public GetChoiceReport_result setSuccess(ChoiceReport success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetChoiceReport_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChoiceReport)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetChoiceReport_result)
        return this.equals((GetChoiceReport_result)that);
      return false;
    }

    public boolean equals(GetChoiceReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetChoiceReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetChoiceReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetChoiceReport_resultStandardSchemeFactory implements SchemeFactory {
      public GetChoiceReport_resultStandardScheme getScheme() {
        return new GetChoiceReport_resultStandardScheme();
      }
    }

    private static class GetChoiceReport_resultStandardScheme extends StandardScheme<GetChoiceReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetChoiceReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChoiceReport();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetChoiceReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetChoiceReport_resultTupleSchemeFactory implements SchemeFactory {
      public GetChoiceReport_resultTupleScheme getScheme() {
        return new GetChoiceReport_resultTupleScheme();
      }
    }

    private static class GetChoiceReport_resultTupleScheme extends TupleScheme<GetChoiceReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetChoiceReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetChoiceReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ChoiceReport();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetTransactionReport_args implements org.apache.thrift.TBase<GetTransactionReport_args, GetTransactionReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetTransactionReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTransactionReport_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetTransactionReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetTransactionReport_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public TransactionReportRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      REQUEST((short)3, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransactionReportRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTransactionReport_args.class, metaDataMap);
    }

    public GetTransactionReport_args() {
    }

    public GetTransactionReport_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      TransactionReportRequest request)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetTransactionReport_args(GetTransactionReport_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetRequest()) {
        this.request = new TransactionReportRequest(other.request);
      }
    }

    public GetTransactionReport_args deepCopy() {
      return new GetTransactionReport_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.request = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetTransactionReport_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetTransactionReport_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public TransactionReportRequest getRequest() {
      return this.request;
    }

    public GetTransactionReport_args setRequest(TransactionReportRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((TransactionReportRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetTransactionReport_args)
        return this.equals((GetTransactionReport_args)that);
      return false;
    }

    public boolean equals(GetTransactionReport_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetTransactionReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetTransactionReport_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetTransactionReport_argsStandardSchemeFactory implements SchemeFactory {
      public GetTransactionReport_argsStandardScheme getScheme() {
        return new GetTransactionReport_argsStandardScheme();
      }
    }

    private static class GetTransactionReport_argsStandardScheme extends StandardScheme<GetTransactionReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetTransactionReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new TransactionReportRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetTransactionReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetTransactionReport_argsTupleSchemeFactory implements SchemeFactory {
      public GetTransactionReport_argsTupleScheme getScheme() {
        return new GetTransactionReport_argsTupleScheme();
      }
    }

    private static class GetTransactionReport_argsTupleScheme extends TupleScheme<GetTransactionReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetTransactionReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetRequest()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetTransactionReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.request = new TransactionReportRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class GetTransactionReport_result implements org.apache.thrift.TBase<GetTransactionReport_result, GetTransactionReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetTransactionReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTransactionReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetTransactionReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetTransactionReport_resultTupleSchemeFactory());
    }

    public TransactionReport success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransactionReport.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTransactionReport_result.class, metaDataMap);
    }

    public GetTransactionReport_result() {
    }

    public GetTransactionReport_result(
      TransactionReport success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetTransactionReport_result(GetTransactionReport_result other) {
      if (other.isSetSuccess()) {
        this.success = new TransactionReport(other.success);
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetTransactionReport_result deepCopy() {
      return new GetTransactionReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public TransactionReport getSuccess() {
      return this.success;
    }

    public GetTransactionReport_result setSuccess(TransactionReport success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetTransactionReport_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TransactionReport)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetTransactionReport_result)
        return this.equals((GetTransactionReport_result)that);
      return false;
    }

    public boolean equals(GetTransactionReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetTransactionReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetTransactionReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetTransactionReport_resultStandardSchemeFactory implements SchemeFactory {
      public GetTransactionReport_resultStandardScheme getScheme() {
        return new GetTransactionReport_resultStandardScheme();
      }
    }

    private static class GetTransactionReport_resultStandardScheme extends StandardScheme<GetTransactionReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetTransactionReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TransactionReport();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetTransactionReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetTransactionReport_resultTupleSchemeFactory implements SchemeFactory {
      public GetTransactionReport_resultTupleScheme getScheme() {
        return new GetTransactionReport_resultTupleScheme();
      }
    }

    private static class GetTransactionReport_resultTupleScheme extends TupleScheme<GetTransactionReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetTransactionReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetTransactionReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TransactionReport();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class GetBehaviorReport_args implements org.apache.thrift.TBase<GetBehaviorReport_args, GetBehaviorReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetBehaviorReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetBehaviorReport_args");

    private static final org.apache.thrift.protocol.TField AUTHENTICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("authentication", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetBehaviorReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetBehaviorReport_argsTupleSchemeFactory());
    }

    public Authentication authentication; // required
    public ConfigurationVersion configuration; // required
    public BehaviorReportRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTHENTICATION((short)1, "authentication"),
      CONFIGURATION((short)2, "configuration"),
      REQUEST((short)3, "request");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTHENTICATION
            return AUTHENTICATION;
          case 2: // CONFIGURATION
            return CONFIGURATION;
          case 3: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTHENTICATION, new org.apache.thrift.meta_data.FieldMetaData("authentication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Authentication.class)));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigurationVersion.class)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BehaviorReportRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetBehaviorReport_args.class, metaDataMap);
    }

    public GetBehaviorReport_args() {
    }

    public GetBehaviorReport_args(
      Authentication authentication,
      ConfigurationVersion configuration,
      BehaviorReportRequest request)
    {
      this();
      this.authentication = authentication;
      this.configuration = configuration;
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetBehaviorReport_args(GetBehaviorReport_args other) {
      if (other.isSetAuthentication()) {
        this.authentication = new Authentication(other.authentication);
      }
      if (other.isSetConfiguration()) {
        this.configuration = new ConfigurationVersion(other.configuration);
      }
      if (other.isSetRequest()) {
        this.request = new BehaviorReportRequest(other.request);
      }
    }

    public GetBehaviorReport_args deepCopy() {
      return new GetBehaviorReport_args(this);
    }

    @Override
    public void clear() {
      this.authentication = null;
      this.configuration = null;
      this.request = null;
    }

    public Authentication getAuthentication() {
      return this.authentication;
    }

    public GetBehaviorReport_args setAuthentication(Authentication authentication) {
      this.authentication = authentication;
      return this;
    }

    public void unsetAuthentication() {
      this.authentication = null;
    }

    /** Returns true if field authentication is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthentication() {
      return this.authentication != null;
    }

    public void setAuthenticationIsSet(boolean value) {
      if (!value) {
        this.authentication = null;
      }
    }

    public ConfigurationVersion getConfiguration() {
      return this.configuration;
    }

    public GetBehaviorReport_args setConfiguration(ConfigurationVersion configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public BehaviorReportRequest getRequest() {
      return this.request;
    }

    public GetBehaviorReport_args setRequest(BehaviorReportRequest request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case AUTHENTICATION:
        if (value == null) {
          unsetAuthentication();
        } else {
          setAuthentication((Authentication)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((ConfigurationVersion)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((BehaviorReportRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTHENTICATION:
        return getAuthentication();

      case CONFIGURATION:
        return getConfiguration();

      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case AUTHENTICATION:
        return isSetAuthentication();
      case CONFIGURATION:
        return isSetConfiguration();
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetBehaviorReport_args)
        return this.equals((GetBehaviorReport_args)that);
      return false;
    }

    public boolean equals(GetBehaviorReport_args that) {
      if (that == null)
        return false;

      boolean this_present_authentication = true && this.isSetAuthentication();
      boolean that_present_authentication = true && that.isSetAuthentication();
      if (this_present_authentication || that_present_authentication) {
        if (!(this_present_authentication && that_present_authentication))
          return false;
        if (!this.authentication.equals(that.authentication))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_authentication = true && (isSetAuthentication());
      list.add(present_authentication);
      if (present_authentication)
        list.add(authentication);

      boolean present_configuration = true && (isSetConfiguration());
      list.add(present_configuration);
      if (present_configuration)
        list.add(configuration);

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetBehaviorReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAuthentication()).compareTo(other.isSetAuthentication());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthentication()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authentication, other.authentication);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetBehaviorReport_args(");
      boolean first = true;

      sb.append("authentication:");
      if (this.authentication == null) {
        sb.append("null");
      } else {
        sb.append(this.authentication);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authentication != null) {
        authentication.validate();
      }
      if (configuration != null) {
        configuration.validate();
      }
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetBehaviorReport_argsStandardSchemeFactory implements SchemeFactory {
      public GetBehaviorReport_argsStandardScheme getScheme() {
        return new GetBehaviorReport_argsStandardScheme();
      }
    }

    private static class GetBehaviorReport_argsStandardScheme extends StandardScheme<GetBehaviorReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetBehaviorReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTHENTICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authentication = new Authentication();
                struct.authentication.read(iprot);
                struct.setAuthenticationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.configuration = new ConfigurationVersion();
                struct.configuration.read(iprot);
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new BehaviorReportRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetBehaviorReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authentication != null) {
          oprot.writeFieldBegin(AUTHENTICATION_FIELD_DESC);
          struct.authentication.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          struct.configuration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetBehaviorReport_argsTupleSchemeFactory implements SchemeFactory {
      public GetBehaviorReport_argsTupleScheme getScheme() {
        return new GetBehaviorReport_argsTupleScheme();
      }
    }

    private static class GetBehaviorReport_argsTupleScheme extends TupleScheme<GetBehaviorReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetBehaviorReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAuthentication()) {
          optionals.set(0);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(1);
        }
        if (struct.isSetRequest()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthentication()) {
          struct.authentication.write(oprot);
        }
        if (struct.isSetConfiguration()) {
          struct.configuration.write(oprot);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetBehaviorReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authentication = new Authentication();
          struct.authentication.read(iprot);
          struct.setAuthenticationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.configuration = new ConfigurationVersion();
          struct.configuration.read(iprot);
          struct.setConfigurationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.request = new BehaviorReportRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  public static class GetBehaviorReport_result implements org.apache.thrift.TBase<GetBehaviorReport_result, GetBehaviorReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetBehaviorReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetBehaviorReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetBehaviorReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetBehaviorReport_resultTupleSchemeFactory());
    }

    public BehaviorReport success; // required
    public DataIntelligenceServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BehaviorReport.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetBehaviorReport_result.class, metaDataMap);
    }

    public GetBehaviorReport_result() {
    }

    public GetBehaviorReport_result(
      BehaviorReport success,
      DataIntelligenceServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetBehaviorReport_result(GetBehaviorReport_result other) {
      if (other.isSetSuccess()) {
        this.success = new BehaviorReport(other.success);
      }
      if (other.isSetE()) {
        this.e = new DataIntelligenceServiceException(other.e);
      }
    }

    public GetBehaviorReport_result deepCopy() {
      return new GetBehaviorReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public BehaviorReport getSuccess() {
      return this.success;
    }

    public GetBehaviorReport_result setSuccess(BehaviorReport success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public DataIntelligenceServiceException getE() {
      return this.e;
    }

    public GetBehaviorReport_result setE(DataIntelligenceServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BehaviorReport)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((DataIntelligenceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetBehaviorReport_result)
        return this.equals((GetBehaviorReport_result)that);
      return false;
    }

    public boolean equals(GetBehaviorReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetBehaviorReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetBehaviorReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetBehaviorReport_resultStandardSchemeFactory implements SchemeFactory {
      public GetBehaviorReport_resultStandardScheme getScheme() {
        return new GetBehaviorReport_resultStandardScheme();
      }
    }

    private static class GetBehaviorReport_resultStandardScheme extends StandardScheme<GetBehaviorReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetBehaviorReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BehaviorReport();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new DataIntelligenceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetBehaviorReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetBehaviorReport_resultTupleSchemeFactory implements SchemeFactory {
      public GetBehaviorReport_resultTupleScheme getScheme() {
        return new GetBehaviorReport_resultTupleScheme();
      }
    }

    private static class GetBehaviorReport_resultTupleScheme extends TupleScheme<GetBehaviorReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetBehaviorReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetBehaviorReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new BehaviorReport();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new DataIntelligenceServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}
