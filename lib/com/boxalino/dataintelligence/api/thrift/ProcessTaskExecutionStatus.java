/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.dataintelligence.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * This structure defines a process task execution status (the status of execution of a process task) with its type and a textual message
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-31")
public class ProcessTaskExecutionStatus implements org.apache.thrift.TBase<ProcessTaskExecutionStatus, ProcessTaskExecutionStatus._Fields>, java.io.Serializable, Cloneable, Comparable<ProcessTaskExecutionStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProcessTaskExecutionStatus");

  private static final org.apache.thrift.protocol.TField STATUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("statusType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField INFORMATION_FIELD_DESC = new org.apache.thrift.protocol.TField("information", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProcessTaskExecutionStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProcessTaskExecutionStatusTupleSchemeFactory());
  }

  /**
   * the status type of this execution of the process task
   * 
   * @see ProcessTaskExecutionStatusType
   */
  public ProcessTaskExecutionStatusType statusType; // required
  /**
   * some additonal information about the type (can be empty, used to explain errors and warnings)
   */
  public String information; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * the status type of this execution of the process task
     * 
     * @see ProcessTaskExecutionStatusType
     */
    STATUS_TYPE((short)1, "statusType"),
    /**
     * some additonal information about the type (can be empty, used to explain errors and warnings)
     */
    INFORMATION((short)2, "information");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS_TYPE
          return STATUS_TYPE;
        case 2: // INFORMATION
          return INFORMATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("statusType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProcessTaskExecutionStatusType.class)));
    tmpMap.put(_Fields.INFORMATION, new org.apache.thrift.meta_data.FieldMetaData("information", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProcessTaskExecutionStatus.class, metaDataMap);
  }

  public ProcessTaskExecutionStatus() {
  }

  public ProcessTaskExecutionStatus(
    ProcessTaskExecutionStatusType statusType,
    String information)
  {
    this();
    this.statusType = statusType;
    this.information = information;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProcessTaskExecutionStatus(ProcessTaskExecutionStatus other) {
    if (other.isSetStatusType()) {
      this.statusType = other.statusType;
    }
    if (other.isSetInformation()) {
      this.information = other.information;
    }
  }

  public ProcessTaskExecutionStatus deepCopy() {
    return new ProcessTaskExecutionStatus(this);
  }

  @Override
  public void clear() {
    this.statusType = null;
    this.information = null;
  }

  /**
   * the status type of this execution of the process task
   * 
   * @see ProcessTaskExecutionStatusType
   */
  public ProcessTaskExecutionStatusType getStatusType() {
    return this.statusType;
  }

  /**
   * the status type of this execution of the process task
   * 
   * @see ProcessTaskExecutionStatusType
   */
  public ProcessTaskExecutionStatus setStatusType(ProcessTaskExecutionStatusType statusType) {
    this.statusType = statusType;
    return this;
  }

  public void unsetStatusType() {
    this.statusType = null;
  }

  /** Returns true if field statusType is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusType() {
    return this.statusType != null;
  }

  public void setStatusTypeIsSet(boolean value) {
    if (!value) {
      this.statusType = null;
    }
  }

  /**
   * some additonal information about the type (can be empty, used to explain errors and warnings)
   */
  public String getInformation() {
    return this.information;
  }

  /**
   * some additonal information about the type (can be empty, used to explain errors and warnings)
   */
  public ProcessTaskExecutionStatus setInformation(String information) {
    this.information = information;
    return this;
  }

  public void unsetInformation() {
    this.information = null;
  }

  /** Returns true if field information is set (has been assigned a value) and false otherwise */
  public boolean isSetInformation() {
    return this.information != null;
  }

  public void setInformationIsSet(boolean value) {
    if (!value) {
      this.information = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS_TYPE:
      if (value == null) {
        unsetStatusType();
      } else {
        setStatusType((ProcessTaskExecutionStatusType)value);
      }
      break;

    case INFORMATION:
      if (value == null) {
        unsetInformation();
      } else {
        setInformation((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS_TYPE:
      return getStatusType();

    case INFORMATION:
      return getInformation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS_TYPE:
      return isSetStatusType();
    case INFORMATION:
      return isSetInformation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProcessTaskExecutionStatus)
      return this.equals((ProcessTaskExecutionStatus)that);
    return false;
  }

  public boolean equals(ProcessTaskExecutionStatus that) {
    if (that == null)
      return false;

    boolean this_present_statusType = true && this.isSetStatusType();
    boolean that_present_statusType = true && that.isSetStatusType();
    if (this_present_statusType || that_present_statusType) {
      if (!(this_present_statusType && that_present_statusType))
        return false;
      if (!this.statusType.equals(that.statusType))
        return false;
    }

    boolean this_present_information = true && this.isSetInformation();
    boolean that_present_information = true && that.isSetInformation();
    if (this_present_information || that_present_information) {
      if (!(this_present_information && that_present_information))
        return false;
      if (!this.information.equals(that.information))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_statusType = true && (isSetStatusType());
    list.add(present_statusType);
    if (present_statusType)
      list.add(statusType.getValue());

    boolean present_information = true && (isSetInformation());
    list.add(present_information);
    if (present_information)
      list.add(information);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProcessTaskExecutionStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatusType()).compareTo(other.isSetStatusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusType, other.statusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInformation()).compareTo(other.isSetInformation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInformation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.information, other.information);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProcessTaskExecutionStatus(");
    boolean first = true;

    sb.append("statusType:");
    if (this.statusType == null) {
      sb.append("null");
    } else {
      sb.append(this.statusType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("information:");
    if (this.information == null) {
      sb.append("null");
    } else {
      sb.append(this.information);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (statusType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'statusType' was not present! Struct: " + toString());
    }
    if (information == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'information' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProcessTaskExecutionStatusStandardSchemeFactory implements SchemeFactory {
    public ProcessTaskExecutionStatusStandardScheme getScheme() {
      return new ProcessTaskExecutionStatusStandardScheme();
    }
  }

  private static class ProcessTaskExecutionStatusStandardScheme extends StandardScheme<ProcessTaskExecutionStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProcessTaskExecutionStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.statusType = com.boxalino.dataintelligence.api.thrift.ProcessTaskExecutionStatusType.findByValue(iprot.readI32());
              struct.setStatusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INFORMATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.information = iprot.readString();
              struct.setInformationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProcessTaskExecutionStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.statusType != null) {
        oprot.writeFieldBegin(STATUS_TYPE_FIELD_DESC);
        oprot.writeI32(struct.statusType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.information != null) {
        oprot.writeFieldBegin(INFORMATION_FIELD_DESC);
        oprot.writeString(struct.information);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProcessTaskExecutionStatusTupleSchemeFactory implements SchemeFactory {
    public ProcessTaskExecutionStatusTupleScheme getScheme() {
      return new ProcessTaskExecutionStatusTupleScheme();
    }
  }

  private static class ProcessTaskExecutionStatusTupleScheme extends TupleScheme<ProcessTaskExecutionStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProcessTaskExecutionStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.statusType.getValue());
      oprot.writeString(struct.information);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProcessTaskExecutionStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.statusType = com.boxalino.dataintelligence.api.thrift.ProcessTaskExecutionStatusType.findByValue(iprot.readI32());
      struct.setStatusTypeIsSet(true);
      struct.information = iprot.readString();
      struct.setInformationIsSet(true);
    }
  }

}

