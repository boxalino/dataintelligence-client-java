/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.dataintelligence.api.thrift;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

/**
 * This enumeration defines possible report metric types
 */
public enum ReportMetricType implements org.apache.thrift.TEnum {
  /**
   * number of unique visitors (or user)
   */
  VISITORS(1),
  /**
   * number of visits (or session)
   */
  VISITS(2),
  /**
   * number of landing page bounces
   */
  BOUNCES(3),
  /**
   * BOUNCES / VISITS
   */
  BOUNCE_RATE(4),
  /**
   * number of page views
   */
  PAGE_VIEWS(5),
  /**
   * PAGE_VIEWS / VISITS
   */
  PAGE_VIEWS_PER_VISIT(6),
  /**
   * average time of visits
   */
  AVERAGE_TIME_ON_SITE(7),
  /**
   * number of product views
   */
  PRODUCT_VIEWS(8),
  /**
   * PRODUCT_VIEWS / VISITS
   */
  PRODUCT_VIEWS_PER_VISIT(9),
  /**
   * number of visits having at least one product view
   */
  VISITS_WITH_PRODUCT_VIEWS(10),
  /**
   * VISITS_WITH_PRODUCT_VIEWS / VISITS
   */
  VISITS_WITH_PRODUCT_VIEWS_RATE(11),
  /**
   * number of in-site searches
   */
  SEARCHES(12),
  /**
   * SEARCHES / VISITS
   */
  SEARCHES_PER_VISIT(13),
  /**
   * number of visits having at least one search
   */
  VISITS_WITH_SEARCHES(14),
  /**
   * VISITS_WITH_SEARCHES / VISITS
   */
  VISITS_WITH_SEARCHES_RATE(15),
  /**
   * number of goals (require identifier to be provided with the choice identifier)
   */
  GOALS(16),
  /**
   * GOALS / VISITS (require identifier to be provided with the choice identifier)
   */
  GOALS_PER_VISIT(17),
  /**
   * number of visits having at least one goal (require identifier to be provided with the choice identifier)
   */
  VISITS_WITH_GOALS(18),
  /**
   * VISITS_WITH_GOALS / VISITS (require identifier to be provided with the choice identifier)
   */
  VISITS_WITH_GOALS_RATE(19),
  /**
   * number of transactions
   */
  TRANSACTIONS(20),
  /**
   * TRANSACTIONS / VISITS
   */
  TRANSACTIONS_PER_VISIT(21),
  /**
   * number of visits having at least one transaction
   */
  VISITS_WITH_TRANSACTIONS(22),
  /**
   * VISITS_WITH_TRANSACTIONS / VISITS
   */
  VISITS_WITH_TRANSACTIONS_RATE(23),
  /**
   * transaction turnover
   * N.B.: will return zero for all cases which cannot be mapped to any transaction
   */
  TRANSACTIONS_TURNOVER(28),
  /**
   * sum of the transaction parameter values (require identifier to be provided with the transaction parameter name)
   * N.B.: will return zero for all cases which cannot be mapped to any transaction
   */
  TRANSACTIONS_PARAMETER_SUM(29),
  /**
   * number of add-to-basket events
   */
  ADD_TO_BASKETS(24),
  /**
   * ADD_TO_BASKET / VISITS
   */
  ADD_TO_BASKETS_PER_VISIT(25),
  /**
   * number of visits having at least one add to basket event
   */
  VISITS_WITH_ADD_TO_BASKETS(26),
  /**
   * VISITS_WITH_ADD_TO_BASKETS / VISITS
   */
  VISITS_WITH_ADD_TO_BASKETS_RATE(27);

  private final int value;

  private ReportMetricType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static ReportMetricType findByValue(int value) { 
    switch (value) {
      case 1:
        return VISITORS;
      case 2:
        return VISITS;
      case 3:
        return BOUNCES;
      case 4:
        return BOUNCE_RATE;
      case 5:
        return PAGE_VIEWS;
      case 6:
        return PAGE_VIEWS_PER_VISIT;
      case 7:
        return AVERAGE_TIME_ON_SITE;
      case 8:
        return PRODUCT_VIEWS;
      case 9:
        return PRODUCT_VIEWS_PER_VISIT;
      case 10:
        return VISITS_WITH_PRODUCT_VIEWS;
      case 11:
        return VISITS_WITH_PRODUCT_VIEWS_RATE;
      case 12:
        return SEARCHES;
      case 13:
        return SEARCHES_PER_VISIT;
      case 14:
        return VISITS_WITH_SEARCHES;
      case 15:
        return VISITS_WITH_SEARCHES_RATE;
      case 16:
        return GOALS;
      case 17:
        return GOALS_PER_VISIT;
      case 18:
        return VISITS_WITH_GOALS;
      case 19:
        return VISITS_WITH_GOALS_RATE;
      case 20:
        return TRANSACTIONS;
      case 21:
        return TRANSACTIONS_PER_VISIT;
      case 22:
        return VISITS_WITH_TRANSACTIONS;
      case 23:
        return VISITS_WITH_TRANSACTIONS_RATE;
      case 28:
        return TRANSACTIONS_TURNOVER;
      case 29:
        return TRANSACTIONS_PARAMETER_SUM;
      case 24:
        return ADD_TO_BASKETS;
      case 25:
        return ADD_TO_BASKETS_PER_VISIT;
      case 26:
        return VISITS_WITH_ADD_TO_BASKETS;
      case 27:
        return VISITS_WITH_ADD_TO_BASKETS_RATE;
      default:
        return null;
    }
  }
}
