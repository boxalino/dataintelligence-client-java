/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.dataintelligence.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * This structure defines a transaction report returned
 * This object is specific to TransactionReportRequest but is similar to all other type of report responses, as the only difference usually is the key object of the result variable (in this case: TransactionReportResult)
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-31")
public class TransactionReport implements org.apache.thrift.TBase<TransactionReport, TransactionReport._Fields>, java.io.Serializable, Cloneable, Comparable<TransactionReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransactionReport");

  private static final org.apache.thrift.protocol.TField RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("results", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalResult", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransactionReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransactionReportTupleSchemeFactory());
  }

  /**
   * the map of reporting results (one result per TransactionReportResult: indicating dimension values)
   */
  public List<TransactionReportResult> results; // required
  /**
   * the total results (over all the time periods) (one result per TransactionReportResult: indicating dimension values)
   */
  public List<TransactionReportResult> totalResult; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * the map of reporting results (one result per TransactionReportResult: indicating dimension values)
     */
    RESULTS((short)1, "results"),
    /**
     * the total results (over all the time periods) (one result per TransactionReportResult: indicating dimension values)
     */
    TOTAL_RESULT((short)2, "totalResult");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULTS
          return RESULTS;
        case 2: // TOTAL_RESULT
          return TOTAL_RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULTS, new org.apache.thrift.meta_data.FieldMetaData("results", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransactionReportResult.class))));
    tmpMap.put(_Fields.TOTAL_RESULT, new org.apache.thrift.meta_data.FieldMetaData("totalResult", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransactionReportResult.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransactionReport.class, metaDataMap);
  }

  public TransactionReport() {
  }

  public TransactionReport(
    List<TransactionReportResult> results,
    List<TransactionReportResult> totalResult)
  {
    this();
    this.results = results;
    this.totalResult = totalResult;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransactionReport(TransactionReport other) {
    if (other.isSetResults()) {
      List<TransactionReportResult> __this__results = new ArrayList<TransactionReportResult>(other.results.size());
      for (TransactionReportResult other_element : other.results) {
        __this__results.add(new TransactionReportResult(other_element));
      }
      this.results = __this__results;
    }
    if (other.isSetTotalResult()) {
      List<TransactionReportResult> __this__totalResult = new ArrayList<TransactionReportResult>(other.totalResult.size());
      for (TransactionReportResult other_element : other.totalResult) {
        __this__totalResult.add(new TransactionReportResult(other_element));
      }
      this.totalResult = __this__totalResult;
    }
  }

  public TransactionReport deepCopy() {
    return new TransactionReport(this);
  }

  @Override
  public void clear() {
    this.results = null;
    this.totalResult = null;
  }

  public int getResultsSize() {
    return (this.results == null) ? 0 : this.results.size();
  }

  public java.util.Iterator<TransactionReportResult> getResultsIterator() {
    return (this.results == null) ? null : this.results.iterator();
  }

  public void addToResults(TransactionReportResult elem) {
    if (this.results == null) {
      this.results = new ArrayList<TransactionReportResult>();
    }
    this.results.add(elem);
  }

  /**
   * the map of reporting results (one result per TransactionReportResult: indicating dimension values)
   */
  public List<TransactionReportResult> getResults() {
    return this.results;
  }

  /**
   * the map of reporting results (one result per TransactionReportResult: indicating dimension values)
   */
  public TransactionReport setResults(List<TransactionReportResult> results) {
    this.results = results;
    return this;
  }

  public void unsetResults() {
    this.results = null;
  }

  /** Returns true if field results is set (has been assigned a value) and false otherwise */
  public boolean isSetResults() {
    return this.results != null;
  }

  public void setResultsIsSet(boolean value) {
    if (!value) {
      this.results = null;
    }
  }

  public int getTotalResultSize() {
    return (this.totalResult == null) ? 0 : this.totalResult.size();
  }

  public java.util.Iterator<TransactionReportResult> getTotalResultIterator() {
    return (this.totalResult == null) ? null : this.totalResult.iterator();
  }

  public void addToTotalResult(TransactionReportResult elem) {
    if (this.totalResult == null) {
      this.totalResult = new ArrayList<TransactionReportResult>();
    }
    this.totalResult.add(elem);
  }

  /**
   * the total results (over all the time periods) (one result per TransactionReportResult: indicating dimension values)
   */
  public List<TransactionReportResult> getTotalResult() {
    return this.totalResult;
  }

  /**
   * the total results (over all the time periods) (one result per TransactionReportResult: indicating dimension values)
   */
  public TransactionReport setTotalResult(List<TransactionReportResult> totalResult) {
    this.totalResult = totalResult;
    return this;
  }

  public void unsetTotalResult() {
    this.totalResult = null;
  }

  /** Returns true if field totalResult is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalResult() {
    return this.totalResult != null;
  }

  public void setTotalResultIsSet(boolean value) {
    if (!value) {
      this.totalResult = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULTS:
      if (value == null) {
        unsetResults();
      } else {
        setResults((List<TransactionReportResult>)value);
      }
      break;

    case TOTAL_RESULT:
      if (value == null) {
        unsetTotalResult();
      } else {
        setTotalResult((List<TransactionReportResult>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULTS:
      return getResults();

    case TOTAL_RESULT:
      return getTotalResult();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULTS:
      return isSetResults();
    case TOTAL_RESULT:
      return isSetTotalResult();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransactionReport)
      return this.equals((TransactionReport)that);
    return false;
  }

  public boolean equals(TransactionReport that) {
    if (that == null)
      return false;

    boolean this_present_results = true && this.isSetResults();
    boolean that_present_results = true && that.isSetResults();
    if (this_present_results || that_present_results) {
      if (!(this_present_results && that_present_results))
        return false;
      if (!this.results.equals(that.results))
        return false;
    }

    boolean this_present_totalResult = true && this.isSetTotalResult();
    boolean that_present_totalResult = true && that.isSetTotalResult();
    if (this_present_totalResult || that_present_totalResult) {
      if (!(this_present_totalResult && that_present_totalResult))
        return false;
      if (!this.totalResult.equals(that.totalResult))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_results = true && (isSetResults());
    list.add(present_results);
    if (present_results)
      list.add(results);

    boolean present_totalResult = true && (isSetTotalResult());
    list.add(present_totalResult);
    if (present_totalResult)
      list.add(totalResult);

    return list.hashCode();
  }

  @Override
  public int compareTo(TransactionReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResults()).compareTo(other.isSetResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.results, other.results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalResult()).compareTo(other.isSetTotalResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalResult, other.totalResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransactionReport(");
    boolean first = true;

    sb.append("results:");
    if (this.results == null) {
      sb.append("null");
    } else {
      sb.append(this.results);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalResult:");
    if (this.totalResult == null) {
      sb.append("null");
    } else {
      sb.append(this.totalResult);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (results == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'results' was not present! Struct: " + toString());
    }
    if (totalResult == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalResult' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransactionReportStandardSchemeFactory implements SchemeFactory {
    public TransactionReportStandardScheme getScheme() {
      return new TransactionReportStandardScheme();
    }
  }

  private static class TransactionReportStandardScheme extends StandardScheme<TransactionReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransactionReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list210 = iprot.readListBegin();
                struct.results = new ArrayList<TransactionReportResult>(_list210.size);
                TransactionReportResult _elem211;
                for (int _i212 = 0; _i212 < _list210.size; ++_i212)
                {
                  _elem211 = new TransactionReportResult();
                  _elem211.read(iprot);
                  struct.results.add(_elem211);
                }
                iprot.readListEnd();
              }
              struct.setResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list213 = iprot.readListBegin();
                struct.totalResult = new ArrayList<TransactionReportResult>(_list213.size);
                TransactionReportResult _elem214;
                for (int _i215 = 0; _i215 < _list213.size; ++_i215)
                {
                  _elem214 = new TransactionReportResult();
                  _elem214.read(iprot);
                  struct.totalResult.add(_elem214);
                }
                iprot.readListEnd();
              }
              struct.setTotalResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransactionReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.results != null) {
        oprot.writeFieldBegin(RESULTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.results.size()));
          for (TransactionReportResult _iter216 : struct.results)
          {
            _iter216.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.totalResult != null) {
        oprot.writeFieldBegin(TOTAL_RESULT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.totalResult.size()));
          for (TransactionReportResult _iter217 : struct.totalResult)
          {
            _iter217.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransactionReportTupleSchemeFactory implements SchemeFactory {
    public TransactionReportTupleScheme getScheme() {
      return new TransactionReportTupleScheme();
    }
  }

  private static class TransactionReportTupleScheme extends TupleScheme<TransactionReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransactionReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.results.size());
        for (TransactionReportResult _iter218 : struct.results)
        {
          _iter218.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.totalResult.size());
        for (TransactionReportResult _iter219 : struct.totalResult)
        {
          _iter219.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransactionReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list220 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.results = new ArrayList<TransactionReportResult>(_list220.size);
        TransactionReportResult _elem221;
        for (int _i222 = 0; _i222 < _list220.size; ++_i222)
        {
          _elem221 = new TransactionReportResult();
          _elem221.read(iprot);
          struct.results.add(_elem221);
        }
      }
      struct.setResultsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list223 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.totalResult = new ArrayList<TransactionReportResult>(_list223.size);
        TransactionReportResult _elem224;
        for (int _i225 = 0; _i225 < _list223.size; ++_i225)
        {
          _elem224 = new TransactionReportResult();
          _elem224.read(iprot);
          struct.totalResult.add(_elem224);
        }
      }
      struct.setTotalResultIsSet(true);
    }
  }

}

