/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.dataintelligence.api.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * This structure defines an optimization report request
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-27")
public class ChoiceReportRequest implements org.apache.thrift.TBase<ChoiceReportRequest, ChoiceReportRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ChoiceReportRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChoiceReportRequest");

  private static final org.apache.thrift.protocol.TField CHOICE_SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceSourceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHOICE_FIELD_DESC = new org.apache.thrift.protocol.TField("choice", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("metrics", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CHOICE_VARIANT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("choiceVariantIds", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField RETURN_RECOMMENDATION_STRATEGIES_FIELD_DESC = new org.apache.thrift.protocol.TField("returnRecommendationStrategies", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField DIMENSION_FIELD_DESC = new org.apache.thrift.protocol.TField("dimension", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField FUNNEL_METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("funnelMetrics", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField SORT_BYS_FIELD_DESC = new org.apache.thrift.protocol.TField("sortBys", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField PRECISION_FIELD_DESC = new org.apache.thrift.protocol.TField("precision", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField START_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("startIndex", org.apache.thrift.protocol.TType.I16, (short)11);
  private static final org.apache.thrift.protocol.TField MAX_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxResults", org.apache.thrift.protocol.TType.I16, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChoiceReportRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChoiceReportRequestTupleSchemeFactory());
  }

  /**
   * the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)
   */
  public String choiceSourceId; // required
  /**
   * the choice to analyse (e.g.: each landing page is a choice and has several variant potentially, even if only one)
   */
  public Choice choice; // required
  /**
   * the metrics to evaluate report (e.g.: kpis to return)
   */
  public List<ReportMetric> metrics; // required
  /**
   * an optional choice variants to use as filters (only return the results for these choicevariants)
   */
  public List<String> choiceVariantIds; // optional
  /**
   * an optional flag to indicate that the results should display not only the choice variant, but which recommendation strategies have been used for each choice variant (only applicable if the choice is a recommendation choice)
   */
  public boolean returnRecommendationStrategies; // optional
  /**
   * an optional dimension for the report (for segmentation), while groups are different for each type of reporting, the dimension are normally standard (visitor country, device, ...)
   */
  public ReportDimension dimension; // optional
  /**
   * an optional list of metrics to limit the report to only the cases where at least one of the metrics of the list was reached (e.g.: if focusedMetrics are goal-X and goal-Y, then the Metric Transactions will not be returned for all the visits, but only for the visits who did reach goal-X or goal-Y at least once)
   */
  public List<ReportMetric> funnelMetrics; // optional
  /**
   * the metrics to use for sorting the results
   */
  public List<ReportMetric> sortBys; // optional
  /**
   * a required date range for the reporting response (precision is only managed per day)
   */
  public TimeRange range; // required
  /**
   * a required date range precision if the results should be aggregated per week or month, overall or return for each day
   * 
   * @see TimeRangePrecision
   */
  public TimeRangePrecision precision; // required
  /**
   * an optional starting index (e.g.: if the maximum number of results was exceeded and a second page needs to be displayed). First index is 0.
   */
  public short startIndex; // optional
  /**
   * an required number of maximum number of results (one result is one source of date rage data in of values for all kpis)
   */
  public short maxResults; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)
     */
    CHOICE_SOURCE_ID((short)1, "choiceSourceId"),
    /**
     * the choice to analyse (e.g.: each landing page is a choice and has several variant potentially, even if only one)
     */
    CHOICE((short)2, "choice"),
    /**
     * the metrics to evaluate report (e.g.: kpis to return)
     */
    METRICS((short)3, "metrics"),
    /**
     * an optional choice variants to use as filters (only return the results for these choicevariants)
     */
    CHOICE_VARIANT_IDS((short)4, "choiceVariantIds"),
    /**
     * an optional flag to indicate that the results should display not only the choice variant, but which recommendation strategies have been used for each choice variant (only applicable if the choice is a recommendation choice)
     */
    RETURN_RECOMMENDATION_STRATEGIES((short)5, "returnRecommendationStrategies"),
    /**
     * an optional dimension for the report (for segmentation), while groups are different for each type of reporting, the dimension are normally standard (visitor country, device, ...)
     */
    DIMENSION((short)6, "dimension"),
    /**
     * an optional list of metrics to limit the report to only the cases where at least one of the metrics of the list was reached (e.g.: if focusedMetrics are goal-X and goal-Y, then the Metric Transactions will not be returned for all the visits, but only for the visits who did reach goal-X or goal-Y at least once)
     */
    FUNNEL_METRICS((short)7, "funnelMetrics"),
    /**
     * the metrics to use for sorting the results
     */
    SORT_BYS((short)8, "sortBys"),
    /**
     * a required date range for the reporting response (precision is only managed per day)
     */
    RANGE((short)9, "range"),
    /**
     * a required date range precision if the results should be aggregated per week or month, overall or return for each day
     * 
     * @see TimeRangePrecision
     */
    PRECISION((short)10, "precision"),
    /**
     * an optional starting index (e.g.: if the maximum number of results was exceeded and a second page needs to be displayed). First index is 0.
     */
    START_INDEX((short)11, "startIndex"),
    /**
     * an required number of maximum number of results (one result is one source of date rage data in of values for all kpis)
     */
    MAX_RESULTS((short)12, "maxResults");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHOICE_SOURCE_ID
          return CHOICE_SOURCE_ID;
        case 2: // CHOICE
          return CHOICE;
        case 3: // METRICS
          return METRICS;
        case 4: // CHOICE_VARIANT_IDS
          return CHOICE_VARIANT_IDS;
        case 5: // RETURN_RECOMMENDATION_STRATEGIES
          return RETURN_RECOMMENDATION_STRATEGIES;
        case 6: // DIMENSION
          return DIMENSION;
        case 7: // FUNNEL_METRICS
          return FUNNEL_METRICS;
        case 8: // SORT_BYS
          return SORT_BYS;
        case 9: // RANGE
          return RANGE;
        case 10: // PRECISION
          return PRECISION;
        case 11: // START_INDEX
          return START_INDEX;
        case 12: // MAX_RESULTS
          return MAX_RESULTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RETURNRECOMMENDATIONSTRATEGIES_ISSET_ID = 0;
  private static final int __STARTINDEX_ISSET_ID = 1;
  private static final int __MAXRESULTS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CHOICE_VARIANT_IDS,_Fields.RETURN_RECOMMENDATION_STRATEGIES,_Fields.DIMENSION,_Fields.FUNNEL_METRICS,_Fields.SORT_BYS,_Fields.START_INDEX};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHOICE_SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("choiceSourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHOICE, new org.apache.thrift.meta_data.FieldMetaData("choice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Choice.class)));
    tmpMap.put(_Fields.METRICS, new org.apache.thrift.meta_data.FieldMetaData("metrics", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportMetric.class))));
    tmpMap.put(_Fields.CHOICE_VARIANT_IDS, new org.apache.thrift.meta_data.FieldMetaData("choiceVariantIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RETURN_RECOMMENDATION_STRATEGIES, new org.apache.thrift.meta_data.FieldMetaData("returnRecommendationStrategies", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DIMENSION, new org.apache.thrift.meta_data.FieldMetaData("dimension", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportDimension.class)));
    tmpMap.put(_Fields.FUNNEL_METRICS, new org.apache.thrift.meta_data.FieldMetaData("funnelMetrics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportMetric.class))));
    tmpMap.put(_Fields.SORT_BYS, new org.apache.thrift.meta_data.FieldMetaData("sortBys", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReportMetric.class))));
    tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimeRange.class)));
    tmpMap.put(_Fields.PRECISION, new org.apache.thrift.meta_data.FieldMetaData("precision", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TimeRangePrecision.class)));
    tmpMap.put(_Fields.START_INDEX, new org.apache.thrift.meta_data.FieldMetaData("startIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MAX_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("maxResults", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChoiceReportRequest.class, metaDataMap);
  }

  public ChoiceReportRequest() {
  }

  public ChoiceReportRequest(
    String choiceSourceId,
    Choice choice,
    List<ReportMetric> metrics,
    TimeRange range,
    TimeRangePrecision precision,
    short maxResults)
  {
    this();
    this.choiceSourceId = choiceSourceId;
    this.choice = choice;
    this.metrics = metrics;
    this.range = range;
    this.precision = precision;
    this.maxResults = maxResults;
    setMaxResultsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChoiceReportRequest(ChoiceReportRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetChoiceSourceId()) {
      this.choiceSourceId = other.choiceSourceId;
    }
    if (other.isSetChoice()) {
      this.choice = new Choice(other.choice);
    }
    if (other.isSetMetrics()) {
      List<ReportMetric> __this__metrics = new ArrayList<ReportMetric>(other.metrics.size());
      for (ReportMetric other_element : other.metrics) {
        __this__metrics.add(new ReportMetric(other_element));
      }
      this.metrics = __this__metrics;
    }
    if (other.isSetChoiceVariantIds()) {
      List<String> __this__choiceVariantIds = new ArrayList<String>(other.choiceVariantIds);
      this.choiceVariantIds = __this__choiceVariantIds;
    }
    this.returnRecommendationStrategies = other.returnRecommendationStrategies;
    if (other.isSetDimension()) {
      this.dimension = new ReportDimension(other.dimension);
    }
    if (other.isSetFunnelMetrics()) {
      List<ReportMetric> __this__funnelMetrics = new ArrayList<ReportMetric>(other.funnelMetrics.size());
      for (ReportMetric other_element : other.funnelMetrics) {
        __this__funnelMetrics.add(new ReportMetric(other_element));
      }
      this.funnelMetrics = __this__funnelMetrics;
    }
    if (other.isSetSortBys()) {
      List<ReportMetric> __this__sortBys = new ArrayList<ReportMetric>(other.sortBys.size());
      for (ReportMetric other_element : other.sortBys) {
        __this__sortBys.add(new ReportMetric(other_element));
      }
      this.sortBys = __this__sortBys;
    }
    if (other.isSetRange()) {
      this.range = new TimeRange(other.range);
    }
    if (other.isSetPrecision()) {
      this.precision = other.precision;
    }
    this.startIndex = other.startIndex;
    this.maxResults = other.maxResults;
  }

  public ChoiceReportRequest deepCopy() {
    return new ChoiceReportRequest(this);
  }

  @Override
  public void clear() {
    this.choiceSourceId = null;
    this.choice = null;
    this.metrics = null;
    this.choiceVariantIds = null;
    setReturnRecommendationStrategiesIsSet(false);
    this.returnRecommendationStrategies = false;
    this.dimension = null;
    this.funnelMetrics = null;
    this.sortBys = null;
    this.range = null;
    this.precision = null;
    setStartIndexIsSet(false);
    this.startIndex = 0;
    setMaxResultsIsSet(false);
    this.maxResults = 0;
  }

  /**
   * the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)
   */
  public String getChoiceSourceId() {
    return this.choiceSourceId;
  }

  /**
   * the choice source id (identifying the system being the source of the choices, if you don't have a choice source id already, please contact support@boxalino.com) (must follow the content id format: <= 50 alphanumeric characters without accent or punctuation)
   */
  public ChoiceReportRequest setChoiceSourceId(String choiceSourceId) {
    this.choiceSourceId = choiceSourceId;
    return this;
  }

  public void unsetChoiceSourceId() {
    this.choiceSourceId = null;
  }

  /** Returns true if field choiceSourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetChoiceSourceId() {
    return this.choiceSourceId != null;
  }

  public void setChoiceSourceIdIsSet(boolean value) {
    if (!value) {
      this.choiceSourceId = null;
    }
  }

  /**
   * the choice to analyse (e.g.: each landing page is a choice and has several variant potentially, even if only one)
   */
  public Choice getChoice() {
    return this.choice;
  }

  /**
   * the choice to analyse (e.g.: each landing page is a choice and has several variant potentially, even if only one)
   */
  public ChoiceReportRequest setChoice(Choice choice) {
    this.choice = choice;
    return this;
  }

  public void unsetChoice() {
    this.choice = null;
  }

  /** Returns true if field choice is set (has been assigned a value) and false otherwise */
  public boolean isSetChoice() {
    return this.choice != null;
  }

  public void setChoiceIsSet(boolean value) {
    if (!value) {
      this.choice = null;
    }
  }

  public int getMetricsSize() {
    return (this.metrics == null) ? 0 : this.metrics.size();
  }

  public java.util.Iterator<ReportMetric> getMetricsIterator() {
    return (this.metrics == null) ? null : this.metrics.iterator();
  }

  public void addToMetrics(ReportMetric elem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<ReportMetric>();
    }
    this.metrics.add(elem);
  }

  /**
   * the metrics to evaluate report (e.g.: kpis to return)
   */
  public List<ReportMetric> getMetrics() {
    return this.metrics;
  }

  /**
   * the metrics to evaluate report (e.g.: kpis to return)
   */
  public ChoiceReportRequest setMetrics(List<ReportMetric> metrics) {
    this.metrics = metrics;
    return this;
  }

  public void unsetMetrics() {
    this.metrics = null;
  }

  /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
  public boolean isSetMetrics() {
    return this.metrics != null;
  }

  public void setMetricsIsSet(boolean value) {
    if (!value) {
      this.metrics = null;
    }
  }

  public int getChoiceVariantIdsSize() {
    return (this.choiceVariantIds == null) ? 0 : this.choiceVariantIds.size();
  }

  public java.util.Iterator<String> getChoiceVariantIdsIterator() {
    return (this.choiceVariantIds == null) ? null : this.choiceVariantIds.iterator();
  }

  public void addToChoiceVariantIds(String elem) {
    if (this.choiceVariantIds == null) {
      this.choiceVariantIds = new ArrayList<String>();
    }
    this.choiceVariantIds.add(elem);
  }

  /**
   * an optional choice variants to use as filters (only return the results for these choicevariants)
   */
  public List<String> getChoiceVariantIds() {
    return this.choiceVariantIds;
  }

  /**
   * an optional choice variants to use as filters (only return the results for these choicevariants)
   */
  public ChoiceReportRequest setChoiceVariantIds(List<String> choiceVariantIds) {
    this.choiceVariantIds = choiceVariantIds;
    return this;
  }

  public void unsetChoiceVariantIds() {
    this.choiceVariantIds = null;
  }

  /** Returns true if field choiceVariantIds is set (has been assigned a value) and false otherwise */
  public boolean isSetChoiceVariantIds() {
    return this.choiceVariantIds != null;
  }

  public void setChoiceVariantIdsIsSet(boolean value) {
    if (!value) {
      this.choiceVariantIds = null;
    }
  }

  /**
   * an optional flag to indicate that the results should display not only the choice variant, but which recommendation strategies have been used for each choice variant (only applicable if the choice is a recommendation choice)
   */
  public boolean isReturnRecommendationStrategies() {
    return this.returnRecommendationStrategies;
  }

  /**
   * an optional flag to indicate that the results should display not only the choice variant, but which recommendation strategies have been used for each choice variant (only applicable if the choice is a recommendation choice)
   */
  public ChoiceReportRequest setReturnRecommendationStrategies(boolean returnRecommendationStrategies) {
    this.returnRecommendationStrategies = returnRecommendationStrategies;
    setReturnRecommendationStrategiesIsSet(true);
    return this;
  }

  public void unsetReturnRecommendationStrategies() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNRECOMMENDATIONSTRATEGIES_ISSET_ID);
  }

  /** Returns true if field returnRecommendationStrategies is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnRecommendationStrategies() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURNRECOMMENDATIONSTRATEGIES_ISSET_ID);
  }

  public void setReturnRecommendationStrategiesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNRECOMMENDATIONSTRATEGIES_ISSET_ID, value);
  }

  /**
   * an optional dimension for the report (for segmentation), while groups are different for each type of reporting, the dimension are normally standard (visitor country, device, ...)
   */
  public ReportDimension getDimension() {
    return this.dimension;
  }

  /**
   * an optional dimension for the report (for segmentation), while groups are different for each type of reporting, the dimension are normally standard (visitor country, device, ...)
   */
  public ChoiceReportRequest setDimension(ReportDimension dimension) {
    this.dimension = dimension;
    return this;
  }

  public void unsetDimension() {
    this.dimension = null;
  }

  /** Returns true if field dimension is set (has been assigned a value) and false otherwise */
  public boolean isSetDimension() {
    return this.dimension != null;
  }

  public void setDimensionIsSet(boolean value) {
    if (!value) {
      this.dimension = null;
    }
  }

  public int getFunnelMetricsSize() {
    return (this.funnelMetrics == null) ? 0 : this.funnelMetrics.size();
  }

  public java.util.Iterator<ReportMetric> getFunnelMetricsIterator() {
    return (this.funnelMetrics == null) ? null : this.funnelMetrics.iterator();
  }

  public void addToFunnelMetrics(ReportMetric elem) {
    if (this.funnelMetrics == null) {
      this.funnelMetrics = new ArrayList<ReportMetric>();
    }
    this.funnelMetrics.add(elem);
  }

  /**
   * an optional list of metrics to limit the report to only the cases where at least one of the metrics of the list was reached (e.g.: if focusedMetrics are goal-X and goal-Y, then the Metric Transactions will not be returned for all the visits, but only for the visits who did reach goal-X or goal-Y at least once)
   */
  public List<ReportMetric> getFunnelMetrics() {
    return this.funnelMetrics;
  }

  /**
   * an optional list of metrics to limit the report to only the cases where at least one of the metrics of the list was reached (e.g.: if focusedMetrics are goal-X and goal-Y, then the Metric Transactions will not be returned for all the visits, but only for the visits who did reach goal-X or goal-Y at least once)
   */
  public ChoiceReportRequest setFunnelMetrics(List<ReportMetric> funnelMetrics) {
    this.funnelMetrics = funnelMetrics;
    return this;
  }

  public void unsetFunnelMetrics() {
    this.funnelMetrics = null;
  }

  /** Returns true if field funnelMetrics is set (has been assigned a value) and false otherwise */
  public boolean isSetFunnelMetrics() {
    return this.funnelMetrics != null;
  }

  public void setFunnelMetricsIsSet(boolean value) {
    if (!value) {
      this.funnelMetrics = null;
    }
  }

  public int getSortBysSize() {
    return (this.sortBys == null) ? 0 : this.sortBys.size();
  }

  public java.util.Iterator<ReportMetric> getSortBysIterator() {
    return (this.sortBys == null) ? null : this.sortBys.iterator();
  }

  public void addToSortBys(ReportMetric elem) {
    if (this.sortBys == null) {
      this.sortBys = new ArrayList<ReportMetric>();
    }
    this.sortBys.add(elem);
  }

  /**
   * the metrics to use for sorting the results
   */
  public List<ReportMetric> getSortBys() {
    return this.sortBys;
  }

  /**
   * the metrics to use for sorting the results
   */
  public ChoiceReportRequest setSortBys(List<ReportMetric> sortBys) {
    this.sortBys = sortBys;
    return this;
  }

  public void unsetSortBys() {
    this.sortBys = null;
  }

  /** Returns true if field sortBys is set (has been assigned a value) and false otherwise */
  public boolean isSetSortBys() {
    return this.sortBys != null;
  }

  public void setSortBysIsSet(boolean value) {
    if (!value) {
      this.sortBys = null;
    }
  }

  /**
   * a required date range for the reporting response (precision is only managed per day)
   */
  public TimeRange getRange() {
    return this.range;
  }

  /**
   * a required date range for the reporting response (precision is only managed per day)
   */
  public ChoiceReportRequest setRange(TimeRange range) {
    this.range = range;
    return this;
  }

  public void unsetRange() {
    this.range = null;
  }

  /** Returns true if field range is set (has been assigned a value) and false otherwise */
  public boolean isSetRange() {
    return this.range != null;
  }

  public void setRangeIsSet(boolean value) {
    if (!value) {
      this.range = null;
    }
  }

  /**
   * a required date range precision if the results should be aggregated per week or month, overall or return for each day
   * 
   * @see TimeRangePrecision
   */
  public TimeRangePrecision getPrecision() {
    return this.precision;
  }

  /**
   * a required date range precision if the results should be aggregated per week or month, overall or return for each day
   * 
   * @see TimeRangePrecision
   */
  public ChoiceReportRequest setPrecision(TimeRangePrecision precision) {
    this.precision = precision;
    return this;
  }

  public void unsetPrecision() {
    this.precision = null;
  }

  /** Returns true if field precision is set (has been assigned a value) and false otherwise */
  public boolean isSetPrecision() {
    return this.precision != null;
  }

  public void setPrecisionIsSet(boolean value) {
    if (!value) {
      this.precision = null;
    }
  }

  /**
   * an optional starting index (e.g.: if the maximum number of results was exceeded and a second page needs to be displayed). First index is 0.
   */
  public short getStartIndex() {
    return this.startIndex;
  }

  /**
   * an optional starting index (e.g.: if the maximum number of results was exceeded and a second page needs to be displayed). First index is 0.
   */
  public ChoiceReportRequest setStartIndex(short startIndex) {
    this.startIndex = startIndex;
    setStartIndexIsSet(true);
    return this;
  }

  public void unsetStartIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
  }

  /** Returns true if field startIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetStartIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTINDEX_ISSET_ID);
  }

  public void setStartIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINDEX_ISSET_ID, value);
  }

  /**
   * an required number of maximum number of results (one result is one source of date rage data in of values for all kpis)
   */
  public short getMaxResults() {
    return this.maxResults;
  }

  /**
   * an required number of maximum number of results (one result is one source of date rage data in of values for all kpis)
   */
  public ChoiceReportRequest setMaxResults(short maxResults) {
    this.maxResults = maxResults;
    setMaxResultsIsSet(true);
    return this;
  }

  public void unsetMaxResults() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXRESULTS_ISSET_ID);
  }

  /** Returns true if field maxResults is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxResults() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXRESULTS_ISSET_ID);
  }

  public void setMaxResultsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXRESULTS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHOICE_SOURCE_ID:
      if (value == null) {
        unsetChoiceSourceId();
      } else {
        setChoiceSourceId((String)value);
      }
      break;

    case CHOICE:
      if (value == null) {
        unsetChoice();
      } else {
        setChoice((Choice)value);
      }
      break;

    case METRICS:
      if (value == null) {
        unsetMetrics();
      } else {
        setMetrics((List<ReportMetric>)value);
      }
      break;

    case CHOICE_VARIANT_IDS:
      if (value == null) {
        unsetChoiceVariantIds();
      } else {
        setChoiceVariantIds((List<String>)value);
      }
      break;

    case RETURN_RECOMMENDATION_STRATEGIES:
      if (value == null) {
        unsetReturnRecommendationStrategies();
      } else {
        setReturnRecommendationStrategies((Boolean)value);
      }
      break;

    case DIMENSION:
      if (value == null) {
        unsetDimension();
      } else {
        setDimension((ReportDimension)value);
      }
      break;

    case FUNNEL_METRICS:
      if (value == null) {
        unsetFunnelMetrics();
      } else {
        setFunnelMetrics((List<ReportMetric>)value);
      }
      break;

    case SORT_BYS:
      if (value == null) {
        unsetSortBys();
      } else {
        setSortBys((List<ReportMetric>)value);
      }
      break;

    case RANGE:
      if (value == null) {
        unsetRange();
      } else {
        setRange((TimeRange)value);
      }
      break;

    case PRECISION:
      if (value == null) {
        unsetPrecision();
      } else {
        setPrecision((TimeRangePrecision)value);
      }
      break;

    case START_INDEX:
      if (value == null) {
        unsetStartIndex();
      } else {
        setStartIndex((Short)value);
      }
      break;

    case MAX_RESULTS:
      if (value == null) {
        unsetMaxResults();
      } else {
        setMaxResults((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHOICE_SOURCE_ID:
      return getChoiceSourceId();

    case CHOICE:
      return getChoice();

    case METRICS:
      return getMetrics();

    case CHOICE_VARIANT_IDS:
      return getChoiceVariantIds();

    case RETURN_RECOMMENDATION_STRATEGIES:
      return Boolean.valueOf(isReturnRecommendationStrategies());

    case DIMENSION:
      return getDimension();

    case FUNNEL_METRICS:
      return getFunnelMetrics();

    case SORT_BYS:
      return getSortBys();

    case RANGE:
      return getRange();

    case PRECISION:
      return getPrecision();

    case START_INDEX:
      return Short.valueOf(getStartIndex());

    case MAX_RESULTS:
      return Short.valueOf(getMaxResults());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHOICE_SOURCE_ID:
      return isSetChoiceSourceId();
    case CHOICE:
      return isSetChoice();
    case METRICS:
      return isSetMetrics();
    case CHOICE_VARIANT_IDS:
      return isSetChoiceVariantIds();
    case RETURN_RECOMMENDATION_STRATEGIES:
      return isSetReturnRecommendationStrategies();
    case DIMENSION:
      return isSetDimension();
    case FUNNEL_METRICS:
      return isSetFunnelMetrics();
    case SORT_BYS:
      return isSetSortBys();
    case RANGE:
      return isSetRange();
    case PRECISION:
      return isSetPrecision();
    case START_INDEX:
      return isSetStartIndex();
    case MAX_RESULTS:
      return isSetMaxResults();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChoiceReportRequest)
      return this.equals((ChoiceReportRequest)that);
    return false;
  }

  public boolean equals(ChoiceReportRequest that) {
    if (that == null)
      return false;

    boolean this_present_choiceSourceId = true && this.isSetChoiceSourceId();
    boolean that_present_choiceSourceId = true && that.isSetChoiceSourceId();
    if (this_present_choiceSourceId || that_present_choiceSourceId) {
      if (!(this_present_choiceSourceId && that_present_choiceSourceId))
        return false;
      if (!this.choiceSourceId.equals(that.choiceSourceId))
        return false;
    }

    boolean this_present_choice = true && this.isSetChoice();
    boolean that_present_choice = true && that.isSetChoice();
    if (this_present_choice || that_present_choice) {
      if (!(this_present_choice && that_present_choice))
        return false;
      if (!this.choice.equals(that.choice))
        return false;
    }

    boolean this_present_metrics = true && this.isSetMetrics();
    boolean that_present_metrics = true && that.isSetMetrics();
    if (this_present_metrics || that_present_metrics) {
      if (!(this_present_metrics && that_present_metrics))
        return false;
      if (!this.metrics.equals(that.metrics))
        return false;
    }

    boolean this_present_choiceVariantIds = true && this.isSetChoiceVariantIds();
    boolean that_present_choiceVariantIds = true && that.isSetChoiceVariantIds();
    if (this_present_choiceVariantIds || that_present_choiceVariantIds) {
      if (!(this_present_choiceVariantIds && that_present_choiceVariantIds))
        return false;
      if (!this.choiceVariantIds.equals(that.choiceVariantIds))
        return false;
    }

    boolean this_present_returnRecommendationStrategies = true && this.isSetReturnRecommendationStrategies();
    boolean that_present_returnRecommendationStrategies = true && that.isSetReturnRecommendationStrategies();
    if (this_present_returnRecommendationStrategies || that_present_returnRecommendationStrategies) {
      if (!(this_present_returnRecommendationStrategies && that_present_returnRecommendationStrategies))
        return false;
      if (this.returnRecommendationStrategies != that.returnRecommendationStrategies)
        return false;
    }

    boolean this_present_dimension = true && this.isSetDimension();
    boolean that_present_dimension = true && that.isSetDimension();
    if (this_present_dimension || that_present_dimension) {
      if (!(this_present_dimension && that_present_dimension))
        return false;
      if (!this.dimension.equals(that.dimension))
        return false;
    }

    boolean this_present_funnelMetrics = true && this.isSetFunnelMetrics();
    boolean that_present_funnelMetrics = true && that.isSetFunnelMetrics();
    if (this_present_funnelMetrics || that_present_funnelMetrics) {
      if (!(this_present_funnelMetrics && that_present_funnelMetrics))
        return false;
      if (!this.funnelMetrics.equals(that.funnelMetrics))
        return false;
    }

    boolean this_present_sortBys = true && this.isSetSortBys();
    boolean that_present_sortBys = true && that.isSetSortBys();
    if (this_present_sortBys || that_present_sortBys) {
      if (!(this_present_sortBys && that_present_sortBys))
        return false;
      if (!this.sortBys.equals(that.sortBys))
        return false;
    }

    boolean this_present_range = true && this.isSetRange();
    boolean that_present_range = true && that.isSetRange();
    if (this_present_range || that_present_range) {
      if (!(this_present_range && that_present_range))
        return false;
      if (!this.range.equals(that.range))
        return false;
    }

    boolean this_present_precision = true && this.isSetPrecision();
    boolean that_present_precision = true && that.isSetPrecision();
    if (this_present_precision || that_present_precision) {
      if (!(this_present_precision && that_present_precision))
        return false;
      if (!this.precision.equals(that.precision))
        return false;
    }

    boolean this_present_startIndex = true && this.isSetStartIndex();
    boolean that_present_startIndex = true && that.isSetStartIndex();
    if (this_present_startIndex || that_present_startIndex) {
      if (!(this_present_startIndex && that_present_startIndex))
        return false;
      if (this.startIndex != that.startIndex)
        return false;
    }

    boolean this_present_maxResults = true;
    boolean that_present_maxResults = true;
    if (this_present_maxResults || that_present_maxResults) {
      if (!(this_present_maxResults && that_present_maxResults))
        return false;
      if (this.maxResults != that.maxResults)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_choiceSourceId = true && (isSetChoiceSourceId());
    list.add(present_choiceSourceId);
    if (present_choiceSourceId)
      list.add(choiceSourceId);

    boolean present_choice = true && (isSetChoice());
    list.add(present_choice);
    if (present_choice)
      list.add(choice);

    boolean present_metrics = true && (isSetMetrics());
    list.add(present_metrics);
    if (present_metrics)
      list.add(metrics);

    boolean present_choiceVariantIds = true && (isSetChoiceVariantIds());
    list.add(present_choiceVariantIds);
    if (present_choiceVariantIds)
      list.add(choiceVariantIds);

    boolean present_returnRecommendationStrategies = true && (isSetReturnRecommendationStrategies());
    list.add(present_returnRecommendationStrategies);
    if (present_returnRecommendationStrategies)
      list.add(returnRecommendationStrategies);

    boolean present_dimension = true && (isSetDimension());
    list.add(present_dimension);
    if (present_dimension)
      list.add(dimension);

    boolean present_funnelMetrics = true && (isSetFunnelMetrics());
    list.add(present_funnelMetrics);
    if (present_funnelMetrics)
      list.add(funnelMetrics);

    boolean present_sortBys = true && (isSetSortBys());
    list.add(present_sortBys);
    if (present_sortBys)
      list.add(sortBys);

    boolean present_range = true && (isSetRange());
    list.add(present_range);
    if (present_range)
      list.add(range);

    boolean present_precision = true && (isSetPrecision());
    list.add(present_precision);
    if (present_precision)
      list.add(precision.getValue());

    boolean present_startIndex = true && (isSetStartIndex());
    list.add(present_startIndex);
    if (present_startIndex)
      list.add(startIndex);

    boolean present_maxResults = true;
    list.add(present_maxResults);
    if (present_maxResults)
      list.add(maxResults);

    return list.hashCode();
  }

  @Override
  public int compareTo(ChoiceReportRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChoiceSourceId()).compareTo(other.isSetChoiceSourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoiceSourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceSourceId, other.choiceSourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChoice()).compareTo(other.isSetChoice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choice, other.choice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetrics()).compareTo(other.isSetMetrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metrics, other.metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChoiceVariantIds()).compareTo(other.isSetChoiceVariantIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChoiceVariantIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.choiceVariantIds, other.choiceVariantIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnRecommendationStrategies()).compareTo(other.isSetReturnRecommendationStrategies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnRecommendationStrategies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnRecommendationStrategies, other.returnRecommendationStrategies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDimension()).compareTo(other.isSetDimension());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDimension()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dimension, other.dimension);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFunnelMetrics()).compareTo(other.isSetFunnelMetrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunnelMetrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funnelMetrics, other.funnelMetrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortBys()).compareTo(other.isSetSortBys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortBys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortBys, other.sortBys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRange()).compareTo(other.isSetRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, other.range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrecision()).compareTo(other.isSetPrecision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrecision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.precision, other.precision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartIndex()).compareTo(other.isSetStartIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startIndex, other.startIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxResults()).compareTo(other.isSetMaxResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxResults, other.maxResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChoiceReportRequest(");
    boolean first = true;

    sb.append("choiceSourceId:");
    if (this.choiceSourceId == null) {
      sb.append("null");
    } else {
      sb.append(this.choiceSourceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("choice:");
    if (this.choice == null) {
      sb.append("null");
    } else {
      sb.append(this.choice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metrics:");
    if (this.metrics == null) {
      sb.append("null");
    } else {
      sb.append(this.metrics);
    }
    first = false;
    if (isSetChoiceVariantIds()) {
      if (!first) sb.append(", ");
      sb.append("choiceVariantIds:");
      if (this.choiceVariantIds == null) {
        sb.append("null");
      } else {
        sb.append(this.choiceVariantIds);
      }
      first = false;
    }
    if (isSetReturnRecommendationStrategies()) {
      if (!first) sb.append(", ");
      sb.append("returnRecommendationStrategies:");
      sb.append(this.returnRecommendationStrategies);
      first = false;
    }
    if (isSetDimension()) {
      if (!first) sb.append(", ");
      sb.append("dimension:");
      if (this.dimension == null) {
        sb.append("null");
      } else {
        sb.append(this.dimension);
      }
      first = false;
    }
    if (isSetFunnelMetrics()) {
      if (!first) sb.append(", ");
      sb.append("funnelMetrics:");
      if (this.funnelMetrics == null) {
        sb.append("null");
      } else {
        sb.append(this.funnelMetrics);
      }
      first = false;
    }
    if (isSetSortBys()) {
      if (!first) sb.append(", ");
      sb.append("sortBys:");
      if (this.sortBys == null) {
        sb.append("null");
      } else {
        sb.append(this.sortBys);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("range:");
    if (this.range == null) {
      sb.append("null");
    } else {
      sb.append(this.range);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("precision:");
    if (this.precision == null) {
      sb.append("null");
    } else {
      sb.append(this.precision);
    }
    first = false;
    if (isSetStartIndex()) {
      if (!first) sb.append(", ");
      sb.append("startIndex:");
      sb.append(this.startIndex);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("maxResults:");
    sb.append(this.maxResults);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (choice == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'choice' was not present! Struct: " + toString());
    }
    if (metrics == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'metrics' was not present! Struct: " + toString());
    }
    if (range == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'range' was not present! Struct: " + toString());
    }
    if (precision == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'precision' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'maxResults' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (choice != null) {
      choice.validate();
    }
    if (dimension != null) {
      dimension.validate();
    }
    if (range != null) {
      range.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChoiceReportRequestStandardSchemeFactory implements SchemeFactory {
    public ChoiceReportRequestStandardScheme getScheme() {
      return new ChoiceReportRequestStandardScheme();
    }
  }

  private static class ChoiceReportRequestStandardScheme extends StandardScheme<ChoiceReportRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChoiceReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHOICE_SOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.choiceSourceId = iprot.readString();
              struct.setChoiceSourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHOICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.choice = new Choice();
              struct.choice.read(iprot);
              struct.setChoiceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                struct.metrics = new ArrayList<ReportMetric>(_list152.size);
                ReportMetric _elem153;
                for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                {
                  _elem153 = new ReportMetric();
                  _elem153.read(iprot);
                  struct.metrics.add(_elem153);
                }
                iprot.readListEnd();
              }
              struct.setMetricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHOICE_VARIANT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list155 = iprot.readListBegin();
                struct.choiceVariantIds = new ArrayList<String>(_list155.size);
                String _elem156;
                for (int _i157 = 0; _i157 < _list155.size; ++_i157)
                {
                  _elem156 = iprot.readString();
                  struct.choiceVariantIds.add(_elem156);
                }
                iprot.readListEnd();
              }
              struct.setChoiceVariantIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RETURN_RECOMMENDATION_STRATEGIES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.returnRecommendationStrategies = iprot.readBool();
              struct.setReturnRecommendationStrategiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DIMENSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dimension = new ReportDimension();
              struct.dimension.read(iprot);
              struct.setDimensionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FUNNEL_METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
                struct.funnelMetrics = new ArrayList<ReportMetric>(_list158.size);
                ReportMetric _elem159;
                for (int _i160 = 0; _i160 < _list158.size; ++_i160)
                {
                  _elem159 = new ReportMetric();
                  _elem159.read(iprot);
                  struct.funnelMetrics.add(_elem159);
                }
                iprot.readListEnd();
              }
              struct.setFunnelMetricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SORT_BYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list161 = iprot.readListBegin();
                struct.sortBys = new ArrayList<ReportMetric>(_list161.size);
                ReportMetric _elem162;
                for (int _i163 = 0; _i163 < _list161.size; ++_i163)
                {
                  _elem162 = new ReportMetric();
                  _elem162.read(iprot);
                  struct.sortBys.add(_elem162);
                }
                iprot.readListEnd();
              }
              struct.setSortBysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.range = new TimeRange();
              struct.range.read(iprot);
              struct.setRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRECISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.precision = com.boxalino.dataintelligence.api.thrift.TimeRangePrecision.findByValue(iprot.readI32());
              struct.setPrecisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // START_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.startIndex = iprot.readI16();
              struct.setStartIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAX_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.maxResults = iprot.readI16();
              struct.setMaxResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMaxResults()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxResults' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChoiceReportRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.choiceSourceId != null) {
        oprot.writeFieldBegin(CHOICE_SOURCE_ID_FIELD_DESC);
        oprot.writeString(struct.choiceSourceId);
        oprot.writeFieldEnd();
      }
      if (struct.choice != null) {
        oprot.writeFieldBegin(CHOICE_FIELD_DESC);
        struct.choice.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.metrics != null) {
        oprot.writeFieldBegin(METRICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.metrics.size()));
          for (ReportMetric _iter164 : struct.metrics)
          {
            _iter164.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.choiceVariantIds != null) {
        if (struct.isSetChoiceVariantIds()) {
          oprot.writeFieldBegin(CHOICE_VARIANT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.choiceVariantIds.size()));
            for (String _iter165 : struct.choiceVariantIds)
            {
              oprot.writeString(_iter165);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReturnRecommendationStrategies()) {
        oprot.writeFieldBegin(RETURN_RECOMMENDATION_STRATEGIES_FIELD_DESC);
        oprot.writeBool(struct.returnRecommendationStrategies);
        oprot.writeFieldEnd();
      }
      if (struct.dimension != null) {
        if (struct.isSetDimension()) {
          oprot.writeFieldBegin(DIMENSION_FIELD_DESC);
          struct.dimension.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.funnelMetrics != null) {
        if (struct.isSetFunnelMetrics()) {
          oprot.writeFieldBegin(FUNNEL_METRICS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.funnelMetrics.size()));
            for (ReportMetric _iter166 : struct.funnelMetrics)
            {
              _iter166.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sortBys != null) {
        if (struct.isSetSortBys()) {
          oprot.writeFieldBegin(SORT_BYS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sortBys.size()));
            for (ReportMetric _iter167 : struct.sortBys)
            {
              _iter167.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.range != null) {
        oprot.writeFieldBegin(RANGE_FIELD_DESC);
        struct.range.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.precision != null) {
        oprot.writeFieldBegin(PRECISION_FIELD_DESC);
        oprot.writeI32(struct.precision.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetStartIndex()) {
        oprot.writeFieldBegin(START_INDEX_FIELD_DESC);
        oprot.writeI16(struct.startIndex);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_RESULTS_FIELD_DESC);
      oprot.writeI16(struct.maxResults);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChoiceReportRequestTupleSchemeFactory implements SchemeFactory {
    public ChoiceReportRequestTupleScheme getScheme() {
      return new ChoiceReportRequestTupleScheme();
    }
  }

  private static class ChoiceReportRequestTupleScheme extends TupleScheme<ChoiceReportRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChoiceReportRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.choice.write(oprot);
      {
        oprot.writeI32(struct.metrics.size());
        for (ReportMetric _iter168 : struct.metrics)
        {
          _iter168.write(oprot);
        }
      }
      struct.range.write(oprot);
      oprot.writeI32(struct.precision.getValue());
      oprot.writeI16(struct.maxResults);
      BitSet optionals = new BitSet();
      if (struct.isSetChoiceSourceId()) {
        optionals.set(0);
      }
      if (struct.isSetChoiceVariantIds()) {
        optionals.set(1);
      }
      if (struct.isSetReturnRecommendationStrategies()) {
        optionals.set(2);
      }
      if (struct.isSetDimension()) {
        optionals.set(3);
      }
      if (struct.isSetFunnelMetrics()) {
        optionals.set(4);
      }
      if (struct.isSetSortBys()) {
        optionals.set(5);
      }
      if (struct.isSetStartIndex()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetChoiceSourceId()) {
        oprot.writeString(struct.choiceSourceId);
      }
      if (struct.isSetChoiceVariantIds()) {
        {
          oprot.writeI32(struct.choiceVariantIds.size());
          for (String _iter169 : struct.choiceVariantIds)
          {
            oprot.writeString(_iter169);
          }
        }
      }
      if (struct.isSetReturnRecommendationStrategies()) {
        oprot.writeBool(struct.returnRecommendationStrategies);
      }
      if (struct.isSetDimension()) {
        struct.dimension.write(oprot);
      }
      if (struct.isSetFunnelMetrics()) {
        {
          oprot.writeI32(struct.funnelMetrics.size());
          for (ReportMetric _iter170 : struct.funnelMetrics)
          {
            _iter170.write(oprot);
          }
        }
      }
      if (struct.isSetSortBys()) {
        {
          oprot.writeI32(struct.sortBys.size());
          for (ReportMetric _iter171 : struct.sortBys)
          {
            _iter171.write(oprot);
          }
        }
      }
      if (struct.isSetStartIndex()) {
        oprot.writeI16(struct.startIndex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChoiceReportRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.choice = new Choice();
      struct.choice.read(iprot);
      struct.setChoiceIsSet(true);
      {
        org.apache.thrift.protocol.TList _list172 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.metrics = new ArrayList<ReportMetric>(_list172.size);
        ReportMetric _elem173;
        for (int _i174 = 0; _i174 < _list172.size; ++_i174)
        {
          _elem173 = new ReportMetric();
          _elem173.read(iprot);
          struct.metrics.add(_elem173);
        }
      }
      struct.setMetricsIsSet(true);
      struct.range = new TimeRange();
      struct.range.read(iprot);
      struct.setRangeIsSet(true);
      struct.precision = com.boxalino.dataintelligence.api.thrift.TimeRangePrecision.findByValue(iprot.readI32());
      struct.setPrecisionIsSet(true);
      struct.maxResults = iprot.readI16();
      struct.setMaxResultsIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.choiceSourceId = iprot.readString();
        struct.setChoiceSourceIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list175 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.choiceVariantIds = new ArrayList<String>(_list175.size);
          String _elem176;
          for (int _i177 = 0; _i177 < _list175.size; ++_i177)
          {
            _elem176 = iprot.readString();
            struct.choiceVariantIds.add(_elem176);
          }
        }
        struct.setChoiceVariantIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.returnRecommendationStrategies = iprot.readBool();
        struct.setReturnRecommendationStrategiesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dimension = new ReportDimension();
        struct.dimension.read(iprot);
        struct.setDimensionIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list178 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.funnelMetrics = new ArrayList<ReportMetric>(_list178.size);
          ReportMetric _elem179;
          for (int _i180 = 0; _i180 < _list178.size; ++_i180)
          {
            _elem179 = new ReportMetric();
            _elem179.read(iprot);
            struct.funnelMetrics.add(_elem179);
          }
        }
        struct.setFunnelMetricsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sortBys = new ArrayList<ReportMetric>(_list181.size);
          ReportMetric _elem182;
          for (int _i183 = 0; _i183 < _list181.size; ++_i183)
          {
            _elem182 = new ReportMetric();
            _elem182.read(iprot);
            struct.sortBys.add(_elem182);
          }
        }
        struct.setSortBysIsSet(true);
      }
      if (incoming.get(6)) {
        struct.startIndex = iprot.readI16();
        struct.setStartIndexIsSet(true);
      }
    }
  }

}

