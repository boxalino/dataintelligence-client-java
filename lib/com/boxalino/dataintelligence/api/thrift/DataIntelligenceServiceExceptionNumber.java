/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.boxalino.dataintelligence.api.thrift;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

/**
 * This enumeration defines the possible exception states returned by Boxalino Data Intelligence Thrift API
 * 
 * <dl>
 * <dt>GENERAL_EXCEPTION</dt>
 * <dd>general case of exception (no special detailed provided)</dd>
 * 
 * <dt>INVALID_CREDENTIALS</dt>
 * <dd>the provided credentials to retrieve an authentication token are not valid (wrong username, password or both)</dd>
 * 
 * <dt>BLOCKED_USER</dt>
 * <dd>your user has been blocked (but it doesn't necessarily mean your account has been blocked)</dd>
 * 
 * <dt>BLOCKED_ACCOUNT</dt>
 * <dd>your account has been blocked, you must contact Boxalino (<a href="mailto:support@boxalino.com">support@boxalino.com</a>) to know the reasons of this blocking.</dd>
 * 
 * <dt>INVALID_AUTHENTICATION_TOKEN</dt>
 * <dd>the provided authentication token is invalid (wrong, or no more valid), you should get a new one by calling the GetAuthentication service.</dd>
 * 
 * <dt>INVALID_NEW_PASSWORD</dt>
 * <dd>specific to the service function UpdatePassword: means that the new password is not correct (should be at least 8 characters long and not contain any punctuation)</dd>
 * 
 * <dt>INVALID_CONFIGURATION_VERSION</dt>
 * <dd>the provided configuration object contains a configuration version number which doesn't exists or cannot be accessed</dd>
 * </dl>
 * 
 * <dt>INVALID_DATASOURCE</dt>
 * <dd>the provided XML data source is not correct (see documentation of the data source XML format)</dd>
 * </dl>
 * 
 * <dt>NON_EXISTING_CONTENT_ID</dt>
 * <dd>the provided content to be changed (updated, deleted, etc.) is defined with a content id which doesn't exists</dd>
 * </dl>
 * 
 * <dt>ALREADY_EXISTING_CONTENT_ID</dt>
 * <dd>the provided content id to be created already exists</dd>
 * </dl>
 * 
 * <dt>INVALID_CONTENT_ID</dt>
 * <dd>the provided content id doesn't not match the requested format (less than 50 alphanumeric characters without any punctuation or accent)</dd>
 * </dl>
 * 
 * <dt>INVALID_CONTENT</dt>
 * <dd>the provided content data are not correctly set</dd>
 * </dl>
 * 
 * <dt>INVALID_LANGUAGE</dt>
 * <dd>one of the provided languages has not been defined for this account</dd>
 * </dl>
 */
public enum DataIntelligenceServiceExceptionNumber implements org.apache.thrift.TEnum {
  GENERAL_EXCEPTION(1),
  INVALID_CREDENTIALS(2),
  BLOCKED_USER(3),
  BLOCKED_ACCOUNT(4),
  INVALID_AUTHENTICATION_TOKEN(5),
  INVALID_NEW_PASSWORD(6),
  INVALID_CONFIGURATION_VERSION(7),
  INVALID_DATASOURCE(8),
  NON_EXISTING_CONTENT_ID(9),
  ALREADY_EXISTING_CONTENT_ID(10),
  INVALID_CONTENT_ID(11),
  INVALID_CONTENT(12),
  INVALID_LANGUAGE(13),
  DUPLICATED_FILE_ID(14),
  EMPTY_COLUMNS_LIST(15),
  NON_EXISTING_FILE(16);

  private final int value;

  private DataIntelligenceServiceExceptionNumber(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static DataIntelligenceServiceExceptionNumber findByValue(int value) { 
    switch (value) {
      case 1:
        return GENERAL_EXCEPTION;
      case 2:
        return INVALID_CREDENTIALS;
      case 3:
        return BLOCKED_USER;
      case 4:
        return BLOCKED_ACCOUNT;
      case 5:
        return INVALID_AUTHENTICATION_TOKEN;
      case 6:
        return INVALID_NEW_PASSWORD;
      case 7:
        return INVALID_CONFIGURATION_VERSION;
      case 8:
        return INVALID_DATASOURCE;
      case 9:
        return NON_EXISTING_CONTENT_ID;
      case 10:
        return ALREADY_EXISTING_CONTENT_ID;
      case 11:
        return INVALID_CONTENT_ID;
      case 12:
        return INVALID_CONTENT;
      case 13:
        return INVALID_LANGUAGE;
      case 14:
        return DUPLICATED_FILE_ID;
      case 15:
        return EMPTY_COLUMNS_LIST;
      case 16:
        return NON_EXISTING_FILE;
      default:
        return null;
    }
  }
}
